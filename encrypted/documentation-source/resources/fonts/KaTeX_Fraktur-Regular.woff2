<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"f76e0125f03c6936cc800074be0a44024be79413544682d3dcfe78a166c6931cb7156eea19a82a0121d47438b019f0978bb171ac868fe919471fbbb6e71473f8a81bef47e7f3cfff0fe6ef758a91c6836edd2575c9110237ac673ba7ff6e3445d9130a3eff387634aeef4580fffc83a73a999009eb757ad9f9c5d07287582369d2bc20945faca9b832c46bd53118bd4c979c75409af875dc60be3e6a2580472dd8c18c59ddf0fb0c0465a427c19274b5b110fbd509e768410036945e3791db08a84656ccf6d417a2bcfa2bf9f6c8b05cab5946177e07d25e2d4dd01980ef2a5c5e402f3ab419f5324c406ea40e1a5077d7d919f30a4ec450808778362e15da75f95778b8e4b5a8968fc6487d5855f4de18d269d479bdef452ff1c2b1ee3683ae532eb4bd0618d9f484768a53146339b7043554697fcb15b898c61bba982b10e7cec0c5e83581b167ca0799af989da82273bfa52c7255b48c4f809d1de9be43a3706135520cd99849fdb8f9414171449e2b7410477f4011fae046b13b8548302032fc765d1686d3f73c17668c216fbf0e26ef6c0167fc80b8739a97dd397f395d963ca1f37531b2a7efd21b59572d6b1ed3dfa6e090f264fc4d644382aaa49c8a2f21f21e74fd962a404db1204519e4a7592633d266b42a370ab0e2ff736b10e8db73a7b18f76dbd6f1f3542591d6d21534148309b0fbf1ea86606990364a5540d992efc78c1c56b8960fd41ba178a6a90d1adca3e507c4b04f5c9b7e06b8b5e4984c88a7fab0462ecb6e91d4ca3038ef341e4c3e039cd6a52b7e8983e2591fd6f9e8c36b3cf2cea0949d791fa1ef32a1461b36815c89c3250efff9dbd38a152bc8248f6547a043992816ae32adfb9e16e9e8570d4d193192d9b40081b21ad32c69f3490cc98c95835b9feec8aa8f10c593b12420ae1f87e634b2bf86b2cb883f320ce391cf03c79a10838126fdab7d3abcb5c1bdf5dd0f929d7f3109fe63a1cdf1e7bbd7fd28243d8aa15b9aaf30b50988da7abadfed6b1bedb716d7a98edcdc8e9a35acc488b3f2a367d32d33f901fefce1833bb6544de1d7c672bad9069af9e54bb62f79ee9839889eb92132ea2c2f01686d4748116ab51f1045dce6e23fe6aad9e988dbc3cf4ad44df0eaae41ae29834f27f61e2800e45b8d619726965c6dce88a89185eebea455a65867c4d40ea1ada940141ebbf5a5483921194fbc888dd0407372f5adf2e4b62dc2ed8f13c16216c552fdede372b059aee064e977854b2e540a9bc5d31120cc14ead690fd955c5c2b6074b4d6536629ed6d88020911bb528eb68db72da57e22b3abdf6ae92daa6dd3f23c261e9dd641e52cc89948b0f93a2db54a8353de48e2a91d3265340e1c6c9badaf510edf1769173a0a26da228253c8bfd8b8689b85f2fc8cef281055865d8445a6c7e51ef1933590b84f3ad71ae2bdeee62130154ce37b7188b333610b9b868db70431df038f1a6829204cf6ec4c7380a52398ae2e3d58e50996f5e67b73d2a40e07be97d6992b0af88867d1758aba681033b6a2ac989a21b8d70219eafcd594799e7e82d39fe45ec6a6ab2c90b42575801800e5fa74280afb06a3fa686c83809486689727cfa26af1eb5dc7e65bacf5601327642b2ef9ec21408a4eb1f7e67788b987f629c817d98a25f7f9242666829b6133c660abbfe3bcdd2f2eedabf007d2bde1e29ce735547c0f61c0a7e0e1b180495325b8d3c00004d351957a2052a80654718643effbf0b29b8e194924c0eb084912539d607f86831e2d27f66c9886b07ab996e143b941341c3a6e7f6ad65145e1bafd11c8518cd1ba862d730bd539ee7366873abe889b566e95b2aac398f4aed25bea3c49bd5259cfb2dedb7b35b8990735da647bb230049b57917e8e716139e05c236bad4200322751c77881c48569b7554dc71d734dbcad4feb4ab15abe47e2f1450bea4e2936ccedcfcf99d5f547b9357dc909d27eedca8d035b2a1fa725167fa857d3a160c5078d7c874de08628707fa2629c44fc886054e111b5a23012721590782da2e87343e42b8901a4f2988c377834c35d7ba773a7d638028638927d83da96f1b3c2d104fea818b976d79d266589a61ca8818067522942f66ed042933785193f394c5c2a299e2af9acd09cde8c2580cf1e49d7beaaa9302b0bae3611b053ea937771c20ac835a7bfec46198bbb62b18fae2101743f5b33c43be01966e24852a4db9bb5f6c00919407ec7cb323f98960864f08f2d1193aa43e53b83c6820348c5ed43b0af4c3920237b47d5e94d569e55f7ed574608054f191e01791763deae111fa3b06c2ebfd5268e6d9adb9ccd49875af8b729ec06c5ea12bc5d32adab940568e0610850cd02f1f62924416441deda5382ae9de30a7321217f168ce6066317bbe4aec5bce040df5cc83f3440316547f987bc317cff3571b873f59874e91f5368e5a1429faaa11f739dfbcaa663e8f974c19097809e00bde1abb3421130517097c358151b49c1ef3d4dc4efe90129e6eead9f5c97e5e332f53fdfff2b77b32120b912bdd0591e30199b85389f58ab062ef2e2aa36edd5d35008b643e57c28e8c76858a0e602d086733fa122f4abe36a25a97a6e2d1a57d82d7630ee9ed8ee115d3fc0ea3a44b509b3ad804d9626c2caed9cad60f9ca0294cd1e1715a0d58b290337b1d965bfc604b1a5d9f954c5dac972290929769e7c6a9f7e2304b86198e835c121255c39862943f5825e0a4610551c684b4df1f1f8c3d22e1789a6e3a54ce7587c4d83e56e1c16097c1b71d595a5eec5b419c48a11f8020d65e8d2373a9d7200008a6b46f03b6cdbd923aa55c59d6bb42f5e1fafe1a96b8972996c01e687c29534b670577e68df88bebd602b46617fe0f1d10ee45d8529dc6e93e718926ff32f7d09342af81bb97ff1b8bdb8b75ca53a68319753b674d2070a6dc543e74b7b826305b213a270f6ad7c7e2027b527ce3df5e4d3a953704e0a0ea4be01690d80c3b80e541e5ce019f824a303b63d2f4c79b947e2aa474f29cb65ee84311d95b42733c95c857436f1653fb83da82327175c125cbb795dfac19becf1420ef7abdd3220ac3601472e6473a77266f9fd7a4e629f315e6c17773b05354d3dc924bc2ec40d35e02dd4e3ff45a52e6cc88f055a2bbe6b9fae5cbf788b3c063dcee8673117e31d87686275b40a0f936427f1b959f0d98b3f34c548a68550460f5bcd0fc0e88842e13253b42f9775266c06dd1a14bf493cd142f29810a93c58445f186c42bab701565bfb2352ff1391516bd139f1bd7389c2d3b0d6cf52e2fb6e1f7a98b7572ba86910193cae747e3ff4c3f2a8ccd898c7101132e0e7ecb67bfca1da2eacd56c4145ec47bb988689797bb81a1413c61c0c910d41a5cbece2ad44b4f2b6f9831d62e4205d91c7a323783282d1777bb7d39601fd215e8d1dec9c5415d90dc5d8c141bd22991cb524492cad94c1882e28c2c271a7028bfb27ba28ca77356296fa70adddf59c3979ba69a0e6fbd9f4c9d878a329d888441606fe5ee04f3446fed1820687384014e9559870f2dffc2cbf6157db227aa01f43b795f543b0095877edc23d71c02d6445bba10811bbe31c13d722a2de951071330668b324d4536bb54b1f97c6d4b8688cd5354aff49cf0e4bd70e9af50d2f9b48cc75a1ebab232663564435c91a35eb0a4ef9e9f3e98a3f617ef1469cdf0d9ffdb0264925d4265c3aad45eb95e09489c30d4c6f544ae8ff2791d00764cdb988084f65eaea62f98cd3630be775d1bab1d2890d1e5b3487d48e11b64c49a691f5e59414318642b426959e0df6e7cd6275b63f6a3e8e463480e63946fd42496f5534bd61f8b94a561526286c6af83f99c386d853377bd03cbdc86b0f12625f601e241cfd31181c94298fa66cb000d9e13c84525364a6b94dd8a1e8d840d951ef6be0e4bc4c0700cb128d1074c6f64d7052208e2387430a8dd5c3becb02b3f0b656d1f27b02f7331017532d4eea54e276dcc54d27d0a12a47b2146515f37d5214d6fa507beff033c87cf3406db439ab72d97db85aedff0e0af288c7a2bd624ce16338a04674d319f296f292d7867c6909a855483c75d457dee14a19a9fe3006213adede65dbeeb058e7ec8e2d049764aeaf91c68ab727ca077386828433dc68efdacee4146453ec2e74ef30af6062d236ae418cd3d487d0cb1e7a6c8744e61ca5e53b5bc8ffa5dd898f4671378a37e85d38f6f80cfd0c46fd47814af33352ee160099458cfd566b333da3b43e80ef32f7acc808602b5e174c2209bc551f560a937e4da0af9ad1c663098a9af37366db28dfeed6ba87525726dbd0ee5ad2266a4edbae749bda537c006fc7b38551168172be105546d08f3d03df1e6ec73f8244cba45e27694233e663c5e651e880c6cf4ea13740305ebf71f554963fa48df25c7d94a45d493adf39d1bb09bfb46e15b53896e2be4232770131c1a22da7d76cb0faaad8e37a19587e5d2a3bd2ad0882db2b6de13422e1f87ac3e04185abda2408a1c6ef653b3ddff7ee6756d6f5da32e4167d354972cbe8dd85af663fa9556d140871bb0cd07d3b3b30548913a2f11ba2fc73a0d7c563052c75317883a8ca493999161b740cd2883d082075a8d2b222fd9d5eeafe5a461c6d12d9f1c3fb30c60efd43f32b807e6ddd5678bb638b3cb77519424b8e7de4f6ed86297456ce799ee1ddf10b1879cd8c2f1faea24b70d5133a3c965138c4cb2f00369e93322d30b815e8c095f8e1a14777f1ee3c33667444583409d71a6e948ddefad7158d07cf8791c3bbe2aebeaff221c01d7db76b79142e0ad42716a7e922527f0307a83ce3a16efcf038c2f89e0dd2c5de68923dc40be810389cd503d88701998e053c853b6db3e20cdc18d668f42b7cb25b531a85b8e3ba782180ba13f1cae3a2fc5a46f6191f082d591ddf923e37075b20201f7338662be91e61d259ca1f9857f78dd21652720d27a3c5ccbf3a86d63b9d017e02f64dfd89cc532127b6e028671484515962f42f4decd3234ee058bc1e3c77a73d4127af25bc4e60442d028ad55198962b55f51648e2a9f717da8908ffc2ee7a1447c2c8574f321cb7313cc1075fc5e2afadaea36c835f33f79e9b5ee24a1015246a21ea3b41ddaeb96a5a5d77ab28655a1707b3bbf591d4f414cb0ca58cb31d385db1b075940817d2c757e0ed5e01406d57693a6a8eaf5eefd62ce89e60826fb6ebb1407bedd9421e00a8a3f846d0a863340305697e682fecc45440dcf878a16af9a01a2c7b76009a8870e3ebbef65d348f3e97c79d291f7189d2e767c9a59a66b436b378097cef74ee7ced49d29fa22f7c12c6c5f8df5eadb577e11308485e63d9ca90a3698e856206fa5059765cefa957de2455bed260a8f6812acad0163b6862e90216db15826902c7ba83ae290d4ba1c6716a2da0ad13e37e98a28b1501806459b8dbe68c7b333525c750adc7f4b6058302f3d4f890f5e3e484eed47b7bb25e44e25153b3a636c2438a643e7941073248c471e230c0979d45483afaf2b2275aa531598a4c568d7ef487065de1cfe6b2df05c669d20dc84e340beb5c438b6826eb5081af959f92210e440ec206055a3f471427a5ac0463e8d8c36a2da6a0f8a3d37cdddcf47bfe10922c1a2986de76f9333ad53da625e5375dfd1cdb828ec893ac18813af0b3d329adf679cf16831ac32cc3a5fa19d00eaf580baa3d355b11b5b9c52d3102f05d069e9cf0811021a663791cd3fb7447213ac089fc7089919a580cb8b2d450f67869e7e8302512a82cb1001bd9eed0bc6f4e25480846a88813da745eea506b4bc42ddc1053a67ca0ca233f1ad9e35097fa4b10b00f7295aebd3d67b27859845c5aab26aa87b00d81b2c673d9245e8f487a8812db6e0b723fa63d445eb06c40f20446b29e498fc1e34d8579b4b82652e5686c278c3f86e819f0dcbfbdeba3e0204b8390b02df01c46854e5de7e6c06bc5c44ad4908af3a59c366b4bf5add8595d79b993f1ea9d55a4099b65fbef9412b01c01ec1e17667d565f42b262533ec31171fdff199ffcfbb5f8e21a43e63b0246f9c9ed39135781de3c69c28ce41e943ec2bd3330de60599bb4367afbb2b382c0e8850048757a4c1e2d337eb2518454515e338bc7d115d406eb454f54460dc404392bc13b7fcb6998fa05921703da768de4e3ebdaf97f466040e95a692f8a88e3f15851dbe69578c9c49ef9c38dccd74dc1472a19f653828402d52db71ad834b1a050c31c20694b8700524b9a3df8723d54131e710e075013419b4356c20bb849911e43d5176ff5cc76495c4254978233501deabc29d87bff1ff93a508c6018533da10901bd1169987c49a84dbef7a7db13bf7cf5ac56aefeaefae14235e78bb2a32965d775fa2f932375c34bd104b2c45d02583d6e07e55295fd27374d72c1aa95442337b4c614bfd792a9b7c738fc627eb1c8f97a33f4948a5d2830bd793ebc74cd7eaa6de6689a09d61698bf03cbacd637155a6cceb90c4da7e5b08735f152d4799257aedff875cc95508d6e37a0619c1b2daedc87bc90a1e9a761acd04f28d2ef464ae2590e226d98c4dfd067aeb4a1c9a1f8a7bebd810f3038611256193b3b9e050c0e21c901d10ef50998ff9ba3b278b8f43e66de44386555a707f36a298fe1c486c64d850bd1345d8261db9065b1afb6beae1b6578272e4040bdeab9c07a1697d65a46714bbd89c85c33994fcb46690701c37c902f0e671b935d5a6e18f120d1e916694915098fd415c01f1cb2e9c3fd79c57e5b31ff2845b2dc77172f72265187f97077281f7f45b29d3943b4719c88d53c0262e40c1dbcb6749e4628610871aa14078def70e2f33dab4bde988a277dd07e2379f6b3937d76c805c9708330fca00e2ab0a7b12ad44ac09bcf87b3f8ddb6a8e5d8bcb2adcc6537850ee574557e53d49c0aaf62bf0f477dab199c7a6eee122dcf6e4f9921ec74cf525eda08d3d0feabf63ce5006ece84c664b26c5e356909e03d8185877f811359c949558cf3301e6b7350d8c17984dc57a5592a8b14b1c53f575cebf828a02d40b263dfaab59a41402f22114d42e672c5aa879e0bb384a125118f32c00f3b6051c79497ce2b81c218e45feb5394441db418b909c9fdf6795cbd50b2556caa15bcdfc206da75d2ec0591ff99b3726d8ad0bdd3c2ec2804fbc0297c4849f30eca227fc2e39ab1be35274511977707ab8e522c4090a0bfdf914f4ad2f2c8027060da6e78642328c6728851e9ccae74127cea48a812b81cb687f5f62eef54685548109c55188f550b84c7e7e22de2fbb8a9a31e2cc5b0b8b69f1e5e2afaa1797bcd94d7a78a2850f7d6452623114f3344a7cb652364189efe5f44d9e320e15258d8a50d6590681123c4ed01f85357dbfb9469838f169e7d409a4cfb27358cfee792c9e8022b2d6fc0cdb283bb87b9fc88d0d2ea1c52a7012393cb49b9dbcf8c6755013552310a2efb9ed9f3290cc7d4328ed1b1128d8d0d80f5c64967342d286f681b0919a03a685de99f4e2d09a06c46c2208332e7a771da5a5ad53ae2ef537e140d92d6fade58a7ca1ac856f2e53030cf0ebc22d5856b3d22d7a23576c39ee4cbc7031456ebfe2227a79c1aef58dad2473cb20998638a152efe9d5c9ae419afd651544027fab34d3297354186292901667f2e1f1ac06254c72e7f35ecd8d2f9a849cb4b6764ca708ae80ca2c5254be2fbf6aa9ba02ac724741dad44edce7a5c84b69e7bbc2e8f7fa83992e2399c50c203b07fbc578f6a00d9e549cf3321374fa6fccecd1a1343dacae2d8bbac5c8a1ed6276850a70356f5fe5766f9f94ce511558d1f0d87a38e39bc4544b8c5af24ddeb4bf565740037637690a0964f47946e4088bc18f384339cf64593425d7f976199cd4c9aed9a18fb1971a3579ec2dfd6f9343d381dad90cdf1046ad883af8808bd5a1e4288075c91b3496934c0239c2ed961cb154bf762cccfe515b879766aff48dca5eebcf99ebaa45420facd9ee3f298b488154afef7202153ec429cdcc7dd010dc67dd996de39c68d5a004935e2cf811dff0c2bed5825e678c4c96e1d4a132e8815ad68121966001897f916675ad6ee042a2c46e3b9a9ad2095ba1f977d78348bb5c2ecf6ce1fa203b5279ca2cb63e7ec7e7706fe4dc5da21b945b57b3c4f250f6ef5abc0666b84e76dad557ccf90002026621aa9f26b7f9bc5bbfcc53f0ba07ba26906460bdb96357ab9c8b5bf88d9d129db6d5ad5e18641a97fa4ba95c90913c2105476ddce1800f09ff05d3d006a8c36f02dd2fefc0701e6134a3b65a15c064e863d00beb414b8f88f5c94e70fe73fb193a1bf0702bc41d7927825c1c3b66c71755412dc09d505101a9daed1fc1d14d35f417655d3666817b547629f514b0016bdd0b7c03e6d39e4a9a73dab98481d89885e3e2a33e1b3014c0aff06438c6a6de2cd86548f1c79dba174a50f301d1979a2bbfd01b3689003f0a8b1ec1daf24dd00756e8d94746eec85b9dae07c1034507eeb914dcf9ee6c11e571fc2385f4fc53e0821a17011c2a8c035f7dea63d9e6e4d4a2d9ebcc4ec5782482d89dd3719a0b7e2088ee483670ca685129b4f886c37d674b988a99bd17bc35c54ac66f127a02f328d7bd7a4c104a00fbd6a92e538205eeac8387991695db91c8c1daca9b034db236795ab80d357b49626765316c3f0f4a83624d29be583a104908015365e3866efa807f3673da8cb17299909648635602a8567bddff336248d40104910ade0c284088f2f0ea49c5cdd2e07fa87bf7b656f400183d28de85a94c4855dcf0a284fbeaa5259cea5888885e3309cb53e3a3f43f8e3f975e7003a1c39f707d9b1a6b36de111f2be21ca7fbe0f82339acfb78298e31dc06c738e5697063f6716620a10c19af363f9698d6cd5d102386932474e06198c1c197786762b0935fb16780b8468f721ed4a42031d68dd83f82e0fbfae446d9a67f1903624c10fff161580f12ba65b0f58c6bd65bf2d9542544d601e45c54b4ae3323fa1e0e39931bdf4c2987bba25dd781be03f174f25fdda9cdabacf2189f960104a5dc7d8c574c984e52ff8b9e114e5aa1c40a8dd40759e059090cd66a4295650f711f72fff097a6978b2180e84feb8db902555605b235229091f30b159199c0af67253a882854f7ab03c58e0105cb8a8bbbc6573bb9acd89b7b2094e32330ab1464c74dad336b2ba5103433b9dcda51d1a3c1aa205ac0af35aa797e984f103b0e5553e4de2364e9a9f4d74923ffdc191485f2e8669f5b94a9b755fa25573b972fcea59a83986f52a7b314af650a03f2dcaaf7d4a1fb3931c437d346dc85c52a314f644b9d30a87e1e890cb17455484e687615fcea98ec2cd442919f83c8e278fbcc25741c5491d499e5fe7dc46c34d473b5e0aec32b57386d43eee00f6797b08e4e2b65d80ff05671b88ed3140b8e6d26f7364be49c574b82bda02455b6358d161886679296c25e90c8edcd0b92114631b8b88a600ad78ca878bb043a013716fa2c95af6b320e84ac2775cf2c6d98e655ba99633aeaaa419d882adf9967034c705899a19e1d71c6a0520df20822c8d56b142500eb19f0193fa475af6c4925d09bfbfa810f7c405d3604adfbce4b528f7e24f0316bb7f703ac8853e6576e3e397e40a4c1f14cc48d88823ba4ade5f806062b5f724e8e204c37e2e0217bb4ef554af09ca690f7b2db11e435ec98740bffa4fd9beb4f824f0a84dba20522335fb312dd3fe79e0b0783e18573cf1d5b3dd87c4a57c513fe13c8d41e1eb35d6b936a8e53f918ddfb475635dcbce302ad1833c45aa9235e12d6bfe02a1df0164306ef4ec7fae08fc03f1dad213aa75a0edf15da8a4c6ae9be4c868a29d18ab8394ea721a4843599f508ffe3d5a00a710275669c6fb3a4b47985894468522be0282231c70a5bd675e4812e39a9407c046b659516a7d56b5f641fb1e20ea4086ff70112047ef043d5780c520652611d0ac45846060148a0679f2cb644006d7bee6324643748deaf777d76b9e5227bdce6de45091e4fd4a34ad5e749358b91c70120634c3b4edb833112f1bbe3d3177ed101d204a5e6a47c819c89d910a39471e82ebeece279a6c56471aeed2a548e8da9bd2bf0732e9edaef699916d74020220a3036ceb7bec4c5ed35813e7c8691c1f17335858cb625b5ddfcc46b91ab5edb8191ca52eca2414e0c01d683d041ac3537e1d52b72afd97ffd5e904fa670b1d7df534603ff672d484bd20f9fa4f8dc1e106b8b758ddafa9dfb2c0768166cec7bf563a7d3cf9ac3101bdd9a08a0ce144ccc81d35a3e944e1c443c9eb2ed62bf1ed1c625dd1c3fa0979a35dc55e04b56a9ee64cd1d36321a8fe89a5dc7ab4cf8bee25fd2dfb69ef75160de42878e426200f043d176d27555c2790df2ffd5fa11b05a524f9ac375ca6a1329f1e34079ed6c209248a2d4a90fece7d6c240f6f5a8029559715253d46f65483f0ee49ba4addcd7a04b033d2bd2a1ab501b9163e583a7b8c475e1ce88bfe0731c4a624cf8901b4231b80fd79b29b776450c5e079846d28e4185d432ca5432aed880dd82d8faf9c4c0ce66066129785860b9739c5e977c1ac2b49b7cd698a869bb4de3f005435c2f94a630f69b3c883a8c5e9a7d644c95d017f3cbede3d4b231f78f7d00c3042fd37b286b342dbc43d65904c992214997e753ed3dc75810d8805fdd1379f61f9de7ac76dd777c8c36b703a24f1ce272b91f0759b44206a54f340780d248bb4bc06bf665b8c3239270717310d394dcc34a94eaa82d1f21922f11db6cab35290b03a71aed0e3de253d551f66a6b5f91d0c7d1d30478f819ddd5f8eb39c0e1a832e6581c59880099e9d7345d8bdb628a73b4333695579b7fdb1801280d34757a2937e25892bb859b80a273c29cdae0fee28dc6515687eba8abc2c75ee3f834ec6af4bb3663a9138768832d1c8774f3aed5fcf369520b176c16fcf590b847f3c3310e2f324e3cfa39f121922d730690a9e01de771f1e284bdbce83ac9d86f4e96ac9c9c18cc769fcfc66154e560efb42ebe01e303d4eeb669fdb234b02c09cd81b45f6aac23af35611cfdc00ce460c794e8e6347feb7223654e90da9f84177fa34002366d5ba695fa0157ad483cb4947995dd9aa6148ce7c9ba381b9cf7f4cabd762c8f77f96233f0b7b20daa24cf1df5c6100f3d6db4a5a42cfb3c8f2c9902152d32dc71dc6cae657da92cb3f7285f1133d70971252381093ab00af349f5f3423abfad903886ee9c6184fa81cdf841a8db9f60f489081c6aa2d4887a38e8b5a81d7a330c7093ead31a3ca70ee7635cc005c89c799a0e7c074289f4037ca2d0c96cba22bda8ee76bef22b5590705d555068113bbe688e27c13f978647ad83e98221f9328b07b5190289080fcee7cb50d918b733a21f44b54de60d993c34764a96edb1148efc1277351877192c183d87b886a3ef24339dadb29d30e2c014d7f9ead3d36d15eec09bce47dfeb2c985cacec611c31d1f394f1a954227238e7dc4849e63f1f35fd848e2bdd201165b7526d9c0902e97151c130219ff5ebf43de7e2eab7fcdf06937ebe89517a14029c4f0c4257686256e911505e69db33153d7e6f60e0c875579ecc4182b446ac6c1442074326f00a433eebff47286534e98d717f2d34837cb3a6ddafe81c523338bb2888d2f3c471f396f27addd8527f71dc0afd9415c766914f4ca085b113b3018802f4d1e147a5d4fc4a0f035b0e08c912f621bd33998fd644731447ff10b53c95a898bef5daa87deaeb59ff93036ed045ffa86250d691ceff980308eb27a7f435179534b4c0965e39936e7da363fda8397f6ed5d2845e8a4572f567bdca1d3081e12c2a159c24f0961f49b98d99a98e07e47626beabbe7f6f12ebfe9a02dde8ab32bb88ca48edae1294c13546896612d5d6282e28fe668ccfbcde8e579f201204334e560be52d730ba1850bb0480d1f7492ce34739dea2f8a8ffde0de6a51863a160d4229e7d228ef2e7f29cefb89c021e47b891f06ff1956e582ce65b33445c1a1aba5713ed86a97f726e1c69bdaf3421be22f861ea6cb186766e300e1b967a84b2409f2853e8b58c1795b1676ea519e1087b672d35a6411971c1e0b4e7268e4eea91118add92da71f342c71eb6700b672510cb54466d982c98c7c63f34786ae8bd95f0b07d449b36a3e02d893db0a70e177627521e20aee02111f1f6560d1b1534ffb5cdfb1003cb6a28efedc548dddca4fff746c22352b6a5c4c549f5f238454f238bd05f6c568beced9d0228fcb18ce695d5f7b2ccd67332589089f01ce634a1a4a4bc9aa11a515f24fb0ba1fe8ebd4798e9f323904b945625eccb5469b9cbb63a848fba4c76e00dd163987f7c5630fbf651fe2ec09ddc740b7a477a0d309878045662a5357d3cf11569d9bbc951fe9049656c47f98baf1e5d59adc43309be46c7f5786b547a1e438ca9df5d2d3b9089010d8abe8144a2bf7803fb9dc216c326206acc5e1eb09eb1eebe105e724d690b728f1e73d39434319cd1cb559ebfe6b97364c38a7fe6414b8fe600c207dec19770c2322206832de824d1ab67515123694e8cb05f216aac1cb6ae9f44649b22ea8b89c6558ce9731f45714a9e77a876a3ecbce5a49c907033f37262b86e3dd627668442d623834f74c249ab5ba40dd0aea971637be15afa18255195584b86ef3b6da87a8b5bcfca940329c5693b40d0931f4e97e828f0e1cfc44ed3daf46bca474bf0b9993103b4c955f20620b144fb96dae9031405f1883a700cf1be04eef4b82141d81af1a28c40eb4facbdc34c04857e95205fff1c3ef1db57fe46821c8f079f94331fcf534f4817f471235b0699a7206ff4643c6b5afebbf61016022f01cad80733630f48e634683e67d2a303249116109697c1ef45fd5cb4ce6a4683d5a380f206dabd4148b7666f2747f4899d92ac47be9c8d8fcbedd9e8d89789f34bd503d0f1817be2c5405e868b9f3051ac867cc70d73a145e7fd61cd708c52494f97bf7b4963e7ab883f09719c94310af9c43c0a64fc8fe25b10efad2296fe5ce95bb48dfb64c822f21b90de61019a9c4475a9914a0ed47fc1aca8ec6abfae7ea6f3a0c426e81e07d8b304fa96f81ecd167d59eb8403b7cd1acdf976d1a6041784c8027a44954c668f71aca7c28f3bfbdcc66386b9511265d9bc38185eb601256d7d5777eeadbc3aff95b0e424739a450232094344dae5fa0e1f4c6123cf9198bdf65f2e09f7e69251dd616c70193c45e01629e1126e70fff41d1591eedbee30963ebf681fc6b47ff4db3e227aadf0753ed35865a0c7897b7b32fae7a1a2a52d2b9d38c4044dbdcf626829274d387fb6364da885484f5e53b4448b7df3e1442488eedee7da32e1d7c8bf86f6b649e642926946abf3f693decc3d3c0e204527158fc825851e68fa39cb16b316ca9006c0d13c9430939ed3185d12a3c32a33fd3d1809eb7365027c082989c17c3eb95bac3cf421f29f0e1c3b2d499ed62311cf05414524927c905b5d95ddb1606735adfea584ff67a518751cdc833b957bb8ed5729e4e28714044aafe15ca25c91747d4d83db2a958d6e857cae1409306f09f049d2894ab120f9be57bc914c9c20ac860c087edaf8bd21fdf272a52617b0b50460ccc7110b1ef3e8dcaaa66bb8fd1d85626022204ac67e181306cee1e7d12112095ae80df3e1d4f75e2c88dbc069ea050e825149cd7579d166c80bb2f668c8ac239547461ae44a2d443a16667e18729a5f4fa5dcce511db9d8314f6651d90e099f57d306de67183427e0ce8a417d7f7e624bbd24cc37ed2ffb65ef0ceed3dc177f632d58dedbddb3715a46547d2e93980b94db2b59bf2c7f5dd78ec57d8315d0df795cc2b66f954128eb65ee9621be482984b04e21ed5b81ed9558a2b5105189869119a7f0d5a19d4e0b997328a8f2a43bff0c3aa8781349ec71765b37241ab40d2ced727e767870b3a85e26ccb4a2a4f1df3db032798d6b079b2643192a27a0d667359479893f9bc3a5ba6c3b6b549b07e498f3bf706c29cfc12a6a9659f929930056695ec934251b716d4a978b87f2e293c4763d030e40c8ce331153b32f6e82b733e4e04825c6abc2cbcc27469185aa1918e6e5049cb7bc63caee4b4c17ec3f89da6d447365f96b436a3e54b2702d7ead363046095c52e75d41d5fae49643522c9921436b472b81669dc4f60ccf448fed65e671dbb6f4cfc5262ac0857a9ad1430cb921018eac4aa87a68df25cf6546521cf70aa61031d93e90b4d689b32a74ac88f747f3e2f7d22563fdf4541825d5a888a534a44f84eceb4af2d6bad76152d75686cbf5bdd69cf91ffa9f410546e78a57e5b270b054935a7f12d58edf720d8c7121d3e3d5e777bc2957df56724b89d814a4840aa2f4eb741f00c2cf3b39e033d6afcc4320d47032c8bf1277ca1bf4763d4dc5f3a0f5adcd0dc0cc1275f351a57b4f78ce385ed1a3fa49680ad5298df83be075cea27606a82ba71e2098872b2de4038ad3854f26219331ecd8b2a133e3c0c409ee18245fcd53c488e8f209bff82039f8dcb8e3946c706159e96e7f3ce0dce87bb923d003926d934a29c8207e81a903c4ae63ae3dc8390c627972c5aa60ccf2bef4d67b08279a469f7da2c23b9c7f77da670a03875aedbb8464dcaa3ba69af96c03aa390da20651b03914b1c256672d0e3fe2d0dbecb6417182b7a48cc1ce6a03320d93679b9143bb42cb7df38f7a6cc29be346aa2f18057b6a56457f195520fee4ae8af39d040d436e3efbdd6d4c4ccd2dd7b8241a5cd6b31399937142345a8f13599c98e0edde9824b694a92d9dd500a7aa01bbc0ae70ae936302cf5205fee967729681227579d7b55eff1f01346e70ac4103bb4e25efa1f5862b3fe726e6d7d3744118d28fd1c3a40959bc2dbebde4be230af4eae476a0f9a16db7e8cf4b5d9feedba682e891d777a4b86f0914fdd0cc2fa78445521bebf9b15ddfb9daa78bc7e87e4a6b86f28d136f35b7f909b8947a1dc0d5014e5b0ef1e486122a80a3b1a8fe89c310749035767a8c615dbc7657d7254d804d08c75734cc10f8d571d5a8dd01afb51b21e4a7e5dac5fdc6ad905358d9dd250aa24ea41d16677a27c3416a088d926b1cc87811f782011778fcca3c95dbf29541ef88393fdf66a88b754203b037b6f3fb0c0bac575fb0c36397be3d4716980ff82457d9cb575d6c9d359710ec888c7bbe1e8fa3f8bae3bf8da4054a539fb8a2761449247a63726b9f2157900ac9a0e2b02e70fbec2baa7ed0367ba3f62dff63e5326552889883ad4410c7cb41411ef494cc60f08d3535b6fa4d6ba15c477b2c7023d82c299c6f30217e4561f43be39a133092829504768f8eddc439cbc511d1d3351748975667129368f1ac2a098dda2d2b20ed6f4c0af9d4efe6e4adf63fa351d6c7be19bcf03dcb44c356dd2ef96df02e49fba8850c12ffef716d4a947ac7dbdc914eab2528265034754c51fa4db42f3324b943b04e2f69629b4f992363f4c1e4aee273fc0853159e87fb4f2195940afee0417a3f033fbb249dbbac47731c9fd6e5965f8b2ac2f2d1fe9f96c746f14b40f08081b80b2bdad70a5a9b0c1bb5241f86c1768f6301a77c2c8e8d44909488b73f68b47f2136373d08abb79821947fd9c5ebdb0f1cd0054c9c8adbb0e209743d6918c05cc5f4c6075cd74cc0a078366bc296baaeaaf39dd181b93949a57d5c36380e7d7cc9610a8dc19b77a0b71f65c39f4e0833eeb50f777711f972cc4022976302c04d098c88534fd0a6065388c50ab5dde19436085649e3aa41fe6d31e340b17c3bd4dc6d1a2b03c3893b6857afdd490097ef816747dad70a72bcad005022a4bce9c1a13777a5a5592250f0fcc0aded4c1ced63ac24f048a398b19892b47e3a386ff78ba253e360dfb8bb41f552fe42306682d40357952a7b36460e7d08f8c77e8f18230e849a51d42314838e28731c917c742b20f8c70c70b264c80220203da24af53b50a1c964af7bb124d4459253a3a7d34369d7299ad2067a36e336e7654874fe43f9319caec12e32657d0e7c62ab0829ac02bd919d822ae013bc4cf92f020cf036887aadc96ebda221d186c67f121706af22d62cdc07e8bdb14002d40997dd54e7b2fd2d5f79498b724c3c852122b719dd5c244dc0e635b2a7c59a39c64bd9ae01c9ae86c7812ef5a3fa583a1ac0e216e813ed9fc8e5fe6b56e61d13febec6c56eb60f3cb61ec434b72b8c12f3402f99ac7ca5cb5071ed83d366c2fda66f41217e6a8897b6130479d85f2be95dc8e40291d5490b9d73923b85f6cfa606d20caa4a56e492ea81a8980495bd7884d3bb91b687d3a400c5a965af0459f4e764f079e45184d874c7578a37bc60eab8847df3e6d3c49922f7c3d0e026a078523331a414e8176b5003a4ab36b5bb70da46bf8e79fc9daffaa15d75f6ef536db38f2f11eda62145ee67ac6a8a2b556c199f8bdb4a57af7bcb5e9a18e34f00b7b37dc1969423ad3788279d2548db77b2631fbb7139f33695efecedc79e5e26164a3303ad190c722fc2ba47e8bfea45dadd6a8e15117bc5f2526b2dbacc4746b4706a522c430a3fa5d40434c9e77544fff935809095fd68155b52e522b6623a04678302d5def8db8fe5fe494d42e240dbd12f9229b2c49a758a04ab370ba825db63b892fb30db409443d9e01bab1c2808bd28efb8fd75b822e517059fe12db0797e0e5f551dcf20582aa8785c0d11990946db5d963ba0f518610034b38aae691787124f33172bf09a05b68cef03d494438248d43cd2e3002335cb15889a7379cb43174798818bfd9031fb15f5b67632fef577dd869975eddf2b919ebb8ebff81837df6e935d69d762c741fac2b12ebc0726c1cd70981b6cd1ee39cd3bf207165768841cc55f57d477f8047192169dfc70e824990330dac41e07ae1b49f9d22a7c33d8aca04d2080550ae6bdecae69b7c60df3c3c11cb0c538a5f9e0ea0727722a969d888dd39c94db02ec46e0d8120ec8e125b169671ec9c8d5fa08596aa035183fbe74c6a87576e28ee8651b328005dc5114fdccd86f62ca9cb635aba5ff4cf65d03ddaa72ef08be3493e7ff99c7df218f72f7e735ae555d7a4cd284e4adb41d6cd936e564adc4e22216d827d38b20f52e6df40c799b0e0fa1f14b74806f9f3ace86ec4a10e806bb94bd1d3eea7e09000ceacd5445283cb8d297c3d75402d13466e44b2417e67ed0589232ba02ee2e0700ef52837502636625e111e094f75bd4679f0d32b25b9e2e3ff6fcffabdb97ccc646a1979403d71f1e272ff8e6f545f1b7dc4e6f725d955ccbb2f0e702ef2e56be41641cfb8f072dcb25dca7386199a3bfa09be49083896ffd7b31433d3d8e77408df0f3fcb862a6bec26d6f2d3e12b455774c764f2c888638d81298044908be84a670e4e22524c92d0a3d43e6a94e0b286affe6be19cb3bfa5e0730a34f9b105a8fb74df5807b8ab68c15fde3ba68ad05b7de0ecb38ab2b10b9100db7fd5449f39848b6a1a2f00b9b7a353b210f97a2392f8b51b1b08140aaaae1be63991ef2d5f90bbc040f956594dfdb8bf1e2b1a6f8dde76b06a68de7f7d6ab6abd4fdea07dd0fb85427c81d00b59872a726aa08f7ef6023dde19b0a9df7efcdd1aa50e3f4bd69d718208f5104085f47630a3e535c7f731e5068a74eb481beb78fd5e17762bfb9c2ca1a6df553dc413e430a053185a61705765e32936f973fc5e81b91334f7be058a789d1f509c453a88dc0258f4a3729c4acd0474cd04b533555c0f7438f09dec6ca633bb2551bfc33e16b5efefdc31639d975891fc3d0f7342ba6b6e07297735d96c258e0099d22edc199f456eb776afd71402175e0043c77f3b3efc09c9b9635bccae77fe8d1f225103028c8bbbbb823de53fa87560bf54ab90a302f26ab71a41b6350ed58cab72104fdc722b4032dcc37025c00c92bc4c144d3a0ade162e02a6ff964ec81b591be7f54d73463f517eefacdc9eeb70673e433f6652836b05fc2bcf82a96d828f197ae8417b17d16a7226a7989256b81509061950e3a66c3fec732509a4d874659cead3f648b4e97eea56f600e096a7f4512d51a9a2a7f9fe0a5d1f7514cd0a1aeb5ef20889bec54c047786b46463ffc360e9cb45daeb1d284724df6ce83ea3c6fbe043f54017871d76513f2d937929632e354261064e358a0fbc7779ed24571375573c81c903fdcb59903e6ca8ae5467ffeb1edcd8eb747258140891b769185606c56841e0839e8689ce24838a3998765f2916c7bb1a5820e48b41853c30a0b93262572b4765b6972dbecfb0044232f712f146d2a455bab261778021ae62cfa990f732a202222cbd0ea0c7ffe3eddb14ac0bd668f1c06a2997d202e07ca571e232c584b45135eb7bb2b4ac8b1a1261903eec7a69d6f09dce581cc84ad4c02e9d4327620c1823557f8992118662eb4c26daa94950d89c3595cbd7dd9bba6ba122a539ae723f531cacbb8c365024867e6fbd6c73f79a1ee15e2f3b83dd641c3bb6f2787f5445631fb929a1a9ce66288203d688fcca29c9196db47d7d593a16d16ba392f8c8b31c0a6a9768302c14ffc270aaac0c9c41d6cc1e72af67a6464c0c896435c803910629b6c100cd533038602029a82d885771b25a1393df3f961529f8d1574be3e10e4931746539ada66e72aaedde8a4d8ee56750f39ffed2fb72a2fbd42687eadcab63ca32ad63b68c99476a5af38fd105c1320d6c8cd15039102ee3464320b0caebe1735243e4e6d034e36f9432eb2269055feefa3715c743ea357024c55db63e122fff77f0fd2cc513d12436652ffa7582eff2a2a572fe481397aeae026d403d46df0877b80187ec20749a42f489614afde2032d92562602ab0ab33c4aee07afd13172c843ca506fe08e633ed370510314205945e975dd63da734bd66f73ce3f2d3abd5df9f95d61cc0910753aa3a0243d38628028ccc721560b14c51cbb88bc2b05a1d1d559f66cf52b3c15f30e6f24e7e64293ca3c4f54dc52c9f0e23b888367ce397db3796bcaec5f73dc72199cf0cff98de31ae537ab58f0ee102c14e904d80cc00b491f62b5d1f5c7ff5a8995a6f0adcde1f47e49ecd59ccab2b0d42d478ddf96ee3fa996753b34c4a14579804a96fe2fb2ecfdcc2b7d37842faad2043414c32000630bbf0de7e8fec0ba18400ba8294e62f963720170213688a106e8b4c437ca4ce36088f4db0750f485619b9944f3cbe975d8ed7e34a066883034c079b734703874ace7e0099219bf41a92e6fa1b0e5a8f0998f8d7e2a7dcc58036906a46b407fcbafb288a83e66dd4bdbee5f7548035e8b6af3fb4b377588044ed6208c259fb338b3521d0d90f06d6687d81a59fe926385e56d97bf6acb6e94466dda2c04503e05a9ca2a92fefcbb90897a4339c31e51025075fcedc0455d8d96cf72b22ebf28975db01521b651f14d5c931837f5c191afbb7f8577eeb6a6de69bf67d7ed7f792d351a5feb4382866d0e25326ee9914de648ca8389a8ffd8f94d2db6372e801a86e262b686f4313fc71d45afe37c192c3c22169c0286dfdb5a010feb71e1d078c8df801639bdb7f34c68d7d9638aeefa0741bd34ee1f93ef2b9d55d3dea90d97947e5d8ff0025bc669e5a6b0a1d1b9f9b0cad153d6ad8e0de73366c3fe98bb6256c936edf8f443ac2e4c94d5e88613dff3f8b3b0db382ae1ad9214c6109ec1fec19d27c6aa516c94ab895fcf1c0064f3a230d7986366967b013054dfbd21a9985a2ff42fcd95b3535a56845b8e5327cf203ca64f59f33545d708f1e860aeabe35dca2801aa66c2a9a374ad2caa7cf91b838daa3a3a3fe13f834bd198b520f9752f90ef5254c2cad8ea9498f0d98b9ea7f698569f7732ead2f5eb652c1905dab1a56e60ed941c09e6f2dfe280c7a51b66b0a2583551e6ddb7082620b9fbf14c82d44763e5ac5aecfd7eca8202a07a153d166165f4ddcc55bc4043d9c2ae0f9763b8fe79d6d8c2c20eeb653d8a7fe149235edf8b6d1fcc2078827db13079a493b43c059091c16d89242cbb889b1079c6fc93c2d8c7305f4a0d51df862da9e3cb9f416f2efa2b792b84230f20c149ca7934112fb2aa3068293ada8940ef8b486cd5badbafbb76032d4ea86cfc0bcd477c1b9e31e8b006f8adeede06680e24cf59bd7ffedb74fdb30e732b013453e8d840e5112ba2678594d7c28d217a809f78277564f1d2a7b0e6371ce17e85060bdc426469299f57a8f8282036a6d9de8f44138188ba73e54262a0691b8241af86d50d0765b29e56606f93efff66536a9e3afbc57d56296ddb8035e6f98391840e7d73c328d9863faf50f4b795aa537216af743d71a98d85724284044a56c74edd4e9eb8cc918bf93fb6c6e105556745c77f3a230c82e2e12cde4b90683e7a881887c0a9017647448d4f61ad0b0c0fcc8f9316f5062244709b4b3c96c499847862c7a70d0e63e691bc8e7bab560570a0fc3edd5b7c3c3b8fa39d049a9a56b10de698d0602bcc44ffedd7caeaa2574126b22d20aef6567ba0836e7867b773490bffbe5968483b7aa14852fd032462576990d83feee76abc5555c723db3fd5e2536fc33af0b1e5eec0fefaf26fb84b2f720363f20e054ac53d952b9feacf268953034e2c444fcecb67dda3a58c4092f6913be76f468f06409b874af735125acef26574302c9a786ac588cc8b9aa024262059aac4917bd30d8897a0bc5c70c132a4d131fe81c04673d3496c13d5de0fd4a273cbcfa45313c39cae69ce4be90a71af5f4140c30f3be1c9bc48911788538c7eadf14120b70e78de38921930736f953491e65bb0d05b2d08910ec58edfe9458ff1937c8041b9dce5bd378b8e3f5ad9f17a70a00321d9c54a7d71a05f7e73d7ee8eaa38aaeb73869f2cdb9e077583f21f5ef883b2c88391d4be82f81a29d77680da3d76596629dd61f42e65d1c23f9fe08fded717f316baf90ed9590436c3c9b0202fe90175ba8560701a19a1d7dab187fe3724658d1446138547a6635aa3d00d2c19bc374c87069fbac103a6fa76ef571bcb470452ccbf8413dd7bd6154321e0cfeb0151b95da05decc9f5d5ebb74c265b7386305b77548f928eab58719e86d48b97c7aace607181cf55eff58691da06bea63fdf407e5b8a2854d27c7d0894f3725ada623d279c5b2b7fe4634a83b06cb178c5c9324d31f676564c2f5a6aa9544c842351f8293bbeaf70d8019a9eb0718d31d882ec7b35548d90f582f7cb44da7e4f5399607c83861228a5e74c95d780d7b3ff44cbabb2c163aee93b98f26ff3ea8b6a90de243bc11a2b6f4ddf37b75b81cbfdcd6993719012ac7837e146ef2df409f951a5e5c844a64b2c8ff3c55f68ceb23e2481dad887f7ed72fd8f2ed9956562b913370d06853fe2f981e8c120f956fe38a42cf0291758043a4b61530f34d2159a2f5ed46e31b03e19deed497917ca6de24c4aa76c25b9c0624c0d5fc16c4f0d3936ba8e023f58e2e23a081729fd2ae702f8ba5e3d6ad18a19ce590da9d6f605b592917eb247f44c36452062bb3211742446cfe34448020184446e126b44bf61f92806af13c0920fef9f9ba15985fd3bb462118af24e19c764c316eeaca74bd716fba96165625b3817c306311c79cbff08013fb99035362b683a70bc22ee62494e5e0ffe1abc842b911f2a78aca27bbc4011499f9b4268c750f6e2bd49aa5c3f8c96f1be5c086b618a725433ab84d484503c55438670459052c3770a87de1b42f2dde4f75baafaa8811deb131e6d8ad62f2aa3878a3b3ac5ab54c8e3cf7f34e324ffbf76725ef02427181ef5e6ad6a0daa5f54653f09b723ba989d5d8b0e07ef254b7d0fef82949519a410ebcb7b67c8ad88d246dd970d48bbd14dffb0e442c768d7bd1e874405a4df93fe94602dd44299706026502d80186cd713866c8364af19e3500fadceeb5bf190a4433e35b773302b62bf3ecb6e76c0e3aafaedacc470d857eb8257c897fb6ac892f2b6492669018d4848db7ea6ea39b68d1f765addfd9bd854171269681882bec68289bb6f97a1feb099538aebd149c9c1045961e7016da16588b9ca6a355411903d76e7e2fe08baf705dad51796f8e2333302b652ab4d0575e61fc39d1623532ffe0dc5cbbd8c6fc4b2959c60ff80d6510b9360de7fa36d4c500f9c4df59daf50f5e88ba406f11e5af0c3110b7968188bd617a3b43df482e8d0961222a047b39a356ddc3a3651ccfc408d84d6292b047b04fc60710340fafc0b41652f48bf572d823e3d12aafbbd3137a93b793b449f40f7b6f03a73d7587ecf5040a51291680debc0ad93b0b39819db09afce152316b7bc7801d212cd1cfe146fbe3f897c6abd3bb36ed27148bae0ac60d854487ec0656d1618449a4eec7d3a2ac40b6e68d800eb69fd5ffd90295f3344701ff554c09c914efc0cb773b4027ba3ac29548da652dea611c2e839152e5a74bf68c065141a0b94cb37d8d4d4e551ae8dc9137544d2667fe50650d598d099b6bcb2c1348d09b8a3dcbb7f42c12ac0d7dca8554a44ee308439db907de648cdfa8f1722aef2bfa3e662d0d86c19486833a1ef81febd3da1e00cc33a07cee3f388ab26a426ab122758dfae0b84cf14066fa7ad562df1444b444cf28d252d2145ab58aef5de2508abc45a6d65767b1f8adbdd1513eb1ded259591bc8b350becd552a8a40f25ee14853ea65bcd5199055841f71f59a1ee746afb389704821ddb53e0999f0d9770fe7b42fbada02d359f651d13dae9edf502214e4c44b1c1767521dd79ace7a8579f83145b9efe4b9f440ce05362a3fd53888157f65ac861450aa2c480b754273c7027ff293da5a5d016b30d702a3029320398b15deac77f509cb269060fe92a8204a9211449fb967f848fb01eb85d2b9736250241f95228447d0b60b0cf4c1ff301d72f9c63e6bdd3a11d0733dd56d07d41dcc53f91a60c4d718b0f84d2bb6e4fdbfa390f781c6d1b9f9111b40e4e85c2497354ae749908452d44e7ebceb025201493ce04890f07948e96dbc54f70efe55990f7cf0784d24b80ecc7c0e1560fc5e9c786a3bc9f5a637420eab21c747fc853fd24feefda001c67506cec7b3385f82b8595bdeaec3951b18f5909fdf979356289da989e03d5893064eb85688658a6106e99f631c7f5a0695311d7c349e676288070352e180f46924c05c60134ec4c050afbc29e130230016794b39e86d5327c44dfe0adb659132c36704653d06b457826965185f23eea1361b269122a24117af86c40f8db84e34e78a84e96cddf1ed40df2a7c2acd780883f61560cc91e213ebaac2e12e8c7ee9494f13681df5f31ed3b74cbb4fe13b2ee8383a706dc901350b01ca5e66428d56f7ce5cb7ac3b33ddb8d6b2b5c77cffc9a61d923e55adae892a6747b55058a22f7781e3660216de8f0c30ba9ee4cb709466bc93562b31234211765f7b3c6b7832354f970294b20926291f13886f83d21927ed7d62e8e95ec3406923f41c2ea17325983acb7fb784c61122cd6500e0d5a61c91837679e611e821dd8ad54f218ca416f92e049c4e0a35765234d5dbcc3858d853172e38a6f6950c76dd96beb2deaf2955a66fff06dbeeef2e2ed66c7746c3db064c103c67fc699c8a2c6fab63694cd91f2b7033d088d7c06127da5926d754378c6d780e182bbf21fcf400ae3e4750b9494b4510497b9ba620afc56e4a681300b7a67f2833fb415c123e69b3b851f89b17458d6a80a4a4075915786fa1e7df3d36ea07180e1530fbe58c601cde5f09d655dd68c18b3cc421bb025d190de05cb085bb0d9e8b9f9da0e0d85dc74643b6dc9f685f56ffaf64794d97a765aea44d0ed2bc0889f6745a26b4f656caf78c4b129941ec02227987de4155ce283beea839a01d7913e006fa4854624885e910214d885b10ac3a28dfc9c25b3c44c5514754a96034d51d3d2839dc8caa1cce310f2b078cb9918db3acd79dfbbde30838c7ad1c6223dda4092eb0a03d8ba97645ef981fd9f33853e22cb9f687931190661e0aaf99998255c3ae4946454968ee78265214016e232d0c89ea92fbf520f025564ecb6524c09e4b028218aab807fa1f200261301b0d443fc48e1f1e7a7684fd28cb8a6accaaf9324d35ddb3262290ab3d9f69177addb9f683240adc53a71a8a0ca2c63b649b1a3ea165fbe267250a8577e5938440b2eb29eb75a94dd81afba256bc390469907d0a099a65ab05d6895531628777feeaa668936be0e0912d345c7d76dac94491f23bafefc39781f70f965c975a69b9cf2f8cb7fff0c255a2205a836d807fee966a6d20aff90bc83e18ade2a093197de613988ffb9490b31e605f7e09e0605f9a50a68f9e14c91de733c83ca69acf4b91fe9c67b598babe13f1aa7b3e99aac04107e9e6a4ee22aa30036b37c48b4ad2c2da015a9582456d3a56ef71cecd296e36bb1676af16b08d1d9ade6410481ee9766d590fd4150086baaa21370e28538a7ae1fdcd16d08b713ec9c899e8a925523a68af5f4d101efa0eedf9472d34896b7f1bed356b7eec52efea3fe83fc351305acd17eb86fa13a35eb640c7531aeb62238ad785891e9e790f21f5b577a33ae1e56dcc12af7dd8b545ab9f3eed52808d7758282056a85afcfcd826d6c8a509e2b5b0f5ab2356b223639dda25a468bd31c3374b623d47e8cba2c517a3dd8421976f553894405095e94bab7d4095a69ac0be84b56d7f44609816739918e22e7b695b7fb816081e3d984b6c436282664beea7bc9218727c8ec07f2aa80a72624524d1cff3328fc24599e79dcafbb5831084f950daacac80f51e7759ed75ca2bb8cf3a4d265759213642bad1a98a7247d12e79853d03ce5f61f712a4d291fb78db9808bf8fd395e14ae2e82a8ee5dddb8f61580a01a44183bfa64ea4025bc9107bd49d2680397722295d6aecde7088969e5f2a186f7becb731db1b2360afa21cfbd8b7240093d4e76c7bb1071ba5cab9ebe84847d9df295c9620e57cdc9cd17a301864c2cb88ca2c6272e6433eb7df10a5c3c732efa83532a11dfe0f7e0c17fd79e7526445468f1b5f364082ac8ddb6072c74d5157d3be6ccf3e49cab699fe1d02f87a9d5f305f522217ba97e92e1228012d61717ee1a2822c2876e022981ef74a9a994ffdf7de05415ffd452392f920986ad466e57c48dbc10044b9cb60f710fcfd68c1892712750aca5261ea33d2bbb13888a213e9ddbad06a66c733d8ee45dd47c5590be018f543a364b64d74289537faa46beea550f1543d1506b541b5769c234f0507f674e65a9166b8b9ef28c5170a96e483b43e0367763d46a682d5b53b4de7f442f410b7eb12a57fc67768cf3f2a3ce229b2a9e4e45294154602e47cbd2fd84272b35878bd6f4d78f42063c2a5f7f3822ac2f3c86543af05d7ba17652df8843c4cc788e57f29c2ac3ee7b6bdac7d21eadf754ee36b6819bff9627a90a0ee1827f20887b607472df8605ed19d1a0574c26a3e7d488c52a539eff3f9c45542a9955139ab3a9f80943176490f464e6ced652b132f784a40a72f1257c24c58795f489e63842098359ea82e834505a196c8bed7bd03617e92f519b52c05bf0fb91a6880dd28a83badfb5f50d54098944cf47fe73597b89ac44a3d72565b4fe84fad4b796da9725c3de62f6b0df9dfd669d2af706b03b9d7b3658f5cde1a5ddea893c2aa79fc4c999f41c694edb30e116989beaab9e967224fd63824f06cd5925aad205ab2b30d719ba4b83971c001194f4c0b13444dcf9b8d09bd6336a2bba792d5ec69c89f0cdbbc82516565679c68c492ef6089a2ac57e55a7c6a25d1fe9ee847b83075c57d0c84d16a97f375adee559c30a00659a774ed1759045afbff5d62b5d25e47d0bdb7571929cd5636f712e7d52cb4593e1d4762ee4e69eced168ba1604862cb0bef87c42591c69d5d952c68457514186b019e9ecdeb22487df16ce6083435eed0311e10c80fd5241698fb9edc0d225bdaf44520333d9a99c5401067e04ee10e0676184b02421b8e0990a99e2535b67f173c0079dfff6cde79075b9ca79c9511f4ed0dc246b5c3480b7300ae28d9afa3a92980e9ab72a21596002e36807a3813b26e89a730f2a71ffea93f51d38c1a4c44f71ba9cf6e5f7311987698a0efd703faf131c8ee3b619419f395e4949f94299be500c313f89d746bf70b62cabcd9b90aed6eda2c03d9cc6c7bc4d563bbd65f1f8b616eb5558c57470c70589d77850278fd027376c48e3199f3cf58c14daf58ef14644af279ff9dd3e0e4d6243b0ed5fb54bed64f3c83d9d5a0cedf9eaebf594b87fb514a8dde80be1f2c42a0f4eec6d19d3b608bef40f110e62960230e1615c14e507fbb95c36061dddda8a74c8a555d801e586638255e8d842192fef32a9852a83134dac3254c209ca625691ec56b787a6bb83458cf5eb6f13a804b18ad2901d81ee8f26c033c70ea3e4028dac8c24753380a6386f8a24b58e80b28b5359f9e3e86c68031fded5f32db6808fbf0744beb487115cf671ba58e05d8d45e0b23acc69261634955307931e6a6911a42a87e1d0de758fb55638a7a88a3dda118affc379af3e835ef0fe2ee5eb171af8c0468a7e865409c59ac6a4873295db99a5e294fc1454df02d920b618147b8c5d0c325ddde53465392e02b42c3c0c2c380bf842df58b8b8370343495880dc7024261718d9298fcc2b357caf413717e4e9a80bee922791266ea37aafdd9442f1d198ac08b7aa2ebdf941bb271f1b5537d9e2ccc7bc4652ad97840ac2de63a5afdbb4d3295c64861c6cb90481a235d1863141f1dd649b4d9c3e39c6569f58373f064a9dac12434e951ec93d9f5cb95eae7915f2d1bc90c19f3700c96a523adac2c624e0bab33fd5daed228370c466442f323e294de752012c393e5c853fd5619cb075cd3ae6846142543d73479b9dac4f56a267481270e236f65b4fa2c40ccf4ee3c52bb2891c388ed7dc26470f7a211f5fb95db4bab8e1fd149153660a98f3056ee6a0c6d07f04e30569e82c9518d2405c66dda02b59350fa971dfbc2396f1b86769b3df6a6e99eaa92174c95c07cac4a0c990766edccd503e08149c199c7a4c01074483d2104d5767f8253ce3004a8298a6cfab61f7e324d1e0932c1d42e687af77ebedf88156e2cafcfab678ca1a85cb8d79edb5bc36a2dd35a4ede6fbc5a1ddcf97e86cd0d807d9201a421f0db04184e9705f6b0e503093e5bde53b50017385af39e82e351a865b639c75bb40c3434f041964b5fa0251da8008f3535d9956dd371909f1d8d9d4093a43863221a772570562571eee98414d769c1dd6d1631fe46e6ddcd3aedb915730ebaf3c259b81f5728e36b0bf1ea80c8cd8e1b55c359850a15e5a4215d7e6eea0466166d0bfca7dfa142e55ca8300d2c73913ce149619ea9443f9ff6f168ac3368a10eded9801bd6d81726ed02bd47829fd9a8c87e851badd24825c917fe032a507f1b6aad457dc7e5f0e656249d52855437c52fb1f7043700e17deda2777bcb0698b65cca12bed7726bd9124c8260303feddf029418cce57215f24a9c6b099a765a28065d52ae5da82e211637b0c84f4ee8fe03573614de7540557e3fe33fa33c358dc6eb65660eae1f1bc8ae7483838ab51f21846606622e70ee17e08c5278be56b85ddbc7e1c431c7cce0bd207e30b77f70c9abe88f63f1483845ee0d4854139e1c7a3d24706fd3a6f6d65f30405bb8bdf039ec2f9fb829057085a5ae31085b8a55720ecb4b968a5e227db1bd5bb2f684aa67993d55fd37764823ed92ef3ad7d9e49fe03d8b5ef2c96f82c5ef2f961934fc7c13c68e2da1aff47dddcbe50984c9634b996e7810135317178bc59652830b49184bbdc2532fc0336650768a30258e364fb671a1f705adc6949834d65ee6200066f47f1fd16ffc3a0d9fa25e11380adc4692958f6d31c6ef37dba0ecc76bd77ac3c1337316c234a3d15859438f6d3fdb55236d6282b2baef27236874f648b308afeb02e9fe9f9771fc89446def1cc5853f2635139d821b70a68c80cf2209260dcbb3d3d3191fa97c98b09e05ced404e475c1fd86f2967da4ff98fc901ea5bb16c9fc55c56d120c916c122ef344c6172bd9a3b213c3af64fd258ba5f3b046cdd08e87672a9b8999ccb9ac84c883a40cb4cf3625dca54d97888102a2c6c33b47121f9e875e9a5fb079cff8ba4e3ddebbcbeffd49e463ecc52c3fdd6c7e6cd766e3b519ab7dda9f322d1f20c95db8a04906638b5ec3414f2a2c140dfcbdb8be9e127d163c4303b894ae838599fc3cf5753f9e167394bb107712f047819db01fb32c79b8b5044df0257e6247e28603bf966eb20d071bf52ffdf67d75485397f18b7d5063953d438cdf8e54cf9d74886fdaaab0576e281dcfad52a6c0c7ea62f6dbdc41cac63029e066b410ccda942d5d0cfed8d5edd9429680584d191ccb48a57929b2915c452b7f7ab65ccd111a892401518e1975e11c5b2ab179609648afa9e9cb80bdee1f42b904e5a7667a651f14141195853e4011bb81e7e115697a6e37eb7fcef3f346aa702fb328a892ce912016385a9857ceb145c8b7e950c2e8433fab72da7b194257dd9da69ef60c18058418799204398fda4b4359e466cb9f0bd2fc39cb802a2982f79633199eb674ecea1887ebaadd3dd6ba02c3069a8bf296dc5b7ecda8f65453bfed4dfb31b0ff30bedd7787b7d634082aad09a9101943baf9dd78a5e0ac9ec3198551ca9e9ce9b6110c85b795b639a63feab34c97260a711c9c48bd86b65fc27172c7626a0302fc6c91b96a07579bbda18e663ead5dc5e3e60ef03ba7e","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"5616fc32ad96bc6054a97b08493500e0"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
