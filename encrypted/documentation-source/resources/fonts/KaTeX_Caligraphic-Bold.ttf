<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"5d0f38f57f3b90b8f3ad480e7cc411f001855d3e154b9490dd520982dfdd2132a6a759074509d54aecf6ed28cdc51b8a1af0ffc89519e732c4192f3378f8dbeb6f4bf8e88da9109605c3e22970e349476c33ca8a8bbd667f0cc252389e39db1f337f331d289c21c7c27f51c3add2c6b42de29023c7d3f441bfb0b9a2d4ecf133adcbd08a704d9a7c339006a4c57e3694e5a97452e3449305b77efdef978faa9a5dcccf4d39b9765570f3be931d45de867383a0b83215ee416865957ab60a0652042cd5eef4fe611b05e76e26abd5489a3456f2682120192cfd6f7e9030dad9990ef28bd77aaa4d90d2e96456355331254c68d2d47b031603dea2ad7a20a016631b2f9b50ab0cdb1501f2ad5ddce979a15010719042b8a3688f6249779c4378c6f07c8eb289d7a0a67e6bb40c78d101dd6e2b1554e838e5f731e8736099a447de1742fa432a0dd1959ee5b76230472a4f7392e0e70c4c526b6e0ec31e924df185e648d85b286ceeaf316df65104f4a587b8cdb749a38bf195f27a34c6d85a6c03f5754082400c46287ff296494514171833c8c84a6bd77cf1dad751e7c6ed3aa17bd0c41d4d6d4f0f21a982bf4ddaabeb5684a45a9315954ce215d8896b198eabb24a9552d724444bdf97d5e99fdf97391a54512e78e54fea472ca2e38ae47dd6030d4fc7a72f6c5c2c7b2c277266fd640c132925f41121985ca97c1229d70f728e0c5ed0154fb75ea09a585383360aa5ba9ef5bcfdb197f139093963ef15ed63a0f0e0b279658e3494bd66e4f611229a86fbb3b07b7c2ed910b33e7938a507af99972ad0be6dfe5c51a1123e9046a5a4b5e5e4c0ef2b8110b888c07d676e726952b92ba633b79565bf315e36434f0d3b83328863c40abb29f2d29149635ae827e57a3ec67e2cfb365317e8848119471df73f3b1b581b9c329a9f78d1c14bf64d542ad242d52c4999625cc472b050d67a516a3b2d5945fdb909a6066874523543dd911b2bcaa4ed2072bb2946fbeea26432367589309461e0b47f6a5e8f4385db57307f9dad67eb7c2bf540fbec36e0e47cb69d3117431629ed0198bea77c98278d9d025969b04db8f50ea9801a08d77339b05d2244d00dab12565e9b13e75d35e0c527e60064d28a7dbc7ddfb646b70917684fd139655f7c413d2c5d209b7c2873170bbac468f28afad8f5a4ccce98481248b787c282fd35f6235af8e41a05ff3e982e9b1caa2142e7477a645a982babe8af80d5b0bba7e2836903eb786aef774397942094b0a883474a252f236e353b1ce86e7ad82627e6e6e3f8f63dc4052162dcd8e4fe8106ba8290c9562c5fa477d77f83eecc7667ee52bb2445a10def0a063f559b068bb38499580bca213ff2dcffb68800511ac07bfb6245a6f190608861a24a0b731368a561383c0ab6b1c6022e228dd49bc5d3f9b147fe4d2aa2444e7bb62a5f45fc9e9e4fde9069474bb2823c0721f381c4cf716b51e4f53d439ed54133a460a7336fbe1c86e742c41faed5226d18c7fcd6661a60ffcf751bb0a90c432304798abc514c022a34cb5a317b25867a70bdf0310c84217138cb4d830ef6ab51313d49e44f96910e7f2c7f83b7f0d62f8ca4dc88c19a0fd90fce05b164ebea331ae312bcb2992c3772d3d03759ead80a35ad33e93b137af1864cbaaf395adf867a879dec696d40591ef4cf2acf793fe5b981a6714a4b659494581f61e115f5fd628f239887124c442a4efb68acae48485d99d5294ff5aec2881b55f7e11a4c0271e2767ae0e8fe7a711599c5ff3230013ac13eefb9b9f02a0d4acf0e63f3838de510be11c3d169b7a439b9cfde1d49b8dfff5d5c6e8deeed820b165ec7aeab7b1c16fb16adadbf11ec44192bcabdcba55d718f8faf42128d38564321f191b555c1d65af4037c84d22c4e764c88a15c7c7a66269d7544cef24da5b4de77c49207928f3355645149494018c17400f2b7c430d5646fe4bb1317383dd04463a2c508aaf71c8f38fef69a7ce7ff12e7f9c8b856ea186e7cde140374c7d547277c4236561e3ca3250d3edec9658436d762c0a6b194642c42ed24dab1a06a387faca50f36c5781fce4df2176f67a47351f36442113524fa8a919c5159504cc539663642353f7fe0d3c8fc9e512d1d3ae0219ed22959d12062e2809708c9176199fa7984977ca6ad6d55effb142e99285acfd8e6c8019c871cd68d2b325e91fa1be24306efcbb690f092d9ba39549323e636974989eb1f5a724a48b19ec2093d4acf28c1ae032443cd019fd9ccf590a8b9d6be1bb3f4dc835cc9241c4d288cfc66cabfd8bf443920043c338f1fa989ed6db78066ff569f6acf82d38dd1e08999883e14b3c6ba0ee27331c7ff3cd65a918e0187407897f86cd2134f13549ac13ddc094d62af909d6ad4fe0dd5c504d1ab620268ea09cd3232d4bf333f3d87e663c496395a06b0b79b44b3394b7da81a767632195250c073fee6f64516e9f92189ccd1405446fed8a1b8c08ba0f6260e4b6a4f9557928ff13317fa2db23652f3c65bbf7f80468f84e1086d28756590d138caaca0f57d21552df0969791a8c8a0eb19a3341945d03fc2796a92982fbb9d6289978b585934f9fd3954b11bff31dffe33af3931d207ad14d0f6659f8582052cd7c253ee53b1ff8a59ec0a8c454dc19fbf1a22426f76decf06b5aa3ecb26079748eeca2dd31e1943a2508d932d3cf8bf7579fdf0cef384204f7a6bd88f968134057ce5b5ac3e9af4a5d27912c78c248fd9075590412b5e29fa50296dd9a737042c4cec568a40f769c0d8b37f7e16268d169881d4b8a2767424415ae432135ae8115f40c19fbf7d55d8a33363b6b5b5e944e90f95141cbdff78aac352464de059816efa268a26227375a78fb442d1ada1cb5380ac22cd7e4dbb776d2a19c5e2abf572cd6a614b2bdf4bb04c68d20397ac44cb449efc8d57549690915bb52b3c51588da5fbbafcfeac5b0b67b5539dd08ee4d080a75001b19fc68d76c14531b87f922cbf1dc83a8b8e632a7e45f2fcebca40c13b763ce3d8340df76da1c201a91207071d1f3cc3f49e33564cca231164c5c813bf6fcf5aeb963b212d81b9e114d3a23584056ccd071ee6c41749e72abca0f9e2807cd93431d5508fa98e845d8636a2d2ba066e4f990d22f1a24d8e566ad7664c21b53e7ea4184d271f71f04878f81f3f86ef8c2fa68245c5a327634a61854eb239005cba4984cbcc4a2ae1b3444c8ae1772d1351522528dced6d2b72c3d94ecf4bd857862d2f19226742ed5b030f339d1cfd15435a27a39b399ce347836662bf3f5572f3279de0fa1fccdfd57f11b3efb02f1d36111b477a73d4e68b2399b573e32e95ac5f49025bd6d84b0be7620990ca0e2029c663f431c79955fbd29c35804a47fe7d298cfac1fa9d36090f55e6abe6cb06bb0dee21c679a85d3f8b3c8830836af637af14e925792f8143fc522d9146d6caae5fefbccf377a8fd2d82a90135784f3bc30a33ea4e98650a79af83bff8fd954b85e03caaad373abec798c78affa51386ee2e153f3969d1b492fd6669a6dfb9f8e9d7e1e17d52c4a93851b11d277af6536cc50e0d7e19c64408cd4e71f2a713107843e85f06192f1fc0bcb22a9843968c597cb7e6cf88183b9e4647e11975fa775415dc5711c4bebe90120057101aa171ecc77f33ce25db0da9d43c8dfdb8776fb5200737578002deca22eb7e51bb00d5cfff9eef9b419b922c96fe35942e5e8dc0910df187b15b44256b6aa2b4982c6757e6c37bd4c93cb09f9464a29c8b471c336761e8e64828a974a4bc5c1151f4d215f888107cb9763415376ffb0688a4452a893df7938b2e235ad88d0d61cddc3c911e6dea7b0af135dbaaa2ccc2f133bf200fd34ff79b848ad65452bf3742cb54609aaa56b6b04691a5b9e11afd1f585d2290bb205f4444874aa726837ebae244cd289dea6f8c111610e80330b5ec80cb9f234497e1177de270e413d90f70ebf37012ac2a86c781adb04c2a3dab2bffa70c037f3f198cf16d68c45d4bb5d1e8868a5a3013795e088e95cc2e72054aff8db7307670bec15631c88513369fcfc0771a74aa11673e81f69caee4e0f80a07e8d19e9010ec8f331a5121a35cc5de2d22264737dcb478f727d0a1c9be45f1861cf2be02d0e6f439e342b66ddc344f0f178368de15e490ef3c18572beabd9cdc5aa5807be09cdbd8166910c394d51764e9f067568207f696b407effcc3af121635279150540b392ff9ddc5db06f7cd9470ff5533ec581d908f2b7004477f12db29575887c68397ec9e3a0c7e4303d56671ef04b61bfd6b9d71e21a16c6f5cd2d1ba1069665521b328d27badb3085e9ca561753d4aa649cd104625a71f315152b6bae8736072dff2ba4801761d8ff21224e54a83d2de03b99c86805c9ada6f5e5d640177c00af3ff824bfc020f2cb0c3074c72e3ec89991ae7c85c1b92925271ff76fefbc5a6c7d0c7da1563927fb50fb6e3594e6833d8f25305bda05acb1f9bbe9006c00624d2329b3e74dd1bbdf179c2212faf7233647f9ac4d9825fda800fa97439170798c3076468485c7704cfda9c012cadb4b99dac7b8ad41f2c3254b9fb6e2d9964275510edb598e203a385df80079a3de157c790c5978e56c4d65097ca35c51aad879762cf7efd0f494d654117d801aa225fae1c90945278c1bfee375c0750d5cf65a3f7826710a42348b922536ca95bc5903f64faf3325e9c315321ace3b429b890b213ca825aa16f2c0f8f90b60c292db24c875c11f6291a681dedcc0f49506d860d4cd8f9c01b73a3c7343697e7bd52b7effdcb4323e09fb4052406300795683200ade3494bf91da03ba17c75c73a9f51c6e7f8375e4b4d71f2c98fc14a69fecbfc8a12c07ccad9dbc320e626fb8971cf052f22b349ef7f9738cc2b4e23581472b2552e251b758fe4762abbb12709c73e55ba879079fbca874575624d9ffe440c1f11dd5829b5421f235d589d0becf6ae49b412c4f3b1fa616288d38cf02c8f5cbe58e0d574bdb53a4739228c98a0ece82ab99fdfd1c2b5f04d751dd7d09af4502b3e3e43b44fbe9199ad8bcd4457feb5a83b6b09e2ade2fc4d6c31ba6a3885414b0f5a07d4df7fac6a3dbc39e38d878a7dc84660ffc5afad8bacbf8d5de892cf138b0080135c8021c42a5c44f5450eb637fe48a5986a9f8f49c177fae251dc289b49f004bba76d854a9a7d198de8e8525cfc72d5c615cf091b2213ecf0eec60dc39f8974ab9b784d269973e77f887100725bffc2b7aa36ef30e7f38ead521ce1ff9b9596f2c4e0081b6458921025c180f2200a07fa2595d788ce32e5fb2d6d4b6564d6648e53f3deff296c6c264662e532de9b6c32f2052d96f6041b511161a6b2a14b8754d46f92857164e24d4c446a48379d06f576c629eec5bb30b3621c68fd047fd713c10aeacffb28ccf4327c18e4302a28da065025141aaf67bf9c6a840aefd7d774f714cc3e7bd9b85c448cba51cde692ff4172a61cff2af4dccf0d2bdcd23e92d1a847d436c46e3e5e7cea1271dca6cd460dee35e9f657fa7faa15c61f9db7128d7bad0c92f76548f6c7cff7386ba4834b21cfc4e16afd7a7de896b602b18005598d278ec4e1959aa6b7ba2913394e8113c934edbbae84eb3b6ed592123b372e79fd2af669369238cf8a41b465676827cc36a7565936d8ae0ca5bffd8d863f106ea0a8a0be7218120ede6eb236af3d061d9526364ce6db7fd51a30d614400678632277b0bf9aa65b6123f319eaf7d3ac9e68947637ffcc90938a1e445b27e7521e836192713b6709b74fd6535c02453bcda60b7108950e3e880e7a5c42a1f76e9f6ef57224348c234e8246538cadfbd0732b52af95dc46eb6c185c82689cde5207eded38f8cf59de5a2a5cbba06d11e7b91316ccd1f45fb0dfddf22d2b5926b03d079f3502873c9e56bba063510cd05586c0c39d6824f2b5cb25d0007ca99d6de251606609359b3c2b3fe4f12f3bd6a1dde07bfd094f44ed97d0076e6a82222eba4f7a3869cb8b42df2ac74c94a38cd02a1d3cd223ad99fff449d26378d8c485068d23fad043e0da898dd4dd5498dab01579c7b75a163915cd523e4ba66a937949ffb99c2d87dd474030038f84ea3a66deb1d37c856c3cde65dc5437ca09a9e4555dfc384cf7cee75336fe19ce1d527924c65ff8aacf4df3101a32920cca3aef99c4593114af8137531663c1e2cc4b1bb2bb9225866b3425983610c598e90baf15ef278ca3b84f685c9f09d7916652f4624021079402eab9b32ed8bd9c5b96097964bbbcba7d4ab32a21748db8d234a199c373d67fe4e74579c025e96ae87d6eb0b000549b4eb289d2a07265b0885ea27ba4e30f23a2b84777437a69db5c1d4236f5242b7d2e96cfd33d03802f1056ea8fa44a09d2100e935f4c5e086d986a4adf607efda287e1afd571fe8a7912b47a5fdd140c47abe5f91363f914114b550df04669d8dbfd24693d307e595c15063cc576b2951ec6a9c6aaa77d96eae051e8b4e104f2534bf5243191c646667ced56c5a438fb4d18095f9fe8360e94f21e68678441149c3e64abfdd289549535af97ad76edb9da0b67970ac8d1b4ea14b7bd756d07485b22ce56fb32fea5a317b94c19505d38374e86c38e328fd5583f54e283c11d88457326c1d13a2a3185e84895e189cb8c3a7e19272d654db16d3e1a6d28a248fbe64465726f4f07d3fb20c7be7c23935745d9f02efd821de226eff3eac6699952cc098d539463f893a34b466e8471c085c57cce90648ab63ab773c41d4585a4b9e198bd20740070acc14c6404511fa33ac142a403eb3ee10e78b9e6a2f22250c92e6d0b8efcc239aa97b19aa5c61c4631d5dbbe85f6ae250ae23034058a27acdff3e3603a89585a095ad6c4432bed32631cb9c5a3ac84207342dcd96cc653bc1d7f822408bc8540b6ef6d26a9abab1ee7e6681c02c7321027430445336fcedb14444c61536a266f184380d58b089d9b01b1140dd425925ef9edcb8a9f078ea40ed6c51038eae0714fb7b37a84b5371bbe710a21d759f7e022e538aa96a8433575cecd63142053f160ac909b16004bd4b62bb5d5a15b0c5e9985e0d35e8a92c4a1b65bb78d54cd9f18d518016b9189afbbae285210c9e5b5735c01e278cffe6f4b328565193255c129ecc4e4c078eb91827d45d1639c792b5f3fddd110146309feeea281f71e33e76a91df5a4a7bf50eaa71833caa71f9c2ab8c67c63f6a0358208e08c49d3d99cc66b325de8e75f8ecabb3eb97effe77a136e864b7b3e8b9360147a0adbab90f4ebf75cc422fc652f06bc208cb80096d5f4e6550bbcfb0e3b55c8bd29fa23af1091f32891281f2fbd2176aef229519fb3b29ebb495fc3d083fa5baeabafbc47cf2daf6087e61571a177d6493679bc33125b4dfaf0b74081f69763e5f8ef3ed8dcff3bd0fd8b5898b2019cdfe6923a0e7f35f8b186c70de2544afe091673fc57ab24a45be91fd246e0634411e3c22209b619b0b7371ca27bcc1e79d80f2f86a11babdca88a66199ff85253c185922f9124ed4aea409e7f7be772e577546529378ddd5616344e9d901b32997d2b650529e55b7af3c7b79c577eb51979bc5c9aa9d9a59ec4949c393d57fcd7bdd2f33ef3bba8d3ddb6c4a3064696dfae7e73f7c78dcf6aab116ecf2a4fc5c7ecb218266da434303a11daf25011cc73d989875a6631ffbc1540057c387b64aca28afb2984bc9ee4b4806e35ff7d66f95cdf2d02b9af0c9db7081d251baef32953929a25df4a30ce9b40dbbca8aa4525fb20f49d03cfd00bdd88fc7dc2c6046f0a470e26cc940a2f4f36a6a907214905b4b97ad260926a67171ca27bafa80f45491e2865b16d20024e071ad4b11dbe4654f861d36b7132d5404b059538f06e9b0042138217e667f7de38d0d1e6e6872c7ce909c5195975951ea1734f7573617202bf2058c969be25f91b563c7dd72c13350d1e643fb90622fd929e1f7e526c130fd6b89e8c39f77a9de0806660774f2d7ddc996f97051ad6082ca56c95787e7e01b4ecf50731c81220fb1f1705268a0aba03bca7a6d7199399ce1c5fffb817568e250b1f662b62e5a531fdf627e587219d01558a73a2486550a3461d0c717782a6fc1c1db8e018ac2bfa05c1848e51da46a65b0fc8f75b5f7ff91b43a247d77473aa0a78ff9f2c70bcf93a22796f0f124dca64149cacb7ebd89be470d7c36d6e49b07f8ef068db7888280090658b984f295cd3170048358ffdad2691e21ab2c91e8ed48c7dbc6029ceceb947a5f2bf81c1befcacecc4b29ee6c82efc264e76c5e5d694b78f60cb10b259f2b310f695b4140b10622856b6806f203282a33c748d07ba21239d1231e64ba731a1fb59fd29cb44140199913ee7684d1f90f09eb09edbb3c4ad6938516d09fd5331f9f91a48da8aeb4502e09cd99704316d48732b4083a4b0d44aff765b1794128d5acba57170e6b06925260c26a18769fe81233a24bce5321957b8f356dd2713f4892829c25c6a63cd26b3242108b9770311dcb15b423a2db9632921d05d696be75d29b1d73259978c2a76adde171fb16e66d6b6f47b409a331d16670636787bf712888d6eef3ce733e89bb2fc31254a4682440d626a38f3bb187ebc5095d06d0cae130531fa951d1ee16989b78aa11fc43ac922129e64317726911ee3dc13e7bccfe49e291b7ac6b354c7f2acfd0aca26adf83e45ea3637c907339bbfff77c5c128af82cf5998dc3ef1c82df60ecdc67cd5aaeff0fab9c69bfd93511f2d4f829254508f8346f9b39307c6a1b6cf77ffa4486a9852c0faa4b22d0e104656360b5d16ecc44fe9845ae958baf037c306377f03b9a51904ae3c88668c96210098dbe5f6a79be7f779ccbe5a1bd738dd9bec6c1e3d2e15f40bf605e1d009e69de928b80247eeb45907fb1d5a974fc1f46983e8a0af104a73702902ec3f620ad7a8abece4881d6a11e09c1923bac40501fa7b66050290f3d4fe60d635707073fc5bdd0bded5c36cff1df0c15e1a299a2a070506a76c0052a5f227726f315dd6b1f0eac501fb0abd8acd6b4c0e83d5e6adb86b95b4f5a7c961bb0041918eea020cf98c96bcdc47cd6f294e381c8759bcfd49268cb21992d622a8b2a605c555e5831112e862af58ccc63a725a72b1241dec15cde3d7509cb8de991d019b09e16721d0c4817d99c718f2b85f22bb46f3acf69e6dfd4550d515ade86ecaa1661b5dc242916bfbd884c6d1cb03bc1589bbda4762082cd0bc97a3c7d1332024a00d6d30a9244e4038346f336636d0b1c7f24e66e5ce08f4b79b4ec384b579ed115ec71933bb4d3fe4a1566dafd2809652a348f27ed35110e2c75b0e8b2a07f4e83c097fa726ee2e0e98271ca86c415c97d1ac75496f08eabbb65628992431a5e586755c8f79ec2cebc4b4d1d4e103a21c09cba2f3b36304cd0bdcfdc2733dec08cd5889510714bf3e64e7f864f32d9058a58525169630fffd8c6dacfc91d40174dc23853f66acf2f52ede275b47ec62b2077a92b6fdd41e7c0c9429870cdea076a1847dcb33dfeedefbd365caadb5dd98340f09ce126cf6b7ab22cb18becb562b0322c4f9cce12ce7c5421f5be0a79e0755d158c6eaa2030a0d85d1d50f0f291c19c0996959f7efac8d440ca4342205eb171e18ac6345f448e35e1b58c4d928573d8aaa1bfa2dcef86038f984d513e67ef77b1d3cd8f9fefb04ec5e80a09788687e05378237ce54b4e1eb50df1218d109f292e470ade4507f9d78935426ac21a796a9c3ea8f9ee76d4e43cdbaaded764e01ad63cee656aa5af3c0fb0c6c06976cddf24865a9d2a3377d96c5fe6932ecd005a7ab9d44c1e8e174a0260bd05a461017f48e09513d6f6b3dc9faa25b05204bc07aeb97f4a505f7d6725e7f22b7c0d287bcf2a73ccfa516d3e3a0953dd54d03fb8b37e966ebedcd216b35e25801cd8d32302a25fe01010c7d56ddf5160827ba92c69e9d8f2126d914ec0121868417bb6887d08cbc1b96eecac712f7af55640b484d1d61d3bacb07d5e1b0afdf075f071af969061ad9b256bfcdda5c140578b4b5eedd2b87d952a1e80c28402f94d4bb1e0c52543f2a6947ee0e0db61e6d5ffa639f73b9bdd543a67731e85e2546e423f3a03dc1a46175bc9bbb02bf399c6cae8e475e616289a118e8704a835661e9f997f292873398c9b055f6a45966f76020f4ce38e5b43aaa74435a68d1d0010b2a4551bb85d44e9042cc6e4ce9c37cc29a9aa92f73057f7b041d5c79070c9e25a10c796d34e9dc9390e6a03753402c4ae3e1d88216a5791bbbe334ca9820c9c4c34bdaf4a0d753a558c6220b05d68ad5d15ff70274385a83d33ed6f6f9d6bad266d923ce224ff1f5b71f24007caf9c36ffcfed7122c5dd39de4474035c7b80fd6af60d7e4a6ba82244202e9d6474f2d59464c097af30c0a3804faad018b4c3de334c7a796f1c09573e6fbc23d4fa266cac0aac4b35883cc4a0936a7d0968de247f2b3dac9e8e989522cbbff9b563b7d24830ebd76f6cd69aedb15c472ee57a9e6331da64f2df949a4c8de6b579c7b21800f00e51150b90944efb774a3f49fc057c6423fa57db0afa687a31963a3bf518d70a258591f2f1878814c3564eaa2df98a747ecde768a976715405b53b5f7c4b029a677afdf7eca53100634f1f69964c2e11c4401b1af6de20aac648672c3c0e132f18e3649d95e2700033637fdb5cd5bb3c4f9ab1a522d90c8907052656ea5294344384f8015398bdfe671290c63b21a51f87df2c51381e37dd914c2a03125f4b60ce3fa96666b6a9e52289a56146428c338fcbd7f51f661892aa6a329bec8187fc239e89b37405c3be9e898f01b2b71887bca44837044bc36943a84cc7f0e1b7976f2a6d33cf5de17f81bd444741ccc0ca1332ff667bdda43a2f8a10b51e75fe34ad6e057239645140219b09f61d4fe8bb6119263aa08e7face8b2c3f8dc1591ff885255143943fd15fc5a712264907be3e006db32257989c702191c8a36082cf873c670bf7a4163a2f567e41c17343e5c469b5916cac66529158712abb22962d5e72827952295660ccf6e3938d6f0268a7db76e0aa772b84c99b362a68dd6436170fb40f1dbd009700d25f55bd0901cf7b5a4b54c265b6f2c8160375d0d437d5123aba6f96f582f3d91823e4fadc399bcfbfbc6fd6960b8d3ffc95dd8445b9186dfbefa17aa265ebcffa6067392f67294ff4c8474428e611bd8797d5b4093b7479ad89c7b7bd04d88b8049af417ed93f19f682d6195d036507f94b966f51d82cd13f2167d05cec378ca8bb67cd582bdc54f9a1689c709126a551b0e37f34534e942556dfa4471a0614d2f7571066410f9b7918364219e2141355878df09da8105db105e13965aaa957f00520343380e1c689c4e9054e6c5541e8636781c9a1ca9c58fbb8b2f252294c17b3c32ee4eadc85c4bc056f5c3841d9a4e876aaeb8fe51c00ea53a6d74b8446240902177b896c05a51e07f970b5a5f9926b4abd32fef65e64b6fd1f3dd42436df4de7278844ce1b5ce4336fa9f04b8ead0bf71a36c1fbe22e96d61a60dedbda9eaf26ebad88c28922fab72df0a8e6fda4df841669e770456cd5e796a80b3b2e98e78cc0dc0e6b386b2e6b2c597c4237f19e2543a72153c6eea18974c8fcf5678ea603ceac6c6f2a2d0bc85ae09eb38245b6ff3321f851d32def1250d247d8f3123faff1fcf185da0426e089c03336889db62aab1217f4ab60049a0970d6997de73bd2baa2866418955d44f895bd3eea645cb4f3867f960af108f11039e616d6b50cf71c0992b7b8207534fcea5a0091c527c5a3c0666083866eab1bacdf1f2cb6f20502b64c193e4fd4f59f087aa38ab680cccb4ed35a175584687c1e6f9502f83e8c3c13eeea17a02f680aa3eb9ab61c400ef70509d4bf33035795ffa5ee176e4c3cdfa00c4ee1f84071388bae0911167fc3a5721e944af40a45b3e144d48c51a2f921745a33050d04950aba71375ae1ada0261f797a3e0a2d562245b345c1f7bcbeaa728b85c8d3edf499cbbe7564ca530f0b84dedf9217f975382fc46cebff52cb857913843bf8eb313310940927186b602b770b1e3797ce20ab5999c2407c017a8421ca0d742ab95eab0392b1231b1f355d231b8a2ca18a9aba9a76b2430c1c8ba600018ae8639e000934cb403a4958c4ac6866be83ceb90e01e257600326334031c61b2521d9c676229dbfd3778425e72af161b46bfa3007c303c1380e415e690d2ddb6302e21bb7a45a28a7d4e380c6e0850eaeb8cac4d860fc8a9cf5f0733adddf305e7bc7f8c0f0eda7810f624a67fe178834dfd411851ca4b4c0c95b091eb71cbca9c1497c1d40a42f646723538974f406e3f107ed1f157d34fbcf27315c35c675214ce6a5aaf8c9e9e3ed7fde0185d8fc0c2f50e3b8f077ce7c243acf6f2a8764754342ec9d8cc8c765a1945d296f76715e2372cd3f34d9d36522aa200c8c164f5c7fc0faae402f658d56105ba3976ffaae32df9b32e6965c47f13e22b737908031880aeb2e6f688800335baa4412f825f7f0f89ae24bbe8ef5c903fe2d8846806ada2d4cfae50cf9e77fd8c6bf934367fb793090fb221f56022c1779fbb75ea10589e949bb5a1dbd41eb0dd5c29cc3befa59ca25b7c296582b14a47e4e2cee11b1467b885de08c915b8b07999c1e40c7478a46c6c0548c7a1f356fd487ebc75f21263694ef5258269b3270feb3df644aa39ed3be665e6fd38f5967b2f2e2cf5432e7ee20ed77210424bf74ce3ceb40c522f09b582912abae810564905fc840007cf0d2bc94b1b47791d54c66c8e0ac4fb0ae12bd0047ba63dfd2defe3b321fa9ca29f819e914394db43cdd76b7be8856d0bf311989518ed66104cd4333dbccfea9ae3e0723e55825a14aca997752b59bbfb4bfb41bf5af92bcdf61fe1dc6968ac6ae2a7bbda4f6bf98ebdfc5ae212acfda225250026ff9693cd7425edb47799f894395813c9e935fe63b5ce4c5534a5e1fa9586faef7862da7e707418705c24f0ea750f3b29e939ca89453f15c2da6084f33899284e385c31bb2704b4e80a40fbcab2f9fa2aa0f758b8d2f17191473183f1ba9e20ae11700ba5585ebd01988fc15ea7fd337a7687b19d388280dfa509b99cfce0c90cf938b5de6b46babdea999b8551ae95165f542617d8260291d46c782f0f84008d0b23d2adbe852b401c4a320ef42e19b739740e0be70f614951c90e6b69e5d55f9b1d4944408be10dd6cd3f66c45803406940f45687aaa9f3247b11972ab46920ecee3d827b81f4137c3441eb60221391cab7d18d106ee3b8306013f768d51c0be18e72bc587e2e1ec96837bafbe234f52827b11fe66552aff14c4f9dde489290e606a5672b22315cbae8d3b838e9c89eb6e4e58bb1f5a71163304c8a558b319902cc5c3729a5c08243a8879ffc6b97fa74b591dd7cd041effc9c2061a7c3a80be5058de3b456cacc2b73a711ab0a1d8e6822393c8cb98846ab2bf31e783af242088f2c561b6a724cdc0bc36c6e01b064c342b7f9743f00a89f34e8be50d8d1517df87310bdad504fcb2f6c197f9b5510ec2d9b899d022b36972e9a5df7028e65038cd29ed90816bf666ca9268e803eb78b81986a3ee1eb0963dde3515a9f88588335c064d6e25a8b9812f7eb418189193c58e3914f5f617853a6015eee4dd985fa9af80ba7cbc27f8cf7e53e3e4e1048897de5b8e236d61aff0dfffed4ad05f381d0ff584c24973086e1cdb0d8de7d39633ede8dad320a82524cf99c1c86dd61e5b5a7986e7d704826951ecbebac177d6d9dbe49236679adf7358072b2089b24d3794199d305a4516207810894654f5e4f27ff98c26958167ddf0f576d0bf3a92bbae21507eb850a58078fa70f174cedee8a4abeb725b60a3ea22cb9b2d625ee7259856a4ace91c8b7aa94df82335ffc16654d57d5862562687e1db0c68e49f546b1c0c708a231aa2ee1fa8ab20f1c5c1354a18ed51360f6f452457d2dcbbb89f4cfe476d88c8a71e4d176eef1df615562cb58cee607e9fb5d2b630307e82cdaf38cfa5190b7710aea8019bcbfef2ab5f552bc5cc8bd71ec53dcd6335932873469226156c3ef9444e7a271d12f1b50868450b7660bcad2c52e892d440d6a814a5a73fd40512e1406430afebd734b175aa3af7f3614b6a96d5d3f4a3197b31f7d0c491df34dea496db9be61c839aa44b0392ee12e5d0306224edb2cac62703cfb7a586af8aed15e5e4f9e52676658b1259363d07afd05e1701df235a2d20c1fbf8448832cda53b45c9f49448282ccf88d7bed9710cce9beb2100cf63ddcfef8c0bb9cddb611cfc911fab347613df3c8bca8b9440d09aae9a182bebab8cf3aa059140d3ed5487a488944d1569ae232dc824a985781f95ece4c5b17855fdd65e879a9e1319b0225583cb4bed661cf2ea45b7c98139d4da0e5ce1556ca48219c72ecdbef0054fd4ed670fbde188c08e03fa7a52d325f697f62d9b824a1a534221cea9f97f0aa97b49f4ecece6edcf6a9186813ca9d4eaf3aac148957d04b980e3e50bbca81ac9d81b91e8b0bfbea08d6e2edb1dc270593bd2d76f5a7011ed9e62bca25395b512d7012016cfc522f9039b2626893b2e22f3a00de6845a0cb9a1b1d11c50a871e47c6be236d4a5796a949e48a2c72b2806ad91dd4798d2cf56ba28997c5dd319e0b87ed7f455ea4d8d7ee1ccabfac98d0f67decfda486ab8c4f3a3e6227551a4fb852de74cfbc2bdf600b5e5971335ee3e222b7949bf9a0553398c5e4a4d1712128d363d7294addd211a5b4c5c59858ecac76bf7000737b32a30a6911a500d75b82275fa28fc34cc8999c7bc58d6780cf70a9a1ffa05eae87728080dbe9dd19bee32d06f18857cd7c714ff19056fc9e6bfd5adc5984ba824bd8744f21dbb4d59b1c9be77c9c9a1ca6df166874f82b78719c6914f3e93a3026d35b7edcda2effb04c2654da45faf8419d2e5a6ecb1c872252e460044b873202a7279021cf0465418a8a742852bc4cf8ea6e3979929c655bf558f5d757945ea9187d7c5d1815aec07717c49f92dba90596ed332870987a670893da8ecdeb86d8d8305f59de3987d31a0564a7d19a8163d80a085b149056e36b0c40de0682cab2d218106a36cb412cc30455ad8a42c3c0e8c73303b50bed4f9ece0f7b3c424dc71442acf88e040ebcb95abdfb5907668443fbdcc1a774fd5821383a77fd91e82ddb04ac338027a2c4b6ebe9bcb2fc4fee1de51017c7bc4ce7b00c5e8a285c381be269793da5aaf82c14fef1309c53028fa0cb5fcf5da03ecaec6d1e106f82f970160790378dcd869c9c1a3ac5bcb510e4811358fc7359dcc250207b5dbd3c3de4d64ca013c6c4d2970300ba1c9cbf328a852fc236971d0797f44044650d141cf86c9dc00853e0a0acd5b8aed18eb919471a2c45219ed22ee865e72f23a6da50f837b2cde73b0c85aa1ebe93021acb05cc3156c57cc863442eaff7d47603d237d590d393877046c2571558940108708565b1dad012ea799fcce75189e09a6c6f2562dd939acd8907521bd974321c9da083fe7a05e69c2ae10013df97f50c067904b26f5b973af60bf6ac68ce2190bfd84d871eaaa9454db1a44a48bf93bc7f11a0fbf4d1100a33e33346f7d9cfee2aac27013c9d1daa6947b585b46db7cd284bbd179528a6b166d103fa118acb453ecb242de7bb1889de10a0b0dc156be07906362caaba0e81454ece5982fb240dbb6fa0b242ecef2652a0e89a0e5f704852e5bcb3957055c9d28e76f4196db27d3542dda1713c31e1cd2a0b59a8cd1ee20a3bb2e6aa3783c9efeea9ce0acb180bcd4659bdd3fa4948cc05761420ba3ff9e484251a0990640152dfa83e086f68858a3e88e4b2e7202a074ade2e55d6e090d48d59c6e5f37f44c1d803a7cfb28f5f7d8359388a8810eda562ff77028f93c421135c78f70541425f87cc0093cadfe988c90b72ce6ef9b5f6f479b612d9345c1fd16013a84ccb90e80260c7c0bbc439086b87c15daf7553a05756cfee353bcb2dc6c028e90a5cae12578c6c035e4199d88207549cf67613e0f2c1efe405eabebe8e7dc38a484348d9d982169b255f56942bc10f211e1b18d7fcac1ec604f687c234a8bf3bef810fc58e2609ccf6a214536f9809b038f3f238da6fa1fa31d91bbbdeb6098dba8f78df3784f798960aaf93b31bc1f25d3976dcd2ee573b2d771ec40b75af13ed2df28b6b8e882a89012a3c62ba3f5755d313827d435eb6a322a14f81f5c2cfec3825174a8ad7dfc601ecbcf7e8d6279cc069aa6b4765da85122fa8e0ff7603d53a766ea85150abd77a6192144069fb57532ed43fec48d96cbc2c9a8f725061a5f30686ca4471763bb8d4df6d0bd04f72f972229e51ce0a2fd1b170f6a53a849149f976fcd0ce240b2d0e0a962ad0dba68bab34ce59d1f46e5ade0b72b2f39f33e19e004e7abd348564f36c27f65cce02a9665168c9c9af83f35506b1b0d5cebd43f31ce0ecd67190d14777790d615b76d8ea7d4bba992ab14a147a49b1ec1006114bcdca202fcd99afe90528f38c6495f8d99a6247435c7f0df9359e36d6a2e214f8a5c54b3be93284637e8dd7672a5cb7005210de3bb25dbc15a493bdc1511d1cedb8bc6846935ede6040f477eabf43f12f05a0f41bc1124f861f63908b79fc0e31c921a3e931d6b627883e36fef46eefb86f7d90f930560527c50725804043f4507f088b53966b19ec4f890508a7bbaae3c70879bb297fed1d8ffc26f4f0695d6dde29ac22206e98d730cc0200a72e5c0318f58ea98d63796dfb0c79d2dbbe0101dffc4aacdbf966d06c27f9820449b1f911607d2962442d21e820c93e10a2bbaa2742dd58f711f1cec96345e6714dae2fc273acf84a669c01f70bd47c8b2e6fa4e880bbde13f9278c61565da595800a84fc2ed3becb65990fb122da5e656d6e5067e720dfff28d458c2677b6a394b7533fd8000405caeafeb285bf56853bd70166629901e2e94794443ee6909507b7c9c6fb6f4daf3cd5056bb9997c71c46a8601d5cdd145977c3761bbf7edd24382b685f62905f97029b8eeb04ca457d082a547a884edd02ba1db4010f6f156d62b78a6d7de67b1024e5dda492f247987859065c55b2d70a7eb9159d105226a138ba9ec1221436ad7805a904f8f0f838d0a5d693810a3769574b87506c23a5b428bb404636a137b0d7a1585691312427fb235fd0a1cc5ce172988e3cb2ce1748729d7dade424fa6c6dbfdbaee7267f95a4c7e214a16526811b0beeb36b9785f0bfb81fb426f70375a0b0e20b0b18a96857f077a6731375cb7be821e01a4883399d7e8242d3f2b02b02dc7842792982fc251a58be34cf179b68ca32b9ea7f46cfd80ab63f9d0c78243c8d6b28932d45a8d0c4c20f6a81d515a75b848babeb54831ced4ef50eb4859c82904b1e739f19bff0907b351a584a76a0ef77709b6a6a52c897271e14c03ba42c04367c6c3ae262a7b829a59064b605c316fea6de8a8a8c7fa267220e4b254987bee5316393c83a91eb9f67b8a6613bd48fae240700288787e95dbc4de339767234a443cacbe4781dd684e10aeb9d9c5c19bf14f01a36685932741b3daa881d6f86d3d3cf5e5052f42eda72fc1a95dd1049d21516c5a2191ed05ea7b91f835b6ca1d4274214bcb70f4086b7dbe304283046e9f81f5d8846ea6fc7fa8e9a3be12e25704db2dd8806fd7992e036595ebefa69c8a9848c74f0ddb6cc32237e166bd58d3de5af72ec7f35d5613890bf0a5a5f4002034fdca143e76e7b6cf5bbb71fbda3642c07ad5e6322e411bfd06d26ae38b6e8267aeecd07ffdcfb523f2853514007d3f3001a41b85efbfbaf7d4f662da71c82a7183ee3861ed907dc5022954e15e1e472fc0d1af1638b8b73f213bc33c3d403a1d4aee03792eea4ba347ec24827e16448e93ae9300d57d4a5e094573c618ad84a5538cbb5abf48f28a8d25280e6b2c1b76ed2a3be85a24edf2dd3b9eb8880ae3d8ffb0b0e482aa2d1d6c74906e548aa3946523b1f106b3398150547bed4ae3239e60b70cdb6f44d22d11139753c531e30605d8c01c8a36e9fea9422b5d1bf945be0c05d749446a71d9d6842f576766498ca9dc4c9397f7bb012657ea9ad7bc65a31d3806810633a965814e53aea9fa581d1a59c082ee3663a43965b63b860adce88e2f6e7fd4328f75982c76d7f044d4e058faebb532410fc7b92671562d5881121b28310cef5d1cfa0bd29f0e76836f9fb33ddf7f036806cfe7ea71d2ff81ea5c77d0c5b2d98aea60ebb8f6cdf5f6a4137fe8f80f43411442a1e57e5d7855069690e44e187267df2f19760b0b747b6310f1268ed35153d48a722bd69cc16436e88cca414d82acb138bd4d0dce66c05cdda3aafd794e4ff963bf5a1f817755b829de79af733483b155133397afd5706d69ac425379d0914d358f52410bf35d13609a3a7ab9912998c9ec750eb6857841634e0b7f947a1a513e8e34fc62e48bceb9690d4588df4425c3f6f6cd43f6361e1520cfdb4fe375c8d83772eeb76538ac6b09cfe3fc8c69b6ed3e434a93df49ee2311f146d2ddc90e572a279f4eaca3e3d102e2543e75769e2c6b6b3c00a3b8ecbba2ab094ce8ab1732d013bf602a6bfff8b71c68b0d1752eb65b03106b2b8962f0855a4910fef48e3facff4f441f395d15b2dd401726c0d92f83763fc74ef0768b9b234a816a06c621315b481242ba206c2388829604afbd35a2e1dd468bdf87c35780caec9fe459618ee1c2ded787c2dcfcd49be9dd572801b2ba5b0266da16284972225e1932d8fff992a8c8ff2bfce72bd42cbc62a56ecc16872a27cc793d66f3bca0f33420cf232e56746eeea9efc7427092715cc7a3660284a6e7f94abba0962655f8d0ee1776eba68132ae336aceb3bd6b2e76e860e3d5a2fb5593e76df2622e095aeed3e622694d018f3f86f32637966871219cbc8c4d9150079a0ea18a36fae61c003b472fae4df8afbbd8f02a062c6eebeb98e79b01b9adc41cfb82ee40120e189813925bcf9fbb2ba34072561511c10f08340b3be0bfa3a1eaaf2af0d7f849ba87073b6c745a0868f2fbf774e1777bf5016083c52fed89cf3af16abf18f5745dcd104c10c7b072c1cf122a53a1c43b7202e16ecee8353bd5746761462cd85cb328da204b0f279f6bc0bcc1e4990e39d6eb71c31821fdebc5569fe34faa0d4f4a3e302a862a9a7640a4e5791df438d3eb947f6956b0fd2eb68123fafe11b84486864190df2ed357406960608644cb265166427cf4214e9c34f8f0916373ed483d052154b760824be21dc398bb2452185e5f7bc729cd3b9948c920184b1130cbcc14965446efb74f799d2ab99fd1232cea5cffedbd39f304bcc153e6e276630247285d92921c25673fbd600d0463d1099ef2448ba0dde018e78d32b7402f5bf534993c0573af95a44cc6d08bc5ab1adb27aefd1d093ae981baf6c1d22c68ee80481537e62d55e9508c90b69b3e2e39a8cee3d1a55ea26588169822cc85ccc54b6a79e853def70bdbf40e2e58071033fa4e7faeaf6e5c78b1fa2f372ef24d48f7fe391363937a40ec6d9ca0e00efea5d325bb6a0c9875d6c6e55f03555fd313e8e7d2ffb946ed1045c1b473e6157b658fda3fc21419678afd55c5679d7a60866cfe5d263610c43d0236bb30cfcfc2a4775706d3af9109f3098b913f892eca91744bb3256a9f339871502d2f99d268471445ee537700dae5eeb58352ef39354ff31891fa75c6924845ccb24a8d6c35dcbc4610c64f03cfb9f0fce168d314347858809010a179db9ce51883fe51b38f24669119a39a0f1bfdf8d93a0cc8b91bb8c59ef6f454d943041aabf1ad30e9bcdc643a4e9b411f3216161a5c55dc39a9ab80e044f56b4cfea8504f2da759a97ccebf1e4574e7f30d20a19ce5d75cefe4bb44ce4129e4240056fc22c25a02dbd344112fa1a885699c061503e8217c28994886b586b1c2435428a15782317511219fd0e58ca3b0c4ee7c83d4b37d8d9f7aa251d23117a7d5326ac2e2ac091b19b121a0ed49836656bf68e57594335af1e997f75a52a7f701f82a1c0c25497f2f3ef31a9de053fbd9e2f4fc63aaaa5628c40eaf421ec019622ca5bf0f0875af1321cf8c42ea2f2f330cb46434957b6cd8d25a199e0b09c3288f11b13f78d41cfbac4690288859fbd671126c2fc879a9ba87520d3eaf3ad822c66763f0b5b87e01dbda51cd494c768c330db0d6662ace3c43696861d840541eea0b3365efd86355d4312963dd0fef5fa96b1b5f9da0df53323a8b9d7ecb477c492a45742d0cdcd379c0abb4375f711dd1c58ef522cbcf15f6348ba8eb5839b334168d691fdfeb38a62e7052d4f2d5394ab42a34e2c67ee758ecf71689e2d225d67de7c19aa5ae0e454188c5914320f8cb1708478cecbe7850c0c1d15ec0f3234e60d3378c85e28d22ae40cad499f6ba01759491e31c6250201252b4ba11db4a985fb6c31a2e1098a6e76f8980fbc0f02bdb5bfd5bb0a05d0bc65dad55eb0086c3eb1dad3a184bc5854c1680ce98a4606fff93382b46e32871287bc4368025cfac21979c212fee315a8ce3c05ff787afe327df203c9d319b1d5cd38858a9da318833799ab667e8adab2d798c8c1a0d2dd5b295a844f6cf32dde78a12fc59757715894768cee77677f4d38f932b1179291e92ad801485a45f89a84e07ce6310aa6d04576774631bc37809f27c25b122b3425bbeae6fb19254d102a503a36376447da5bc9c3e4510e8119355787dce3b407ffe39e4e3cc04448845ad41a6e9993f3f4e5074d271ad8892f2647efde97c40cd2837728f4029a697f5bbb987dfe9a44ab6b97b74559138d7c615afa5dd2e593c875fa9dcfe916752f44e4939c799bab1fe96e3fca58c85d0a95247b588fe363bb0f889609954bd1fda90555990863cddfd2673b4706491019f6d8ae97693a56381f8613e7ad1ad8e3542884e8c9248b5330fcba6bca5cb8e11a82a7378c37cda9bec95b794561d77d0b14f1aa19deea1a9","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"779b78f0b0e284ba3ac14be43b73028c"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
