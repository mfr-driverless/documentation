<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"944b7c7a1009e931c0543be59e679f7642d8b034d988a0346c270fb615a4407b53e4570c29e52b32f8b7f279ddcfa0614ab0b57e2ee3b256cf8de3d7e7dba12a569a700ff6671a4f1bacdb94186afed9925e7d386a151e90725a2e1a70fc3ed74bc65eba139c9d0c3ef773bb99fb3f36f7e4be94a75e52371dcbdbb5c50956a09600e986103d833dd6b2e43c186af65555b4a4343673a8f9dc0116d383faa06cbccfc87ebcd4859614e612aafbb4bc1791e7a2ab50b5f0b35af2969e99ed36a15ab291f1e49f97905b3ac5adb0a5e42bc9b5739063513305d5f4ee2e2a993e1034fe82d57a9a5c65967111cc5f8da6ba77f1c3498ed8b8e1a3962bf40071490769be0905107d203afad05d96bf88d76d036e100db151fc3550fffeb13a6d9ffb05a984df03eb44c4c3cc284faaaf0a05d7c8991dbffe6b97f0f9613b7784b01c638fbb1232edecb72e3a798ab40cf2e70433865b5285b8be9539249e37f1159d3cbd3dbb3e7578552c5a6691429a200661123b0eaf02ae0b12f9964789f8c9b91e95837b3f3a42a590e82022f32564a8d452889bd7a5453a378e46895d5eb6aa5752c95b12e39ded7c549cec4dda6f7150398e1e364d512d4bf03dd62e01dde7dadf1f568872fec3f6acf7a3ff1ea3b659666f040dda5dc1005a776af36630194aaf195a98bde52202f0a682589bfcc210d2393f84d2a2e2ca657650c217df1657d92d972837b5952b2f0f8c32386853223b5d5696c293ab145089542e43572db21e20bbfc9e8814ab1379d9d5ff49d716da98696b79cc6403821609310eb407ee1c5ae4adf151a4e60f7053c4b029421a8075ee7fd9d1dd3745e6e5da9ab1d6e5aab80a5426e9c956fee986c76690f00f5f62eebd5fa82387fa21a6f8bec335980da08dd467a108b03be8000e6ee35ec05ee459fff86c42578a0c876b3994739feae4558458996a5f6a75edda8f65b040399bd16cb385038f150e79ca6bf2052265decf0c8c071718aae3d3d3f86bd2d311cf38135cac658a891c2a60d0e99906ba0e77fd47ac961b74d6ff30f96d3596e9e8b21030067fb60300d3cc4db52697f33589d1b7836f903ef7a574f60bd8e03692c0c753d4e6d653b67e216984ced1dcef6ea953deac6656ab2934223f0332640279c7623f8c929270e5b564d4ec991ff2e61c123203fcca0c60d1b7e0a715e22b1f27244a60e112907fa8a19a2cf209feeb0c059bec8460e88572df6447d0d9360a33ff400573642347f8a75163b21497ec37d1ec1321b18827d6d987bb80ef14f3b7d065869bc03c0d268c150dac7053cb83dce5cdc027f208eb59886fe241a2a92602749f673d4d7b0a8d824f037aa09f21672557da6b7c3912f7104b6ce0313ed0ab3041cb8e878cc238dfec8f4c17af1bb460de37a9f30c6500a5870b3bf7c6e097c8a4763bed121c82e33478075613d05042866ec7c692a2b83ab39e4b8cf17196a5721daedf9db0adda9e41976df27aa4586d31550ba7d10b2fa37d8f73c8102df53bdcb8e73c205d84500be47400282cac64b22fa26301e45441bbb7da1c6f5553addd9284d8b2ded4cd3115a82a91ec798eb17b23f22c37bf7ee1e781d7bcf3f517e3ebc00b7e03b225d51e04e077db81ca59de84412ad8b702f8eb627bf400ceeb789bea94648a079032f5f5aef856b08dbcfb189ea254cba1f3bcca0ca16b59401c948e112c71ccfd3526d5c5243b44877846a5e3d2cb7b3f0921c29047e16f3bb411898cb3ce7059543c60775b06f43a57befeb9aa7a512469e05a30d69d4fe61cf219f605d3749398eed5a13b45dc5c06388a3af79440426f0fdc600b4fb171a0eea90d34d8c1ed00840f3234eaa74304c997079e6350e9b1fd601b8aebe36fc75e5f05039da29a77ffc4ec106c73a8347cd1ba29e80e3926442705724b2df0d0b2bd1606b0c35562aab1b04f5bbf77d04866c0ef8699aa5fada8389a041dacfd086003af8691b3e5e9adaa043b80dc40429ef554021930b0eeecdbfc5f12dd1b2f73594b5355803ae0cef42d64f54306eaa17ded1b2e8b74eeb9a186d4a98dbf7f09de59115632bb701c1b4f95c0caefba16982d9e8962d098da01457b4971f67ac40494acd35305d551f86d3b2c98b590bc816b6b30b86e537610c7cb8dc23285c5fe573219c76db97aed90fbc5cd8852c8f62fddfbb351cf581cc48de65882ca33c57deaea2db64f98698922e5ca4f5c0ab226c5cc12d693bf1cae6a8087fe3baddd4eac5fe437cb447380c06424d0ec14adea77332ecccd23529806900e0cbb58ecd23ba41f427f233d0627ce5acc90c0a1d69117e6eda5ceb04a42404d2004c3cce4b46b301d0382d7212e463c88a39790af2c0622df774bd0cb71cdef21b3d2d2e2ee87b036f400d1f908119914bad3c18f12297b3da9c68825a29793cc779132ec8a368297cb8154010f011e665e2e0c1634843470d6e226b7405daa968e79a0b90f5a9bc095bfd240525d330ea1f3cb6b2ed7eb10073756fe6c52d2462bcfec943f52d0edff4fb13f79af213765752fe09e79904f9bc29f5a660f2cae3e698b9d1701417d029520146aedc722bb3fc4e4a77935617ea002a5515499d7b54d58b4eba6dc6c3a57faeea6bfac8643c07c5ad0eef12d73997e1d7b1408915c00f492ec9017e36feb4493b3e527f37fca2a34bf4efffa40c619dfab4a0e88bb629201b407da804e9d787fbd18a7d0cd5f72dfd83f43ee246c6e2589edc0fc56da46cc89c05451a04bfedcf918783685f76501bd74b48840806c3d96c6cb901dcce7bfa5772473cee4dd3f6fdb808fadc0083b7712958c309bec0bd66feb064b662373afc674cc2d95d31b7d700371df72e7ee2e1192e5549c95e2b5e145967fb726f8d79478fc32f7ba81458d1997edc3d09b1cb976a7db5e728e178297715b43c77a13eb9778009259e7f9d33765ddd38b521c4406e1ab25a6803bbd95cc8b19d533c8ed7e696bd2efc480850cfd46180be3961eb13b6a2635cb46664fcace22c307f0754e0b65ffde9f26868d51591add75a9aec32cc831aa770ee545e5dca8ae0bc645e7232e5dc9b3b935d6973a0c5c805bf879dfcba8626c50537615cb67e35289d4ca3002e1790f7d5baf8bd86fb1bcdd5485c01224ec3c61143d3c978af442c68d3cbe393c1ccc52051e3f6d7e609bc8fca2a33a5e9145a88446364190d537d7ad86cf08826f9ea1368e1498b366d0582724a77cf7fcdc5c5e9e304763f50d7969729aa12025351756de7ced71b2559cdcbb574bfed589ee4737fc87d9e3382d428b8b888822b6092f2b5dfb7fb854ce780337e72e21d6d30098a01aa70789af0434218ea77acbaedd1e35d1072dd12d9c1416f664ceea481659eb86119f49f1f6e3119250b20261554a46e3302932036c76440cbfd71fce6290787c4eae6404b9b213b5744891ef727f941aab7b4334b88c00611cedc343685245c988fe89d069dccf1cbf4c0dcd8679c005cac70c844cf1c96f16adfbe44cc44725504215b29aad3d5d64ad2994cc2774b54b6a603832d8c4cf4f4ef58a11652ebe664afb7793464e24e6640e1f146446686f3ec369cc9438b96864dd113136b5d2acb5396905a7ed5edd915cb3c1063e3183446d0f7c6e04cd9bd6909aa69241c4bd1836c995520a706c65f5de7311c4710f4aa9f84d8745f8f1be8eb681047a2198a0d23ea5d903c4ada9d39a0832f77c18cf46a800bfe98bcf9d93ee8725e29bd3c9afbf1eb3af15f7172b8f4bf743c97f9b077676ed631d73401d8a4c11d4a5643a8895774d4a7366abca58491451eef74b8468ff21fb668e4a4d11400fc7ceb3f3eed54a5096abb41242eee8d3b0db049c05050a12d6bddcb5df6d1a40768da3c42bedd3ba006c87b316c43e2df50ebaa198205c441d907c5041c988fa053b1777a03582d0f7e18c2e538ce98122165d369cc9dfed70994f04a6c93bc56454c85612677986d55ec659c01219e85899d9b994cf60a6b0b3e70ae2cf2323758bf9190e8cca8f547026df279dc7163ce6639d586cb8133608bae745fa200bf10027ac531d76885b885bcf335325d7fd07cad8e12f89f4a113f5b50619acd030bb58b813f1b5b2407c14adb9b60a4366e52076cf9499912a8e318b1ed4f0db2c1124d9555b17f1d70df8ee13eed59b785c669007de0bde74b5ff6278340699847ddee0db9a5544b1c0b5023433cca30c96ef3660b9ed3fd2cf6e6c5d6acd34bd815961f3d245696ca305fa4caad8402caa7e08908af6201d9713eaed167ef1e5db30d2cc892568e785e1ce9945849fe68e5f9b8c2f240e26bc2ef6e4ef6fa49afe86c8f2964b929178694d57a45163452d4657be8222ed8b046f9c0db71e31c32d9ebb9e65748c8b1cc1cd1fd8a93e07765fe89e6a57a43df19d24cea7044bdc2e8bebde3f2fc8d7fc3ada17343c06823cf91a061bb3b076bda1e1d5824cbe929e868cf0b5db8cf65a7d8d0c64d2616ff252aca63b7873b633d37c714636d93e00cd88646b419a6ffa3898326036fe5bee4143dc7f17848cc32f55d7c5e29c8c7a79ac1eccf0bd763a7b41f11938ccb309d3327bba6eb81ce83e4b95a9863be91e1d0203ef0bb825bec05dcd99273eb16073a1ed6047f36fdf658311ee957cfc35604b0afcee66ea05f8d2c103ea4290b0548edc12403d06d2e63a0ac33c7fb6d4ca5091f5be45cb9a2f4a8cee872b62a210521b971be92dd4655f5945268f6ada07185fa05084f0664e1ccba79a311d00a6e6e87ab0f4664561649b80833936e7fb5ec6f0f1d1809ce0a3f242be8ad450780bf224af4323e7870556b4e7422ccd627b21e73dd9cb6ac7a33ed31177fd25a1fcc5b67b865faef2b86350e018a37bb900a66245200e56328ee5ff8f9e79a2ceb19e7d8eebcf9a7dbb69f3d2c429eebe0ecfb9adab7c4f8facb9db3feeeabe04b0b9141243ba3f79841b0b518aa614320a6912f562aa77d79cddab9ba092b2cefd9b49065100def689d013b5b1dceddcf3980c98df141bbbc4234585d1d82c56621f2a9a5e7fec324b2b11a20367e3caee6bb66437fb9e20a226fda36a569d988e47c43a14e12c8d0da11cdf6d48c04bed76395748ee1c881cff0317badb498baf7d5656db4c2bfa86d9baedadcf2cfca17fded8e6734378865a5e668010799f4d3692a2364970a2eb5b89269c19fdea2ac6fdf4289264cbe4a8f871e99f112d16251dd1f4b5bf0dfccc979ae2461ae108cdf377277896ba68bfa7552b741948538b60ee55e183c587d04ad19a01b22d81588010e43628ea4167c92ad103f84601abc09a36d319c700ebb544e24859dc4e3aa5e9b0e69f3f305993ce201b291a442b369cebc69f5ddf0c9fbd174f00524ea6368bcca18a8120c9303af5c29545139bc0fde8d3d71436ad5130080d83c9972c647006e91e15d3d22da110026009c6bce13440a25b29b3b79dc2f39a092e5c509f2247661f88fa3769c080958079026ded3d6820e015ac2efc8fda6ae0cf7bba9b0e5ec756564dc227b00c3b42295b147aea57c68381b79baa2f56b317cd25b396a58f7e6b90604ee48ed06a3b5fae8ef30b23f89daa5391c4f378bde2183b85e6ed0da9aa6e7e230e12246e8e8ac365776bde6f885fdc06ca16f32ac55807f15223f242768c6be792547c703fdc3126b115201272a8692746e987b6d5d6d077fd111474e17a5df47e816bcac30b98e57c2effa934a20f4a09cf58e62f4ca18e16324743cbca1e26e73013cadeffdb4f60c50d7154fdd0176adaa5ec3d1c09a9f9798a5ca766f25eec9432a6f8b8882714529671cb58279c2483726621fec8090d2db8093ffcc39bd568d1f8a3ce412dd1485bfb17ce6e1125f5f9eb0104e36f547e72a31cacfa34ef6238416394ad31ae5b42092853ef6b589d8e795015483e9061d9314301cba55accff406eeb13f4c59684670b91da5fdf3da67574e2dcc951c52f1d7cef851bd3f1764eb83a9445a2a9ce541738f4f134728963ec3bbfeb746b1bbe3b7e15a606749b148c074d6a74fbda0b0f350fd5a1b370ab5550269ad85ff80af91f3876526b15cf2db5f023914c78a457823218c81549fdaf556b056dfc04ea908bf93d151c29ec545851044d6b905d4bcaf66837145dc71f9425b59405b138f30930649932502cbb865806b2628a17935050748729b6bbe8f958d398d3afbae2bc2c0802866cb491778fc5dd69d5558cf1232850f548a6da846adf5f5b0fe47a67f493115c38e5f723f97292379a9736975130ad3f3507ad4ded6c44b34a08bb41e2a3604bd26499135a8e2ee982c1a98fd4f26460cc049cbec6950a0b10e847f4aa006b64a936d836f674b08e360360034f38d047144374d0197de32784b4d3fb0e6d38605deac84ecb8d7cfa30fb04b3650de4e3fd85233ee3ea53dc659603ceba37d55e36ad69eaa4b947bdc3970189d72b377b19833c30165afec4c0de01e6d57726bf1e733118ee56d3802aff76406e141cd79e5e33ce93a7d1d909991fc4f449ae605347d59c0e8de00085ecf42f8bd25b90f2d8a3dcf7d5aae743d2d8eb830fcaac656b30e5a55c531caa90ca195db696e116b9af17403374a90cf9e24531d78cbec9db93e2d19290a679652708ce1c6f0d2ee0ca708d373f53aa9ba1675724daaaa3a3e5f5116ec63796684b7f36b1d8f8bc390daae1c38597b6bfb2fda81dadeb7358bc5ef7891a07a73b6ca372c6f347796b763ef8109287c77e44d09ccddcdf8bbb63cc44af87eb01e416271d73a4fc4d722d3ace202186274161da8d6b2c3efa4b719bd4f418edd606a44cbafee263b9614c5f7a2b051ce380c4268668d0b0451dc7d508f8a6bd8fd0d01a41e058b787607cefd2aee4cc214c385819b703f2a348d30132259eb216325203ef8e8a0b5f774ecadacfe6c8889849c81f5e1791f56a0252b1b95ecbc08fe8ff49483b755e09f670b6361787ea173d3cff3c881e16b7ae791c1ca8978a41cb416458a6b50a6d693bafad0d947649951219d6071b4e84807aea0dfda2722d486d6e5223b6f15da95911dbd6c3f80a3d6f2b15f3e6c4521ab72dfe6e7fa31213c0880dd4282cfbc202ff48da0720ed439bb403e3dfd3b10d15e79e0b5fc54dce33012e8186628fcdd3981c50c5a401fb8d7d19afc1fe674644ff939a3b72b967020217d57d621e2752891daf06a17b0bfac0ab1d157b664417b29668aa35272ba02b79f15e2b2c45cee5f16758d77d58fabc4842a9236d7a80190877554d689d88ef404cf4b8e5ee3d27c8b8cf5dd702995af12f2784587924bfb1afcff09e4d2b20413612bd82cfd52dacc035bf63c7a87ef4c91b61449e410f62646d26a44d338082d0bf5cc78b187973793f0d4bb2ff1ea58a984f7f788433f6b08976f98e4e7994e6974a08a92b0e01b38d413599a770553ae1af078acb37499e785ca7e2e70ebdd739f047aefe18ff61250e47a9f5bea27c1a30cccf9f7ebb08dd852e9760f1c545fbd936bb72c6d0a680cd5c346099628e5f09b012a9599c19f5e4b239a06d7de8bb8d43b0766a6adce05cc3b22a7d6cfdce67b36b77dd04895e7ca62651017760174dc3a408ce961fcf319bf213f01d9db930e3bea6e22a4a6925358fb03353dcc4f32eb0c9db100d3cda9f82ebe8532c63fc3e758c0263101ae4b56c966262032b6194e8350c77f05a2f94c0a7706f9e7c60f0a0827bdfcdd3157354c8e8cf4d99b9df013ec4198f36f615d59c634739aeb002f3382237ce888c78d7e4344722f87a92391d218fe62177516d7baf8b0d098994599c439a192111d810c3bbaff920d1be1c488fdee9f4f631a0d39a634ac0eba1e986eb1c11684d160b708386ecf11cd3062a80955ce7a9a1d69cb8fd6787cbd32971fb3a901242fa4281a3a70d97f20298ed0addf61edd5f3ee249f9fae556e4870ee3171c53acf7aa16abdcceb1c9645ec97f11cb66b669c2647cac8da897ac79f3d4e1cd5850860e3b689fed54f44532d9ca8bf9dfc5e3f94a386b93d902bb20611883588490c394bccdca56310d31ccbcef25e214d8c4f2c0d1e24fbb57bb3445adf1ff3e4adf5c27694a7eac6a533f66af38c4a4f3565e2587233e1ce36b069e62f9ca4cd6094cbe7c14be8fa9b3e6f38a5f0ce45df55b9eb227db199f81a53fd4b7e4b5dd93aef771ce42d57140db2aa388340bacb511ad19dda3900351261eafd991c992dced857c3f47bac4e29b46d57e72a54b1cd879251df7cd8ce7f5180715de4d822e5fbfd82ec9aeb5ed310ddc1dc9d72e6e53e98afd3510f89d25320d35566bed8faf8832adeb7b2d15dc1e3c851893ef93a9542374fd6c34aa8a7a70719d911b0ecd2beccc0f15ffc37b2bb61b9f8ff6b53e9c0de9d6462ec23324fb495ebf30026020bc7496b27fdda2bf2aff14cad0d45f59c53662139f04075ce5cf994c63da51b4e3d94e0db26cbe0fc9d4e55e5f7076d71e18ab7e0e4a9c77d9192b2ac1336972aab2369de89d73dabb87062702cb71004416cb9ac8fc9407435046b3caed6ed3d06d4b3e476439c7873bd9716c93dd2cfceef312aff11af2c00d76b4372b6b57fc6d459b4b546669d1651b5bb8d5ec9c17cd0bca76abcc66f7e2731b10be96b2025942c5680d00b114fe0cab1cecab39aadb5242275173a66d2fdc36e8f430a75aa7b3791ac9ce0f980f7b30a4b54451fa29be23448f0cfd7b76f6808b0b86333d5c2a34c5040dad4b3b5f9df0ed9ac379dfdbfa7cd5cdc3a67a4fefd88e848c1fd2108553fff7d95527ed351b8a5a4e546f68ec82662780991a14b5bdaf106ca1f63e7ab67b1ea5a819f0ec6ee3a864808b011344663f9fa9d1062edadf1c2bd2fef9204f6dac99d4f19f4838ae9f3cfca1cb87c2327137db831435dfa17126f73c0175a2940d1d1f7aa76a69cc6674b24e25c5d0ede937534f05b102c0fb9d42dca64a2bdb15e64d6ffe32606e2276069efafc104db06e901063094bfa4738db5a4a4dcb2d7b59364a9fc6d91ac8e278e271ba0d11d7265ba85ea9a4817d2434df711e142456cd87140a4b599c26eb04ccb0af80b9e0456340f14b5ce96307d015fd6b8b1a756da70e94790bdc067ee37c570f889d59f34e6b67422b06183bd76464c86d4db1c521d2d1ec8559bc7f5e29d8148073328e2c06d5335b0ca186a09ad68a0ca872a6eaef7df451aad779191f8d69706c923f6001588f725701b58e3fb67cd017044d70b4970662288c90fc4bb3091eca97d3936411aadd450bc82315b809784563259ce766a2689cd563090ebe3e355a7faf28e49bd443cc2e354215756ee903a3c497ab0c413ff976a0039046ceff48d3f6ff2ed559dd6bbee53490e3134bb9481d66db05ec8ba35c556fd7d39c584356bad406612dd1868c73aee24d303efad5f9340b1a23ec97980fe942db1ed5b0af031322c958a66d67166c450868b6887b351cefadc7e47fea239183ea38387f46581f3cddc34aa87c50e60dd0a0477bd5f552a00ce1db89837b005435e7674265439636f28a87c16ebefe4686c17ba4a2d0fee1a76644da11e4b7771ecdd901ac00e406e8a10d6d4ce3c5fedde009e124026a9be15d571e8dec9fc40f6c44e46af6d4e04937017f44b5a35f5a87b934e6ab83e42dd68973e35727a4ce02987808f1541cbe285e57004f551ca09e570e8c5d1c06806a8f7b1243f9d40d910f3a0a9486046c96c77c85f837f674d663a19e10e3908db257a172768469c6df6c21e6457b8fdc9f3378f67e3209be137147b9b025b85dd38630ed656268826b3ecbfe296ca0dd8f2e371e4a63995b4e65de186c799cb3006cecca06aba2f4aa7481902ae3ad165acfd56a74be3a4a29c2b588c69e2427b1aa9f7d27c1399b59f6b1d15893f9f59edc3e77d4c3484da37aaa57119459834d03bfcef8603a781a090267bef777ea307c95dac3c7353ebe8e6bd321d9ad70e16dcf42eb85f493175baf4b82db5b7f5c66a99bb346c7df6cbee631e6dd0b677580bb819c453737adaaba5712ffb413eecb91882aaed9e1cb433afdbcd620ffd293c53b984087605f952846f6918985d0fb5ac2abd5c34b8afd74f0207b2f94be455bea5a5d5e2d36989e2c43b5e4b437b49f06928dedfb2ad3a9e26d4b37308f93774340978d98884886314c5b01ca5e80d2f51ba2cb2db853d55c331c5f079329f15e770ec2094b73fe010c63df451268a9c863204d00dd383c40b5898429a7d4569113d59ccb93d27846b1eb8311738323c65a8bc993a01ae9ba53468506bfac6a152a5b6cc27e581df8158f65c2f24672def2a7e356b525e537227bc6bc445285ccf0dfc016987f6bc833abef5e9bffa529d078489ba02acbacf9ca345c6677d5ffbc2b2e1398208303a2d82fcc84394509e9fb9c482861a8d7fd9b240c7f335fba55f6c9ad411c0fed5223cd2bd08f0904013fc8b9ee78f2878b493241244158ebebcb42da3555148d7d7448cc2b307a63c353e237157b5c73d2d67e35ffe4b814a964a308cfb6926b311bc1f219c2ebf0e14f3e5e19510507ed92522b4281c8e5a71b804b9e7d33aea6f362d3309c828a78d78678591826e78381447f1845a0bae71d7a8494b1d96c6f3c0c6833a0544af303d8fbb2bd4b0752290b2b450186a2cf0c595fe066cc6c1a99e9ad2218dda2149d2a4ba57236d5ff9ee15ee94fe6658b2f06d5e8a2855105169dee3964e86d0413c6b02088b7ecb66b713229becd911e02a8409395c312141fa21f0a7850037867d56fe6d85b4a2ebd76a5eb7dce2c23a129e3f27832f08566def8d5c84a9970284c50afcc5a4071b73f6af42d09a2ff59d939179472671b6407c99f229599625586924d95b9427075847f1f7544d319d999c30d44d490225e6c616ed8d3cf6fddf7cf39223724bb23811e175c70060de6989c98d7df87febfb6edf7b8d903b1d42cf20bb3859b9053f370f1431c2aca12419b01c0695ed6f3bd1d1c2c74bb2fca12257a9974fb30db90d386db75ce2da781bd254992d7607dcb8177428313ea01d6864a2b138c43c6e16143c6cf7766f25c40b9d798adcca245114b7d992c81ad6e0c0625eeb285eab2cdfe13ae2992b3050b435cca4bd2546087439da8b68ea87e8e3801334046b761916f94654128a74c2c389259ae1958e076dc23bf422bb8ae42392eb127470e7fdd9cdca44baa0fdcc5fbc71f510c83eb556598f40d5d6485ff3b11ecec69875b54541f4be44cdca7e6d8af8b862003a3aa96255c22ebeb35bae60dfacdff9d0cb7e3e7331df39bb8ac74a0aa225f6f7f455c076269de510e4dde73aefde81ad8f5012ca7838102446640ff5dfb0828d4ba569f6ddd731b16b91a5308438825f71f44133b5c344addf18fbef55d5b9737ae708f895fc7471a06dbf6c5fbb5022672ea13326d788f117165a2bacf036c7b985651a161a9c79c4321e216ac88a584a7782429ebed82a0cbc58288b35eddb8c646e7f6c6d4ebb654f390bddb7ae0a56c9adc7df72a82c2167cf397b31a350e77ffad6144e9f9d29052aac7d1ae32ec23f4000b97bc55f7cd829102a1e7e567ac98ff6664ff0dd2779de870ae87bee3aad00adc45b2952bcf253f77351f7fba59e163b6ab522ba36e6811baf64869e2b9d9af4218d5a9030036ab278087061154f6fb6291d5f3fcf2147a0e687c5d9985a59302bc992447469ab314fba3a641a722b45621352ad1c54d7a356c17a780c89f46e62648ce4c78e310ba870534c8feed12a9f2f037b90bb142134e1c7faf689d089526255b212440f08bf59830be6943c4ade2e3ce3eb637a0e8b6928f7a9c3d319b880000f275aea86116704bc3e338859af060354ad7052e217b6c3764f8527dfdc58c2aa377748511e7c3caa42951e79ac50ccaad81fb3b3bbe3d3ea3bafe1bb73fcf8e0655389c5f473b5f1851a07669d36bf0e842951b3ca9ae8ef2b8b09b52dbbfa2969e1893a56a9944d7812e860877122fef6f7ee21a355bdd6b95c85399aee065a79095264e24daac0d0fec2d6b04e8d88c7d23df783831e4080e6a3c9bd81c51a08152db42174dce1556d9a1763367f802b833e493ab7846d7451c8ca0293377602eda84fe1d6986a5b9ee84e32be7d0902a9baa2dadba1935fa6b45363d4b5d5e13424212a6a5de65c65276164e6b602beb964f7636c3d1b16258a721bca0bbf6cd2f6c8f50c4c53f1831354665b9539a94c5e15aebdec3b2291fc47a10601108c50062e3d3566b0fd890c563c58ae16c117d4eff2ffae355c9410b75e5037c55e6205bf4a490557a46a04e969671134b47b127377712da856be7a12b7ed9e330a45eb30fdd5b68dc4c1950cb3ea5d86652127c8042a6bed80ff519d59a7aebf414dbc2875d0830f4d49ff1960103770a355a8c73f34c52df1a95b39a2c523be757c5f5c859468148623df5044d63f362013cc843dbd8f1251592e9b048d6259825b40824a80612af2131705d26833eca70b3a1888433f8f976d68b702d99c81dbaf0287f31538120eac829ef3c63983550d3c42f0d92e3660867e57a5b38dc5027667a61ad62d18f42003866ef52aa07bd55b8a7461167d746e4c8450b8af53e1fbe93d3ce65cd4f5843d1959448b73f971353eb99afc9493437ab91809207f9447f17abc3d3ff5fd75475d62487f8cb2481b2cb1e1ab0312790afa8f681275a7d49281e89cc7091cff4132ddeff4c7c7dadb009cfa917327d85631363b24913aa96b8cb94019a6e0bb5042a37a268820dea2b5a0c1db60d7c212696dd6610509e97f0b4c2743535bf717c9a01520e0b91e7306967f51053c6ff8e308540dac438cbb4bb92caa6a29bc0528773b46e5e551ec192185dbc8daff499b2bd4b99bfe21a41bb4eb67d399869e9aee245efd3ba1c36ed820c00e5f6382fee25e4b45721c58da44c9071009b6ac291ff82e883ff621e914002bf4bc6981f677666761cc25dfe26e293864ba10f854e6c2fcfb8769d469aa82ca3508922d81f377461904f75f1d6b66b421727811032b8cee5c501b563d4111213670055fc5622fec6ffa8bed94600e3fedd5411195493b7dd6a11a44e5dc8d97ae610c112adb16f9340fb4638c5cb802e7540594605baffe99b3e9667877b0b202883dfd9bf2d5a8da6e3a3ed4687ba55138eb40a90e8b4644214dac0d931901342a5df2d406e72b001418c7e86a518089233edd83fac6d91009506d3196476c06ea540cbe2a86453e90765736ea3ce2c53f983e0ff24d0406b5d74a34d9bcff1e14c078b17637d98219709855eb640ef928be43e785926f44c5933fe0ffbb2b71151bd73e05f69a9cf872f5971ca569d46a2574e3f5fdaa964be8e1f06a196dc819798f645575335788350df6e9c9746cb08e784cf15624b1bf5bb20e38cebcfffeca3b8de965d3f779fdd36af2a5a307e3739b04a530bf9ff7dd57f6449aaaf3f188277fa7b789f8636e073a89a76f856c4e2649261c535bc3c6567f0b8e7a3ef18efbbcead55f848d600dcb7c082dbf668edc2befe680b9480d479eaefea59bc8a88e71902331b418f03d7c7038d68d793dacd77cb85c75318c2b9fb885aaa06d5c2a07b11d4a0bb68885c2321eb10ff82b4f4bdf5d0dfd8472cda71b5d6f32f8d4f6297aa143eae474d0f506232e37303b025fd6627b1df9fba10bdbdcc432cbdde8c1f5ca6283f03f47b5e112b796ba4e9743d1b6320100d2702b8dc64605c1399dd72324e9a5b69d30bf7525128a08afc5286e24f7803978883630b04dcd8bbd622b958b60b84592a524c7f4c780921c0d2b914a6106234af3194f4b5eaae741a79eedb3968666228728c289ed25d6efa2cb67a455aacf1f9aac75d5742451e1a31397caa9f3f394884affc8b6848c1cf6fa58e95cc14edbb96e6ab4fb674843c6a5cae561cb05d193d39e02b03b92742f77f5f8928e673288fa677e58557c812efc956c1b39c482f530835dc0c8b79e0aa747b22982ddf7fdf6f9687c20afcc44d88e4a5b07a12edebcfb8fb4d758102afeb1e97b9efe0e047c2e8e6a59803b6bbee26f58978ca93181df5fe8b01a91ec03b9e9b4a5e260e93ee9a567132ed258ef1660c74eb82c9a8a0ad2fbda22091eae266d48ae73e94b8534b65796d2f6ac4cfcfeb4fec54c3c6eefbef2e88463df3d4cab038e8b60bbabc6c977c0be5918ca284a16450c43a01189d64ddcf1a8c38684231240d35ecbf9ffd4b0b3927f9b3a4b4efb5ea14658a5ad4a7aac86536adc93a0bc1b435ac0b7ab7575a58cf9e1ac410009ebc064aca1c255890659011c470e59ea4a82483b3cfa0a2ddf8b03d4f70dc29ac04d3fa093e1c4cc234685137460274a7df6549497ccb6a667ce9d08a04bd819aedada5c6519b0f06f8d9f4c50706610c9c611cb23d69ae5bf09b1b3c1d40947948861e789f6693ffd2b5071ca1f9e209e34181859a10bfd015c59073d3fc8b019b90636646858b0a730b80291bf7c14072a5bf7105934f427da5c15b084b149861d2da20a54b90b6a606d9559d65684c0c4f62cdf425669337e0091ae7f3dc5b3d094df1ef858cb2cfcb5fc87ba04b1432c9de717c9b2722e8fccb02b432b63d36555c3cbd77647437d1d451380bcadb54ea93b27309199b494d70c38333038e7e76e49754dd882bfe8924b6085ef33f5224494e40184e4f23d277074a0febedfb854df2d328d66b90d8d05f7c8e5d73e6cbca5d169f8c7fafe70b74c3508f4d3d52cf778df93057080a2ae425b6f03292f2843400d332ae385b203cd2ee2090600f0edfb9ccdaa49393d1dc4ed6e929b0378d7b052308da39b1f1a298919a620dc2ccc24e51a73aa29b60b52e9cf5050b151b3539374d14ce1687e6325e4d9e8cb87ec4aaa6684b48790234770ec6e0c3325a7f8235d393500443535efbd4fb0089d1d8a12e73a66ad2913fde09834cecf436422a6e38444119ac1e562e9a2dd0dc5fa3a30c0fe53d8dab67c61c9d2b0cf646c79eaf7a5f59f445a2e99469dab41c4793f6c175aed1e3bf9171bd598d49b099fc124c099337018f367218d66a685855e9dfd90144baa64f6514a37ff6b73b94d0a9951200328a37f911348da7bbe1e95078048116308d8548268a3b4d74c9416a87a61347323695caef91e87de8d83a317f32ddb910125b0a453f9124b27de4160b4905538ffbf49448407367f1df85c711f99bf61a3e211111e182f8cb3acb09c58b7a84874fc270c71828107129de45a79e151f7369b56da72458e4791a2af76be9c620db5afd38cb59afaf52c9bafc25f65eb892e0e4c784c6b3e7772f76055a3f0badf412c8fd7f21851ddfed042f0ada19df3564d4a64324c5e872e9ef24b6f763dfad359bfcb478618bd0a61b5777ce3d799586973205ccd99d315e69c473789e892f1bf6f310f47a1b48b5a9ebf89579dd14bcb78d11988753d63ac128cb7e89cd3f0018be6c3a5a03e55975fc4323de31eb1e96064ee086141119558b4122b96889a22fee9668ab05790a1cd2bfa82f5fc82677ffd61ca0c68d1e5d72b67f5dfc7593fdcee7eb35cb53b33b8299b60e2a35e0084f549db4b9ac9af3aee9ba1028ca7ce9f90342d50e3d1cd4382b80146eafa0288e22113e6fd1d313d8f64f9907824f3fb217fdf43ec14a39667f031447451052455ea82f2c764b3e3a7d96233322e9498b54b11b18fabf7a9058181c1e4f1280d16add3931587f488ce5435c4b473b5e7cd02106a346d8db90f33dd9666b51fc0fa51153c1d429ee793ff2f3d8bd1b57661009c6e7e3b9f1ba2f71ce678cac758c07b8534b7d84cc6adab788539a752860af2e4f61625cff080014be4694df5d38a234d77504c9b074d28a136dd3d09abde451df91e71ec877a249af38d39c6be2536e2b41bb5ba8071211cbd150f0657023a0395a4a4eda46aebbecb9836caff556273fb9a6f438fc7199ae38de2f13f30805b6704f1a494f1e1b488345cfeed0ffdfcbc5625cdb4238f966fbf4db86d9233a2e00a7d329f63e0a572df899f5f7e8a5f1c333f79d32985e5f2afff49d0907236d3f184bc0c0edcabc5f52172ada2926b84723a9b4ac37f45d392f8b1b3ac0c1cdebec151288b377c499c6a25478900a9243b33a8bd16e2e1ff624e8221e5665f1cf01ff715cd14616062fb04bee4f80fc4197e00c8b9f43929129593acafd181411a4c43a5844b24ad87422db01b34732469ef7980363d452fa819ec9e571bd8f86b2e140d399225b08df55ff5658537e4cb75cf7fc0d2d60831a2c12991a7f73a57a955a7699d6acf8bd2781c93fafd7e08d6b3a9d4daca4c5b673cf36b263162836c573c352cf4af0a2ac5d2a344c2a4bffe3a7fc0d7808177767f8a27096c0706f3b494aca4e32ba8966bbcd57e71bd2f6563e1481cae7b447c4b7954d6dbef5366277cf27dff1ac5acb9d77bdfc0dea72d59ecfb44a71e2b7c854e419e5f8506da172be1e980636820597c2dd324416d824d49cb027d0abd6e67ee3f18c2cf8e14b098d79b7937f98f9bf76ac33253664a11dac57f359e3edf350a34608f465c19ee2dd29a73c051cad27da192677dfad9f16dcd8b90d5dccc6a1d333bb184aac887b8b10569f2a22f9911de63f657fdfb026dbbac06942c4cef90f4d90d6bb10833cc86b2d1a79bdc8ff745ba79cc6c0f1e0e8654ea67c1593cb7fa151e21081c682106617627807c25ad7dbe5523b99f1652d17036682afc74c117b6bc045e005130a80d941755484e2f33aa14b7c2ea486dffa8baa843f1b6cb74def8e911fab05abf0f5e1d7a8457e3a90f093844fe1cfad57d1df744840855d7c31d338694356432919dde991e348bc66eb56b36e7365db844305a53b168a8040305a740911515240d2684bf6520738984d5948a02f5b96272c84d515414c93804ac013bb1744e82dfa29ebc9a3d85422c6df9345efee28158b9adf6d59c013af6bd68801aa84df5ae8ae8f79aece15ff538065080aadcd8ebe0a9e7f7414dc5a4d06a779fb140fc6b1470eccaede97b42e9c71000d86bd84eafe85de90434ca8df495c60761abed40a867545e95b2c12e6c5ae09f87faec1174e9e62b79d1d1dc2ce09c8668940f8f80759a7933100d3b7b68e8f5c5a98aba5f771d7d4498eac1cd1f87188a4bec8efdcb4ccd76006e7207bcb724410da8d54fbd847bb6e93c298d2974850e81adda79aa3878d123b798f5d0cfdbff3c2139012d50ce5edc480d666d4eb6b97108e16c711667a1e5cc4125741ca5c11aa1263c1e56308643797337458b23372dada8a9c63e3b0afce242d245cd744ad046db81c1e75d83fc7adb820b95d6cf927482a8799b3f6370776de34cc91761867f0814b085abd7a5d1f904f1d393bcee2653a5ba1724023f9acb7404eac4316716b815f8b4dfb9ff39d8baa9c6f91e567d5d8ed4a3890cf5ca22f2a65da93cc9b5759f2dab8f964e1c20070da5a839f57edf78fa9221c2e458ba2b6cbf13643bbe0b73d4bfb4e13a25f98f453e5ebd7a1ee63f0fadf889b7ebe29c4375d40eb148e448e017a795abd429c4cea5768fb14c0ce526e8908083239554f7f74069df20e4d864dcc4dd9a1d49a015c20d90291ea150aa97a27afecd00f4fbeb1e1252b41336304c43399ab9908ae0f9d303e7d20fbdac85efab33d5d7225d27a097f84a5a680c3b96fb01afbb0886276847b7acc7c19b05e9034c05e896d3151ecd685ab3d65395d2cfce2874f61903bbde3318f5cfbf9cab9be8fc03551b62c4a486fd829d8e66d4e67bbaced0cef3be3472d7bf069d197e399e9372b67f2f811658b82372610a7786fb9720fa5129670f3d6c616709cc0b52b4592df626f06e723b30ffe63b5193eb0ba9d75de2ba4f14b8042b86ff6bdb3cbb0bca782a80ed1ba944e9128589890819d3939387436aef27cfc8ede8ead410f74c0b296dc1c0115d0962589e6c7f36dcdc4b6e76d0e5689b6d76ae35d7665f1f0b08ccaa968682f58cc4aa9e6181f807e3dfc8d5f6b354282c7162f8419768d85325e3df5190ffa6c6b3e21d0fb5aa5763f48ed099319ca66d65dd40e7f5cde6aebdd37b9a394b19234bf4a669190cc1e2a3e5d9d0c80c4f520bf156ea45fa640b63c31b567c3d1d4f7d21075ea97108f82106880d2d4743266c1c7c4f2f52e0600dd9aea1c402443978d1779fc5fec61ca17545269d67aba628ed9bf90e74879809d42e01b050d88f744642e1b3a8117abbf52bed706e18d5fca727f3bdc5504f0d589ffff44b943ed63ba711d628c3f6c969e4973695d119710e2ab56ab803e27e49d1d3a706db81f07f4745b0fa9a82341226e98f0541173aec4404f04c3447925eacd2f4bfe215891a96cbdc587fdd7fd1a46726b453be73ed8e54baf53a352a2add5cadfb5d6091741df91c8be1d06638add58048d0b678da585e5bb64e535793f705762f07d81ef4c0b64921526634d99983d48a980597873339b8c7223ec0c4dfee7e5f0dcd44d7db9a7b2ee2a9a8af504e67d1f8ec8a4362cf1187c5b57a52299ad405ee5b1014ce6cb08c3837d661b680d3b11f6f141d1eca2330b06e03380dd75c688247aacc5c36c7f38e40868aa93b1a198902534530a1bf7d3c16ebae59eea70dc386c9d8ed25675a67d8297860c8b9d0d323d1d2673b425971ccd105da518d949c881ba00e561c9bda1bdb56b2ba77f1da224ef685f0cee81d036137eb16e28318a31759978b61974cf6074ba2af327f14cdb70b0641e7fd7f2bdfc7ac5f4a415eb94089c0b615b5c73aa01fb82e56c4b6a81815217870cef861e6a1611cdf0069c9a9d1f01e50b9f7dcfc10f49e176635ee59d1cb95e8d80e6dea6b68c9f4d16925a6a020dcb1caa6e9217c79a3600fdec3185558496523983b23eeeb76abc112bb68d6a4a2eaf2db03783568430b4e2a2aff9a6368c4213b3a7ae506eaaacdf20145b6daee29bbc6c1d2616dd56a3a5875e1bd94a726eff3468fe8cbd263b9b420379c47836ad5aad56e97253d9779cd986fbfa90aeec8d379024c97de1eb2f560e49c5c10dcf3d190f4f2abaec56b71c42675a6bbe9f390df58a7171ee080e192c137e9a4f89dd6711d2cc65aa6e307b4e0e189250d258accfa3d88a423cbc4d3fa6a94f6288366e4875246146aa278c143a9ccb3e8ed2548f19afb002c6c07f5f07cf26cb1a4f4a8ec47ec577f78c2b3e9356c4d7978a61b1033fdfbfe9817e2adf862fd7b78790c7ce8ab7d324baac082253a2f0164700e37ae5dd19180b9a70bea317d5d6f1eb9bbc1ad41d6a1125690fe8f43354bb6d399acad01208466634d839e3e7338c89f5830aca5017ea23887d291badf5b0cacfbd146db871c5c6995cdfeead2ba9cbe7dc5afb4698b441e0fb47879dc49581fc6e81ae31fdd28753d9173226d6c044190598b8b21000d55ab79f3213bd80c130bcc08c0c9ac06349aaf252f1e3253323a612d982f231b5f31238dc2ea91f695bfa48720e49c5afa88f1435a4e1d777ba3b30cd6710e408569a65836b0791a95a286b70603112602a602cd76277a6e8f31e69985d12f9fea288ba3f09fd2d5382ecd7891ce314a3bb921eb366fdddb9a20cf8602b8ed67d62ff27e4d1bd5e93ca671548a70479ca3c9a1bb1992281a67e21aa47f071b3e5226d120a85e0ccc03ff8f8780d896db5c1bb42d151bc16836429f490fdcfbe705a1c85c8c0a99bd6f77216788256e27c54eab13e5423a6768a3898933d4d8e0c6e4bdea3b3087fe7892e5099c6904cb909f88f4ddbc7d002c050fe2d02f203f62ec57a532dadff2410bf62741435b4f65dff5de710b597ad49236d1dd9ed4b259dc87fc3645358e70da83d68db10b30ba0bdcc53524d07ffe95edee73db954084f7d34ec7314d9222e05f36fd0d5b767f2d64fcc212180793a93efa0935382a38800fd5da66ac741b2bc5c346abda216604614e022481dc05181885c3e40ed1561dbfcd3d210a5ecc72978b6dab32284dee0675f0ac85bc9a37411220353c6b760b9dfba8eac04d59e512754ac8f45208a9dfdc345198d1baa569281af3528c7f36679671a0b4b89d0a074945f84a27210492c94578495130ef5c41167d243ab528b19e39ca25496366a31d58a963dcddf03bd44c355ffe7e6e9ce587c110fd5cc11728ee92bdb7a120e86f52d5fc670e20c54e7b79474f3c33ccfa0688cb847b6e6d2fb5bbe2369d9a691f118cfd1586f906ae7951af79ca9a6dd3e63851efe22b5324a804afb5f456055ab574c057cdf702f62331d97c785158366cede079be1c1c9ab4a153990d87fa67f36f777f9892df604652fbacd51b7ac3eaa9019c9abf3aa5c63ef805828d6768a244755cad5600f3176dbdf4478f7ecb8d573e8836055131fc0d0f567a17b40ba42a13783c411718ce97b97ec9f76f6c151370a9b16222ea247c7a7bd972bf2380c9da7b7e0b7ba43c6f9ae7fab11fcb7d2d87837a59e1feeebfa5d91561e182f22477990d7aeccc74c9d9807ad4f437a3a63dfc0293836cfd9ddda59ed8f5b82a76ba256c584af64de82a35831aad9db1ca704d83938ed7e0fc800c1f05b3ead6e7b8bcbab38ff4606c77e5506d77bbe8285bad829a20e9cbd69da4631f0459567951824faf9765f1b8771c07a620320e25dd0b682d2b4883ca83a7044fb74ee822e2084d518cca2113c729bd8716df3a7b74a8b43d6f317232b04fec3672c4e527c91157d9cfd95ab5b13167a42dfaa0c5b7f03aeda0b85733316543365aa97f83b462a043f310611496dee3072a7fd207913270463b6bda0a136bb2f32b7a5f9dfba756828a03d5283d174aede3e425ea8841134fc78337b07e80d53aefa43dd0bf2eeadc43fe41e7ccee417db98070c617cdbe631b9baed00a73eba50dc1cf66d40735c13fe8430a93a036f62629913ec1a91ee0a15f18ed24f210ee8c17528ed926e9fea112e3cd51f6144cfb2bfff9d57e183ad23f6e9a1b882cedfa73578e20fdcd82baf337f5a89694ddeedfbeb9a059f7fb01a430be1dc81706bd6de1cd7cea933b8d46f4f6c027d3f817a53418eaec11bb39c40424097f7621a6603bff4de2fdf1ad366a4f864398ce6a6691dec8472924e583d5cb0c2b0d3c1a7510b6c552442ae4cb9f53f3c18b3166f78bf5de88273c5811cb5621c8dc80cc8e05523d14e682c49e97fbd9ef90d3d04a369b10431e7cd5d1f761c4def4dd48f04b19d22f07e45a9fad1ba2f01d9b72ecaae955ddecfea7257ec7fa0c25e90b01ba6dbf59fad24815a85f4ecc79663e19aa1ed6b0181ea29011ce5f3fb0c95376eec004446c8ceaa8589e40cecd9ac08d4deaab6e50f3765db71d1fc82706c402489bce5992d4e45f31fdfe0334f76040efda34f71bc67228f653381dd0151a883f9d1e7a67675d8dd51967f3e0c79052e139549fa78c016da936241271a56afbfe51976a9045ea0203a24d815ba92d7602fb5fd92702a24ee3405d6fa7236a8e9aeed3dac2d81730ae027eed817f74cda1efc60daea0e2144f66b90cd4b055467f5b58ced5db4871efec666aa653161fb553cda8a61e07ae28c5ad271f64a13ce248f6f67a6615e0d92aad6aee2cf6e2c767bd98b9d121935ac18742401bfd21f7a0f84d45286b3f3a0054782acd8bc9d2ef73a53bdf8bbf8604e27aee4723841bf3d286be65365c6a63321f121dc57f9df2f9499c1fc29b7dade388a66cac947eb3cc40d327164c822c99d1f57be9d93d733c3f0f3317bb97f5203c1a95c82605f3f1375d3c418f991c838066fa2f9cfb403cefb259ece71eb6f4d710ed5792eb8ca59afb1ae7f666453798c5ecaf38fd7c46aeb978e30de753e0512acb866c4f72d2a8c455c884c4a3391941e900588d0580e0f4332f4057301f3ca6ca67af6576bd98c7da26b8ebe323fc49c184b58b77d440a0d5ea872315ec14363bd82a8922d470305ab7fc4728da4f262b3b4827713028f05013b9e70d686dfd43d49e903583af8ef5cc07d0e15377d0d87954d43556b7e5191edd449b99ac606fc3f0dae3f67ce714cefdbdd5f46dbeceac6cbc8141cd5fb9bf3768405d02b62c352d012290e608ff1fb8aa413f097473b8144e930674151f9fed8417da16b904468c4c50dbcc0a7291837601d6f8a98b939d9142c0cd14bf57b3bc24bdfbf147e4ecb3e98890b5215b6fb62aa123032416a9790654ce1e64d466057bb197cd136168d8600851344f1014d144d7d01e8990ff23988eddd5276ab3d1816a702296c084c773b90a2379ac6af9ceea619d5a3c8788aabf214f3c9ef6c62e59f67ff9c47a80dc4d53eeeec506edce028eccc69b2e3be577785e9db5704d41fe6831e99c0aae7df3b85b524df487a86bedbe532fce79c6c3c1f678113af2a76c28b943880106ffad0b0909fd4aea54680b0eb2facabde7bdcb902154a9cc4989355a1b20e81b437daf851e8b7353b4bd434650c9f852e6beadc2caf925e053c036381895bdab733d4086978bdcebe5cc3d9dc4bfbbc576cb3dd6cef29ddcf36cf52ffebcca538f343083556d3ffaa43c131ffaf70ce0b0a22be7547daa19bdb25596bf8b2333398cd8e1c1508335c9f8be29675c8151c3dabc68c2ec62e5c7009a2ac94b7f0abc4f66cac91e8690e946c8f7dea6a01a6f4368201748178545a7dddce41532712fc210ffd42f8778f370ab206b5d41aea14dad44cc23dd8e052992aecd7459f6c92ad1abf38376587050d9f456dc931a52b6758bc7c402ec890adc4aca825b6f6f423a11fc7eceb41bebfbcdd27feff566881239bbc42b214355f598dd61439301db742166649b9b86072b6270ca2e402f1bdfbb802c9fd5d379143b24536eb3b860c03e9f274fffa7a328f1dcfe26aeb7d8d6334bb43b30faadec7644ad8615834314780ce60b620c2464bb4a4b28474b3cba70a8be721105929931870a0b19ee6ea5b47cd28cffa9a3c961ca8f51ee79bafb252c31d4971e1da14063390008fdea2166bee0899194f7e908b01349a14fb668b30062b889995d17d32aeb4045005a1ab70217d7aa46c3f3dfd2ed99fbe5af0b2ba4c8d1ddfb87b48c1782e2d4cd5f0b917c04e0de8ff2443c3bba9d163ccc9201b47e8e627832f3764865e94e9cb03ce57a5b2faf2e0bc7eac727bd2ee37fbe12b7acac9de84d94139173e89c55d0a22a1309f1a81ef6f642ecb0406df8ff4ecd8b33f4ca7bd68bcd6f810e1d2e71991113f9da1160b4bea28f72a22da9ac6dd5bbd3c2cb0fb8b443107233ed87601740c1632ff143c54b6c996474e7bb9a93f3cdaff56a83ca55ffcccaae2c5d33f5d9a0cb22e8d49bbadcdb991b3bd307ab7e97cad722e46055ee9f6b0ddab4ae1bd6e0e66d5d0cb8b1d60a77612c96b9768e84cd6ae6b214f6cf97d264ec895804233100fafb9a3038e06f0d2d306252b3097066081771a469a17a05423f3b7551658b35ea4a745255ced14e87e95e0aee92aef019f12fc7210590c539e94b578a803b29a9568b66ef3aa46dccff774a7ab19c601cb1e6b9659cb0f175e979899bb023f7510208485112401781cce2ea16a686e773a761425bb754b1dedcd6a825426480a5a122faa3a41d68f069e5bc1326216baf270aa5670814bf8f563a29df6ac3b675f3f95bef72d21638dad3f4fb73b6d7987c712c1289309233146846718c916662d47ee2cff1be9340c084240674a0a1992c992bd1e859f5e4f6adea1704dc3143e9f63b4c0f76e6db29e922a5a15caa424359418c4368220d31ce10d7ce945bd7359ce2c5e43467572f04dc46711554160e81945ca13e58860edac267eb9a763948d18cbeda7fdf843942be65edba1b0762064e17b7d3f93b49032cccce7fd47da3ce097902adfa5a176c322b92e24a49f856ff2d54c0bf175c789500fc1b3547724d6d3888a9fb84e70101839a75d4de75fabe3c4a5d2b7789b51fee9357e032d2d6cc3ea0d1175d145ee3c4cdd6e1299e447a2590c58b2eb511db4ab6df1fa1699c0b1f58888c38358523a37e9d5e32b0a87357632360e3cfb5b661bd1c48dd3de888149c8c37689c0d39a777fd806dab67d881a6d69efdd01abab018a6e7262777e194ea5d076105fccb1067176e799e1009e06a3104d1d4618df0876112a4f321d29a0016143c6e4e1c0058098852e12c3fb85a214b4ea62b33824d64e4148835c868ff774df4b56636be3c5d99875b72be4d6ef9ce5387acccb7ac43a700487e4afa596e5f64b07e46b161697871da5ed63ca93ad515400a64192b7dc0ce2d640e94e92e970481c9764b31b7071be77f324e1f43b6d257777474664a78e444475d499d9a0f6b690c37d8996b9d4bd5292009f9c24cb155815048b96adfb585c4846ef2b9e424dea91e4a3291d09401df03fd3cd6487806bea6105c6b7162cf139ba87cd3b958ce1ce4cf5690eee86e2fa489cfaf676cdc122108520b10d118c0c14200bb7f86891dc98b19765ca7da1b01495fb2c70220e720db5f762fe2fc1c9236b3409c03bd2a1d99c98e8c7333feaf826aa53fe797d1bc960fc9820ab3ffab9f3cffe7c10fe818d3278b7f63401db55cb5a6669ebbba6c50541b2db4bc909b673dda1cb957202094aefe60ea5f88c681f195d09b5a0c8b895645c66da57f0af9fab1ccd5d991eac7605ecac11c860c63670c73fda5cfd155e2e6172abcf60ad8c79169f13220aa8e8622508596fdb3db06cb6d26562e5373b5e7ec37e65c827ffe890a2141f40cf905c4f6542c0ee5b2dd84165cdd0fc44d4521a8f44fe39cdc3e664cb06b7fad585aca2e06918c49c363c426cd811c6222539f5af7264d56aa6b78e1297c64aca7bd8d4a7c06c1ee03c4e2b2584b37da9cc761b634fb4d91af7121c74707e76594fadad3f5db8af99d5016756e1c91d32f6c3afe5f86bea0132dbc0ccdb9dd50d5176023921e068d546ea61ed145993799a5f589578d1d1d20fec98264d718ddc830fb3ac252f6b55a76d280ed9b8e185bd213f2c0877ada8d99a998030dc3acce737b2f38594ee0f28a6ca2b5d1a0e1e382af8115fe57a75c819fb26c00106ced0b34cab1fd060e09e2882b3b045452ad8a0448d6658df457add00756ca2cec96da6714ddc343fe956a689b29a80b315270962c583a5c7e2181b6b25eca818c4aadde268cfbf4334880a72fe9c360fea4226f3416b13f2db99410ca074ca9034c4f90cfe6f287b0e9079ab928e3cf5c1f99dcebca9dd9b9a02564ddf07c00d98dee81de51b80caea802bd6e08efd3d655611c913d8abcac7197f1e29915f7d953197cd60210e510ead7e017547fe55bfe891402889de90e360d8b036ca814e9945f8a929bc229331a7a87fe4b212fe7dcb6643545bd6d445acc4f6693d7b4367a8e16c4f6b68ef119ade3dd4070cdb8cb351b022653de2f927237e40e5e2fb6244bf57529052f050a2f0687a68d44995b669eeed7c86fbf8ede4cdf77048b4b0d007ae2009b8bfce5c1bc212990ae63163b40571751aa11a251662ce599f0a3e637a43c5c4f8e94f8ccd0e2df35d540252d78f6ff80d5653eed8346af0908401b14d26863cdab7e56c7c11da52928568dcaea4a981bd0cf8bdb2cce17e938b02a9d30454f04a9b3acf410127932b673748ee3a4e4d47139db917773eda0cc6209af06fbc2002da5b8bbe6146b703c088725665d0ae227821ffd9494ae70ceccf58ecadd1c32361c8ab3367553ef41c2a25631183a5c4a6b6117a29b8825cac6d6aa458ac6e1844daf62cb3d00c32a9ef5b3660253b8f590ce7224bbfd54e287b988c282ded5dd8545898a87eb2b4ecaa89a607de088dfe7b037a0a9e865fa2b05632d54b0f6804f5ead3c28a1feda1ead907ae1f70c8ec3d2385d7755f7c5b5434fa0cfe4c8b00383df231354f79b01a11327a0d966dc2b5b20bf48056e4a94248d5225aae66c77f4ba031665c98439ec285fcd195c8f51c215389f914e697679b19220a1cab908d3052e408298037fa742871cd0a89ad2a145ab870f2b21d8329c932c23aca429592bfe253a98d5db5516f5bbb1aba541b8f697497196ebee79e3136439c248bb86c937a37dd499f96ed435bcdf17a6b14dfb4a15528c985cf189bf479b9404c19fffa5c7c66c12bbe215c9044a6c03632d002750436ead461ab50b0b2098805ba74773f138f7cf8a4ca63aa32b046a5795b0a92ee969aa762109bfe622d559f5ee62e5ff4ae4d60e8bf797eac3bdd08afb466e88c4afd2f0847a2383589d7c3c283d73291271787d2dcc3cc6e5bad2b062aedbdd37378067db877683f98808fc4cbf0af9c7f18ba2139761c4565ca5372a37945515fc6ead17e8f623653b87097245d13148e50f461dd441afe5c28173d6a53ab853ed0b2a21e43b5eab0fa291fa4c962b42c74e581b25259f291408561c44637ffbfd381679e24defcb56528edbe7a918b06ec2f55bc1f4a44aaf6e1fc8b284697b51536ab866f7e5ce556295de16807c51c11fe4b5216e19e1232f1d8a37c1a7e36b948fd36cbca8369b28ad2cb4a5774ce9dca40049d76e4ace747f7734ac01e81d4126f41bad3a9b4245299b57c44ffabfbd2a3c42b192887d66988232dad90a36c5a4ed9a823268b90d1791f8e7240f4080b6fdcff9f1266bf94b1377179c7af0b495f8ef8c9ffa4b85bdbbafb80e53ae0455a4d63ef6bcf9fb6d0da3442b12e3b3091244aa8aacb76b0c1773f4ff9d2334316c5588245174970104f913cf35c402f2c79621835e4452732defa4363c7306072d4c630000552d8fdab6de88e93c4229c093e4a8c80caf9b178448763e435b81c50d988bf452b858a243eb33f90399d5f1b6d658d4ad012e54db3d7bdb070da18ba29a092dfedd3fd0343451e4d4b83180ea262e77e195024f3b3fad85e2a4c41ae83dbf64599de041677a75da8e2a765857383a6db8bd6900c6ff2b3509674650f1fc1b454b7af2d63ab9b659639874ca781338d603d0f44e39f0a3510dfe61814b968463ea48387fcd3c5befe23b2c4dcbe4c92a7415b9d2ac6a02a16ca58e1d44fbbff2e8c984e02963497f38b03bbdbd561535d01fe7cf328bfc5b4f7c9e267c94409f7b798a5cf0066b2d7768b9142e3ae552820f4e4d0b04b0c663d2aec73e2f64bd9f24c8c57899024b8e92180fab652281b19d79a469ec9679c1f756febd88cf8cd0c95c7e79a8302f15a7b044333a3ea0a15bb023b1490ce9630b069e7ab9ce0ef2863b6afa0dda509349192686f0165e4bfee9a03248c3e19592933e57bf235f3d7eb1b6c1b0996dc585c5748b126e6a1f77c7398949fc0c1d9de39188adc07d28178e7f1919583fac8f8e5ef2b9f977835a54719b7932d71657a4b7fdfb831dd5cb7a62144e0de5d7c9bddcdb8600e976c76df6610007165b5daaad3117bf7417284e06660e283488e1177474570d070222d97cda2526e6a8cc69d90a3b63977750d6b96bb7a95bb52112cdc9599a542e9011f385de70401d6c6c733b0146b825abf8d7bca179cbedc2dcc1f1915e4a3b03194f8c4c8102c51689a2a5c37a7c88ac83bc85eeba2608dd22a8d6dcb3ce4574267bebcf5dd2461e3ad6da01186ee4f393c20a371ddb1e2a2edf845b7d38f50122fe74e727cb770006931231659fec5a14c9a00339963836399d582dcdac11ec13bc1ea2ff73fb2a0c18cc49b526f9b0b30da6a9d8c59882db4699122ea33fc7a50b532f22ebf63d3b18fd8dd80bf5a4e0a45e625f90cf819b7f40e20eaace61773af42b3e2f366d763ae46351de94ec96faf767269d32aaa438d629a82d0cbf81de73170a2fbb79c455590cf85e066bca1385928375d5cb8b2ad11aed160eea50f572836ac1774b3c5dbbaf02d384a91b1327e7b83594d740d1ff2332b39baec5386e1c65b34f8388e78ec7691fdc24264b1affcfb609eddf552c4ddabd238ba01c07a9ad680dc8c145b90fa13670675d8abfbe346f09fce9ccf08534139c9bd5a9a81e3d7bc1b5eeefdf98e8a21a31f525f8ece535e178bd77f4cef1c663fa619521cb2fbde7a5803af199b1cb9c3e1db013f45dc97194325144bc07d991d6249ee2749326f533308af6223e27344a7df250ace9714c61eb9618365bdfa15de4aa8bd09997f48153f922a89ef38c78b25a8c83e70894ce5c0e6ff9c6d5de04c0cbd40cec4691a399b4b33749ec9ca3fd8684c54b7746679c785706457c1f8bccc6eeb90a6280b89923ba639d95d03f4bf4fa052b9560e9de42db17b5fdc1d182f6d08033a4f5f909f9b7356fffaa9d5dfd8834ca85baf1df33222c2a26f0bd3cfec927f9506bbb1a784a297306b740fb1cdeaa814f4f7c7e8eb352230b9be8e725fb54da5fa7436cdc4f7bc75aab947fe662c6796b9c66b9f931081610e2330bc027d7d92a46e5b24266909fdb3284419998221776c46bf837d6c3b42a580b7f255f2d1ff7a507e46909ab2f9369a33dc5ab0aa459156bc646a0d5f15f65ea95de6a2ae37a64a68f3471a5ae37873093ab50d9dcb61437f605d7cac65513cf208216e0eee6aceba9b26f1035f47b433c962383aa1f752e31178fc8432485acaf1360e68e65a199723d7272af426b3a0aeb3a1679ffb7513471389f08d2ccbf1a8a725f6d263366d4966a97a8606c25720aad7772fface179b7b4bcad438fa1b727379e5d82e0dfe18313aed9ebf9fa35194fca08c0c21486c2b81fab01a82238922b3a39d7241b0cefe3c8a067d8a637ec07a6b66e3f1d5481cbdbee1fac1ebd2792977d72a19b870d4314032dfa78f56a7c7fa4b0c506c91ffe437e649773acb54d5bfa99a2a784bdf7b78f0bfb6e43ad9bb2fd94798dabc392075d253b4551de3d5e24d96a37f424fb9b2bf124de75658b5d97daaf9c6dbd04c8c190086a94222e1d8ee148d44dc7c740935ac3481142da6a99b778cb5acb854f39ae6334170f42e0fae7da69571e66abff4e75299cd7522abc4a4b25c7b16e06604e1b88c43af3a96852b580b98c9ac926359bd54d6a28c2cb5100ff557ffa1eb14163d8c74c22e19d1cdc3961bba40e2b2731d28b7287773b42531ee9bffc1b3cbf97b04d51b9cd5c801d7c66cd6f892b292ba0bd9e5da32db4a66b42395cd32fcad48d57416f984a2ba86c35aae123d5b8aa03a6443a06a0ff04b3e59c27366833ac006614174b6f02dbec9c81ad455055f5e0d6b53ae25244c1713c520b121bbf0fe5dd8e63f004f677ecc3987b6bbbb669d5299897e1c0c8a42b87a6140c5366cdbea570a6c12a73901f822ba28a619ba402aeb16150bf51a16472e779d9d31dba4daf3ce3618ee9c543e3c28defff9da4fa60d41b172709652cc1eecdc7b6fbf7f069c1f0466079798b914be8716288bd2a85bde8132a5d71080cfbdfa1c28625edf5c24ea903b7609e8fe102f89f8315639dbb3ad5ecb2abfa3cbb6f96eaf08a8e18e4166f945de1e5c49676f858418fa923a3bbfb875ae9d95fe1fde9f3e4e84d085a1210fd6ee48d723cadb5bf9adbe63613ec97e9343b9e71bae5cdba9288ce6d1f78c81a5d085f8047f4bd80cdfaa809c51d39214ac2d30ae41d49285b35755ed22e179bdac412bd12c4ee48f8750a52b6e1c61d44668e5af0df261d242f364fdcd4e09a23c5a2f9de172ac409491c733668c8ad6f2734b73b2b8a972437f8dd70ffd526b186411d7dced48c8fd078ee017c55d2e34252c4a8c506d0fc925bd85c87d67f3d8b96b6d7514f2548fb85772588f657ec42d560f776cf67a178091485aa564c7a0253c5a8c0a5e7c8818a096c125df6940f28b91e026098ba014cd6545c9403febfe226f8e3d939fd8d1186c6db362b2348179dee097edafe8d9fca4e6d6f34c26bffeeec0993ef78aa30d1b959b2312b7afffd0329e80e819728ea55259291aa84815f5e52a8755a66557ee2d65be7b56f0c0209edde7ac166a1e8173a72e335d05cad12bba766650a49c8f1bb903387efc8c8b9fd72cd492bbab0f2b3370c83f824cab5ff445c18f35e0c000b5345c5b77ce4ffab8c9a1a05dda5a3672da781851f2603d73cdb1719104d135ac8769fadfc87930fae767fe464e9a66f95be428e072b7228832f2ba025dba3a8e3a9f3f63a47b96184c11c7cdc75417602f82ae3e10dd149b1640b03b66583ac90f1573b7658bd37c1b38d24e1d01ff67a4fa42ee91ab9cee40b269d4cf95207becd58ba45aeb79e96040bde7042d780b0d3363ef0d0238b3f45356c44595727e749f0dceb84dddcc03f3ae7f33eeab5e925911d9c9febed85c5303fc587318b4b077a534244adee4ecf55af7e5a155b9e35c290d0d80e475ee8dfdaeb4bf5a0cfa5e8eb1d52481a0ee8d3d623e5b5984f3ae344010faf5cfa1a8e376f8677ab0ad55db66539decfae3f0e3a2ac3b00d53d077963a0551042a50b292b13f9be389b521333554f962ab10a1d8a3ba6b6228dadde51eb237352991e48d3b0a18d9605a5323119c60146fe59413bbb8e96f2fd1acf938963febd38569dedbcb0226831985b05f12010889de0c2a25294a5f768ea592cd778ed661f8cf0a86e208c55a7378f7b1bd36fcc7567ae292c8ac44f2d341a9ed618f209ef4a3f37b344b40c1dd68f894f988d9afd74b5e939511ce25c765946bbac64a102b99bc896c5dff8e3b6fafa62a4d1b8a2a5c0aa2c472e863f064518b0e2c77e9e706b043c62a5625bbdb2bee7e59151d91f3844ed04e37d07928a273721b299268b91e80ae77a640d4f41691850ea70646ecf6f1d122da6ffc8e9a348032df12c64938e143fe86ac4534016f6c017bbf04dbdaf4e921905ef10d67841b323eba01c5073a1a7adfb359b391b99b73df32a2be5e9863c408c59500fbf64565e285552d243cdbad57ba94c95b7f13eaaa9c059a04c2de53ef3ce273f1147411461b4a0d487c9db56afc4daa70d4bb8042168d773c0a9e80c2ea148986cb740a4eeb20b5c5563d65a45272b7b3172905b93fc7fa2c0b5e8b33b702c1200177c0a29ad61c249ec74406cadc6d123b1baf7cdff66f29a2e7d08d36a22c333f4a69b48805d6fbaff65797a190d8acb3c55d7e3f26a12cd48414afbe7108b6c13ae37d5c143f3fe1b356eff816977dcd77c1270219ae766bf2cb3ddcd36154eca28cfb6a5d340e0c17108","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"5616fc32ad96bc6054a97b08493500e0"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
