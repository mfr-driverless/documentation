<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"ff386e00278b76de0f5502353e1d6419666779ebab49bfc71efba6ee42e2a0bc8d745cd74c839eeb7e75137f17c787f02447cdcfc673237fed3354baffba4201aca73016c5b2205204ffd7dff9c868bd3a3496b0d3864b1ccc3e8e7122b57bf80d0caafdfa1c2c33bfc69d31ccc884a5b82ceefa331e4ca5204ca12a8cbfd35a6a88c6e662edadf858b1efdc692191825a0700e9dcb38b6b0f7dd5a82b00711f3bd392cb8f4bb9bf78dbb0e48cce99d3ef7f99b89886dd543921cddf5cae81323b15b1a9c6267bdd9a0b1b9303a180aeafec882c6fcd2e8344e3168d20dd71f9880881be90c3f3582159a084335cb67834ebc993cdf5c88b48e7f85a9c96d254e57d472a8a27e2d400c83581d01cc4de83c85f70619ad1495adfc8bb134a3ae0848a8ec43563bb3b43f49d1e75685192a7b9e23af48854b8c6da0f33b87f0c2d15d694908120cd8a1e914e230742826d86becc649ce251b1ef885ca9946a869426801807e80cccffb13759270eeb8d8cb3e0292d38f2b4cd242d67869769b68d3015c051df1aa5c9f1e49dbee5afbf7b0377f1d431d9ea8af5b362615b73d8832bac510d98a1a202931e6c156ca1e801d9f2bcf50bf634954200aae1bb050bff002a5906b8bcf68a62b1112c224e991df979d97cb51661166849db052ac21d5676120ce62b06757c4a78f11f1c973dc834651e380e5e5bac190c61799b184c800a1eb146f9efeecdf57adb3996aba24a3ade7e9d3af94a05f78dc4aca7daa11277e30107763c8aa8d240ff3a4b45a6006f87797079b4ad9037d489c42f7c9faeaae70dc060238a174962e3ac26bca8205fa6dc92a558b343b014e16a1b8f2c213cf549b7969edead460525271a5590f2167af518b9cd4f6730201c794af3be36bbeb7b774ba308bdb1ceaa48c6e13a0a0de381c4d22f1c1bfa4e58a7b2ff6203aef694b054c46f205ad7bff4e6ea14de686c6fee2d4009a77d4c2d422e8e41c540b5e8ba823537e414c4be6fa884c141f241c188da1f76f24a335ee2c5a167b008f93b9771f23c30d6fb1e5ac029968bc6055e21f31f90d06c792a42e2ddb8d2b5364657b693d52992c940f66b6f79694c77d00c0aa1c5f19a4826e6c346e264b763c550fd3a1d097134e34ad3ee632227316cb02f5e369ccc18de4eb72ce35c7c0266291c1e7906cc195b5620605645fe76027d2fba4edca3b1b5e9f969f53c058212964784288632784f72057d9828aeabd5fd3b3dbf2f12f8600bf0fbc2e17631910aaebf9d4d6d4cd550deafe816d6c39b48f14074359f9cce42bcedf35e12e1a0a0d67ce343d82b0d2bd1eee8f07cf889326860e95c04ec024d23379b00154b24707c7bfa428ce18a550b2fd10a66e0a8468ce09cf3eda2b5d5f2c90d2081022262228364aa0fc2852a8194f8521eb3c29c11653723367715142fb9a4524933ee36340726ea0095d254ca8b823614803ab1c95c92469fbbc0119d995eaaacedd9d1d3670107c4aaffdf6843eca1ac2c6796947b220306d53bd03eab35272d994099a0a9cc480d693d83c2fc5960fd8cf15d5cb779c1ff8d23192c1cc7d56f6ab45674e6e4f87c4d2cd8cf818d5e003eec3ea9205c76485b27bed6f826d114a7c0532ca6a4e936f7ef6c8228716427f76e780cd5861f9cf1497391db124ef645120aa3d3250bdb8e945e9f9e009dcf905126c3e7042f00934ae42da9e9ee268bc97bf8d69fa3a6535ae8d8d5b853a647ce615631243fb72e25c0ab2175af45e2e6dc6ff090b8210964a711ea1cfc48a62b1a59c305e5fd552488952c4a2cd5dac49de48e09773c426beecb3e0a1f78ab8f64de0d5a5fed32fc80d094daed7bdcf582623bd6acad6407964e977402756ca7cdb917b41c89bc521e981a39f4fbc0d1649e2ed10722758fb0ac90b3f9ebb2fdd2eb2cc48d5f279720d34ba9747ea473c9526bb1fe1f119d724a0416634be5c56a70159956c854128c1f0cc929a0f57be8be8a0be5a4107de0929fe6c6e843a23633a60abc1ddeb4e4d7c1c8917e48d1682be50e83b088529fb9c4ed73bf67a63b2d65101697edbc88cbbfb8a654da7b5661dcca371c50b9094dde22b22659ac458c78aabb0d3af309ada4cadc4d4d50062080670c2fac5effc2d174bf5a1762111e1b415c54d4623fe3c15b2c1bf76a711748b3e830571c2e3fd412cf4aa0a55b3b150da6243e1917de77634ab37246283c3652aa3919d18ad314621850cca38d877095bf6a125c371f57c41686bcdb2fd0f28cb134a2227eacd57c3fe1236f29c7c9b69706109fc02a5ef3df3fdb22674e47415061bc66f5b3e247c3526b68587cd2c466214fb00023ede404766f3712a69a923e20db197e56fc6856c972da0abc94788da9cf56b1595cfb01d5d3094539692fecaafd8dcfd2ee7d307c659d8969029f28a8a23e86f9eba4c4ac39109bfa32135297d9a143ccd45e68ab3bc34eefd1c9287d7432805e80bc74db5d7b848043698fc737766f20a019abc8dd1325b400c5fb3f2e35d3aa9bf29ccac1087006f2a69c884dd15994f574306646ae55d6e27faad096e2ddab05288ff99cf6d4e40bb91b1617223013f9949a4d4f23e76b2d5178dddd183f8df721206a8a5dec8529f82c55fdd516804a9ba418ce559e2fc1d469e05d3c58e894e96b7f24ad52005f34120c4d00478443d97851430dc27514c9f331e8839d2d2b319680eac2dfae76ff92616f6d4bf246eca2d74921554612d692b74a64e6c48dabed81b8cd7809c1ee95d954facdd6d4bf80077ab86c6fcb8ad90d6079dcea49c5ed9007dec18b0a18e32a319b0f76679a7129b0505fe67f4afcef755d81357406505253e8ace635cbb75766e56cfad15fe5768474492f10de23fb702e445915d42c8e8ae8d4d9d6c46dd4e1f5469119f7cb632547fe2d25528e0f59200e62a8fa1f9c152f90b43d85bfd93145c307249e446f39bb4a0c2ca0b18c2fddb644a0dbea62613c68fa096a55ed2aef9575a3aca85b89d802a7578e2f23c9498e6661381fa7c07c3d3d9d938e8612cf296c925eb588f9cc7089f293826aecc68a79d8aa3909633467cd4d45024c371bf88179d8c8655f7af2f96230b1b6bd5f5aaf1624eb123cb0593d8baded33985a47edc211f4913105cdcb98c68539b7696e5f596b119ff908e57d827a85346a6e918a2fe7d4ab416f12f1ef01c267f2fa1f0b1c875b90aa764db901f961683700eb822ba48e1866f028136a426fb9fd9ceaa51965951e434c57dab0f5bdaa640359f2f551c11186502a7019b80a50184972cea6b9a0fb1f1ecf0a0705b6a43cfdf77a2b411817e162bc245e14af2e0ecb9c25a33c7a6febd037290d9d956c3ddd4297ff31c9cb3620790abf6f04106c793b74b971908e6c77f9ec4c24bb416c821c357b65e6983a89ed12852d7dba6a092aa0d567fa44e3d6f035f45e10aa9d65a72b7019c791da595ba2079eef64055c526f900134bb191b4f7a632881e469414a3a07674c276a8991dd668c088d60c44e3fa4d6432126fdca7f39ac894780e444df433402216407d0d76b3e7a13df169ec74c4d70ae1b7d8f57d04926f2629e4128868a52a1ba5e74aeff6cc0db0f06b9dc2cfcad5fd1437480e9887e5176c74205c88dcbb30196987b8c74b09fdc6409c30375dc2bf547fceb2808891849b50ed4a8aaea3828ebadc775d74a2da0d2aa51a38ad1e525020431a84ce52e54cd4c393b10a47358db16115f6899ead8fd70f32a85ab3ea50b63056ed3e75d8d961e2225f49892d5be4c38f326dacf0ebefe27e1f3c7a581d49174cc182d058269e408ec084122dd1a3aa2513b4bf9b7e5686c5d4d68192b6b280e161a9266abd3c5b598fe900413a6f6a0a842b8d162e58ce1bc53f113a58217fdfce2f1c30b33472c82b0431d2dd3b69de5e403a63782edb4d531dc1d5cce22c05c2bb78f5f35344a0fcb2926ea9aa91eb520dc106904d603368a3da508b5cd07101f39b66a8745bb42f7a5e92ae4e6fe35063f0d15c0c84518a9d021816318841d561e70e8387314096361df456c93f35853ab3b79c27436dbf6bbd042a062184d560844c6933697c0212ebb8322ca8bbd722515db694e9bc177f7ba21e6c92b7a28352e9c310051143e5159d4279ff36728d59ece8a2a3bdefea1761bb4d278d8963ce8d1ffd9c9e694fcef952b1c81951872626da1bbe5ce6cc7645da020dc23ef4b3505e08ca4eb407834450d546bc172c18f7e0501ced786e85cb620a1612dec73640d84d4e77ee9247a2cbd087cdcded7b5c0131efcc08f7d3fc18b62ea962eeb8b951e60b76b7b6c3d9af8a7df2009e19b0399ee70662a966992885808472000bb63c8837d7dac2fb27921b80d78d461e4ea5d6d348de289d648f62400b0eb6dbb6bae6b2aedfa51f5dcfbbf5822ce2e75fc79073a37f7c317a8a8e943a1590c61234d7e02e841e7211bf402a5ab5fa1953ab7fa3d7d3ad4ab9f2ca7e497222eb37bbaaf2bd097c2db6a1d12104b002234a1aece61587c3e9454235a7728b275980dc1fac5915a590655fecfc5e33d18e5472a25866d61dffe0b34b4232cbab7da6bfddb611ca64b4acc73b12490a51aa7639ca89276a9948ce9569226b5c7473991925220ebb9116c0c8dd3bd2d11c3ba36735579ef30f76532d18a41afde1efb34fbd5b9b327e9f36ba17ad05a8d08f848142032e8590ba8dfe3ce41d5f5147006474044fdd18c4b94c8d7f82dbfa8ef496654e14b1a52fd1b3b0b58daa0fdb414f6e933fb990eaf3baed293dbf0decdfc71bf19a94c4ce59b06ade57ed7e09e6ee328db1401a74eadedd29fa338b95cd445357d2d1c064c910e190d789ee1f35cb9b2c1e6d3ccaeb93b7da31576a662c2a144373d5cf79696b5dd25034f51d5e0b74af4b6d77dbd95a0fbf3bbb72bbc8e705e620c28798eac4166de775622442db3cceaa2b818c389fe2ca6a4e9a9fc25b8da3467ed3d18ec8bb45ee2eb70775389ca465756485dc47cff631fecbbf8142892e349a6711ce287e45978145631fa55986b4af350b796d9d7fb99fa633a2e3e1f0666a75115e4731563bd167d2c57804e44c54c7e7a788881c752bb80831726fbcf0b18d609da37036727152f9b5489afcda2baa3d7fe6edebae5440375af0fed1685bc0dea94d68c1b278983ee6bada6460a533da83b291c4aabb124e9b2d9b5ae058b63c1567e912864c580579a5db68054892c34d38c26ea1fe97acd5e7a4a54396e1615549369bb8cabaa1d63b40b1457f71fe57fdc422d41ff675875af10d1fcc190d1860978c4ad2e371bc1ee5e46a8a6184d39bab63ab84d5b4887f8ffef405565489b70ff0e63d51c5b76e8849ba32386f1260f9099871d69998c4ccd749be92c20073349026b6547362600c4536b635a2ff65f3e9a565c1bf3936bc1da3401d586755b897d606a795fe2af604c183db3652b5b59566888aaa04c30413683c0d45a6c57bb89281d2145b2d502a86e5cab4988c3c6ac3e95b5ff6c05cad42d391feb36e9405f1e30263cf380c0087005ff630005617c7d6052a98f51d3108317103837e0eccb74b82ba36d599fd6ee422945960dd76438669ae7a5d1b966a0650b0c6a2891818fbe8b9f8ebe4bfb3d7b38f4dc3de413119b97c829b2e2380632c23333b93af437997c4f27e91ac53897e908108ee0dba4f24b14b0168d776db902059f51067326c0eaab98bd2c737de3d230b4c18342481c755534a9a66a63b9e915909c01bc4eee1f8aa4b3810ad3491ac61991494ccfc70e640c529909f0d475b37ce234768ebc38be75c3691178d8fc8c0532d11ee86e863c22d9b9f0cad72084ef0d4abc5edd1db4de15895189b46fa8e652c1f4a05452d5ab45bf3ad17ac3223948447f8adf281e2f940049d3d20f8e5e467fdc6a47b480fdc95fcf22750bd709b38cbbd7f918d468065c9432ec63d0627053148f6bd0af43a719c74420ee680f9f04cb8ff29b1a35a3d720abec06d08fd6c22d4460e815156177f6b3e2a7af543cdb2c344eda3d0804ae8ab66b0201a29e26419d3a8a2fcb1d0d3e10339dd3640a1b5e8c755c64a646bb34210d3ae31ed403eebba5292120c2f0a7d2409db499448c7106984c5fa2dc42e526312c2ea8790220a6b8f90d0f9490524f38db0428ef044ab3b826b41e0ef79e686de2a8d0b9bf86384bedf45e4875462ca1dd487da0731b6869a47418822379ffe8105de13e7540ae6a128fdf65eaa4ea5e10373c0ab39852396533263d6b66cfd6c3236544380f5cc184365519360199a6c7732c6ea24d016039497880657ad9243e6682c1f92502080f426a394897a2843a33c756ba368e88fa90c2ca37f640f49f82a8634be8662f964c9d0bdd1ecf43b344d7b68e8a1bfd518e04edf6f562dccb057ce5cca388abe5e10cd2d5dd864b6c1777ac8902be52d004f24949d36f44270a0beb521a433fa3eaba97ebe34f0a223e8a0f009190fe139384c1775e1ef53c306343a41c9089ef43091684c9b19e15539446ef41a85bcbdfde17a640abaee0d5f054145655746a391ae83dc3543bc39243d27fd0f0221272fc7862d11702af1e48bb9a81892e1777ea0f1fef724b3c2e6382b8d83b64d6b167357cf565865b20e4f8699ce47af944f0d6692fa60d68f4f7f5cdb674aeac6247afab4d597d51172c94ea38b6c8bdb7d7629342b60bf6f8b0e18dbfc555e4a555f93b6667b06501b0618e5374cdb36bf2f87df2135cc7a805151625d78e44be5abedb0f54d48165c2c3b86b7a6143c359a39925c89b5c536887f0ab58b60444bd048b219b62dc83aeee30d0d2eeb7eb87c017f9acc3d2d1bd8526590fc6e9b23914a38f8c211d6dcf26468faadf9a6b0a497f32008667bdc799f58f2c534237797d028c9dba11f6031caee3df08a30c9ad9b8ef2935d3d5ffdabe64a39f1d42c75e4aeed1e01a028cbde89ddfb298403a2b84de975485629913b3182a23c677fe6e68b3410974f95103f2ff9878dfb2b61990fbddf3450caded9c918431e97053443de62d101f032e3e83cb4a12caa9675d1e54f487ea62bf6acc0ff9f99e982e3a9164b063dd797f5a1bcb4d4f2e746b6563c8723555e2a7950149e08fc67058bdabd65860bd508ff53776bd935e631a293fc68e725e1c5a329f90f2abee2c72e5e97e8bc481479c7ea2b6322d65319ff4b611e769067af61c1cff36d2a6c7f20f05edf22fbef9107fddca0d1e28031f4adc12b63dd2ffe0e00440d19d5fd58c5f6d1457a81953b35de93e05dfbfc199738964cd920b3b9c55670ea52872c5a1b70e083501b1a29437aef739ae1e024c9df6024b37166782283d5e16b75c3742d155f2bccceee04f702d053f51d8740d4e866f3e294eb690a2288a255b6f4cbf90b4c41d6fb098f9891ffdd5790018a364865df88db6d2f2e134aebf43f815d149d7db635980091a243149615b7a8c32d62fc753d0657add44b20cd72f3c32b5a4f7158bc2c9479cb2e1b21f32b37338eaa26d0a66fb6d8a6a53433b312478d6cf50a49a4ab783d096a0cb24f76ffe80826ec077216e8d73084af7eb18537d131039588588d8894c697d50e9e787835fafa67179ff8939e6ba1898fd0fe0012378b8c71f179d5d4fd7189af4ec5284936b4c57c26be05ec6cac0307dbcda5d857fed75bd62b43cca64d16cf169a17bf9138d4446e2f7332efaacb503a52d2b4218f527ef63fc7dc02413e65279fdf58cf3730d2cdbeba9d962bc596cfe48c42136c7359a16f76cdae4324208c176d297f9821717645870626e75373168bc5a1b5b0f0b3899196298e966071bc2ef35f1bd2e50a755b43a908e99f073b04ef6db83fad09877c0c721e8a364b845f9848455191a3d75146d4aeff6d8f41ada7c3c46fef60c266449c9e3f506a9d391fc8435a1bb86eac0e918d2d7b85b3cb18e6595b526f70e047114a8dbbfc778e44167ee598ce8e866bd6c628751a7946e62cf8fe1e5e5d9681a8dca8529ee41eaad1b253e5040cf4a94217ce3eb6eedb0bc4915dcad56b26d7502ddfd5042a7b40b56a3b44274d405e3e3e21fbed8afbf27c0f1bb52f18feff3c92ea81c66100a3a22b22031b105803b1adf032f30c2ccb62e117be2c6112a1f5f9e5ee31c20a267117c81899a7d526bcef40ecaa8f01f609e438c762be4d8f0aedc40ccc7e8c57404b49822a859cbfc70677e3e78178bdcce752e39d689f6ae51f1dfedc1df18bdcb03b4a75c2323870968da4d95ba3519c0ede7328b782adca6a13d883bcadd65f7c8751cbde7ae87048a30a3c71e97a718b4e968bef263b39ac1fd386ddbbae69293bccd750b14e92e0dee375ddab322353ffb9a28afcd6a6ab4e2e30bd7b0849f1a5f95cecefde49310a90e07041b9860aa44ab1f087fe936124cef2307cf3335965aa8e61e23f79acb1d28cd84239f211069d8b4ed9f76b1ea4bc48a334382ec1a188f1fa4626b1a77cdf3b6072a111635f3d52b44be51b290a04b8aa4a4b4c840dd063e7b9e76c78cfd0e31db51dcee0bb26183f134d014abc6cdad7d82d90f5f84a954293ff48a655ed12cf0a7e13afd290aae56f868b1c7c8a5ca2c7f0fc0c0cba41e3b97549fe68677c9b947d1744478ee6350d82a154342122f47c2f7d688717f4079805307b77c6ae34e4250a930af025455739922e3e203a191a1e53ac6ccd624947bf1b926504f42b08ba75000d5bc5aaeff186e256187c295bdf8610bdaf242d009fabe4694c187a1222b6bcc13febd0a4008bcfa11a2c28f17682bbb44da752358099feca90a197646c847a605caa010d17f0bec63dca0ac33a9d66f27195e98cc69cc433b3c80c243c0b6f013251e459c2cd960867b21b868e84b8fd14ef8b9e989ebde6511f3f7c3aea867cac20b63b045beaf7d77b8498e7ee45fdf6d3164e5e7c8951610bff5608b0caab9fa06c0d666b731a17b33504ee3811b96bdcb66a634123be9a1a3867021c8cc63a207145c95c94319e0f1866ef0a41d8864a82090e4d76da1e3e87668a8c40ad8d1048b9d3a0a5830d86ff668b943cb81adc6aa6be6a0435fc4503da1228090d3d3509c3f5fcd949cf48a179bf658973fa1851884d1a6711cd7e3ed70ea1bf7313b26b98b62cff5d41d3be654ab8299c35a5bc5321a7add35070d609c7af057e438600666fa790afd29c28ad8ec4ce105ee52ed5c99cdacaeccb84632523310eee559747964656521e4d5af790f26cd14f9eac8e40864ea0e03b0154eef27b9abd8bdf6680eb802e489dedabbbd41b79cf328c0b22592667c6108e5211bacc219af860ac0d9fef45e0e9c5504520272a00b30b71c754df5c6584ef8d34053e08707097f974b3fa15aceecf8081ee95b70bf5125faab051b6ccdbde84f3c7c59404eaf1bf1642e56c94ad4c1b461ee28d4159bfd0e4adcf49bf081205967088fe3298806e47ae1b904dbe3ef785b680059aac6f5255c2ea3a883f2b711cba4ed1e99a1a5b8a4f8b42a1da80231c71df91f881d9d5c5ea084c083fb49316020c67f3e9c300d008278b482ee38a68681c3f04f498d1bd28815a1053f8a20789543fa071ce87804368fb51b9dc6ec039458573f99d258a8f9ec4f13616ce98b58fd0676e5dbf3a96e2bca09730d233c8e89fb17be6888e177d4a252d49ef8f4961eda6db7c48307ae2947887f9c2069c1be24025ae5bfdbee1f97a89f96c74e8f4cb9e9d24b922c48b8c4a91adca46f4016f62b93f78fe900f54c910ca81b4b8be648c7a5be7e9d86812fc767da8b3f9989979050f94091fc2436038645771601e854b5198e4ec5054adfa58988e82e795a35f850dac5b052523a710c9f9c20e84db0700f69b8272dfe06afb6872a49f61ea64c02dc93c2d6dbf8740cb2524ba4768cb35ec43339d0606b48d03f153db9324b8bd8553f327194bdeb1cf2be1d466ab8b9a5e9c2d3770f5fb7385c297cb554bcb0f49999df3f216dd4f775651bd646a405af58426b745b05e2a2d6f033618aed3c24556391533af081035aa0cc3fe9d372db0ee8b148890c1fe872e47eef4c3a3287788b6e16368c8ffa60c8f3758990522460fcd4bfa7a471bed9ff0b5ecd0c8f742905f8296d5b45ad494a7c1ff307fabac3cd1eb850438d3695bf3ea8f5d8c76efb025382a5c48b10118728a9d30d03b8c4a21e833b083e9f0dba34f3c44aa9e94fe1315acd8672edbb8daba40ee73df97615be47348d16fba96a552e7d9c158d93a664add6dec4ea72e5253386b4ec5c0387e736d86084ea5e1466dbee53514c92a645a3052ff0a36b9a5e02f84c891818cbacb47f764c756ca4ce59b220ffc05a5063a704887a7c67fb419e492fd32517dbaadd2da07c84d0ecb4d1463f214ba8b7f41c00b3941de59bc8228551683ab21af498ea19d0233c34084441ea56c9338fc492f10c2972d1eddb782a7010e2e9ac7aea0cd6f7327ed78e2a509990cb93be6a7886570ea1d93dda826c5aea8d47e8b76eba1858c1752eaa437bff5f85ae1d8d7e214c9bdf411ac369c618e7619c097fe2f1e320e7aad9c1db074b0b90a92fd42e3e516643a64b1fc26f99057e017771457023e56dacccbfd124f17bcf335a9d370c377b62460625163bb5188a37361fc431c2de96b4bac34dbc07789d6db96c1c13f41ee2895297eec348b3b541b27c5c2d236dcf41b408e4b189d47324fd5f05ce053c024b64929624a1249420cc6636924c76fa1dc6e10982fa53c7efc89e0b9c36b30ce2c073f85c80c6bbbe2f03f678244a2fa8538f2c646417c986cdd7b35cee0c80285630b45bb827f2db8f6f90176ac9688047073cf2ea4bb3dcfa9ee44519cea6f4f5e51724ed855e875cda246af99e3dbedcdf48e635f531f4a01f5cc1e02932702bc1d30dc865437eab18feb444204f0b2492c7ed0093f00152758df0a6dfa0a3716480b3132ff714608404aeada08f030f18727edc90abe25ee222cc3e2913595b1ff274adb5e1fb7e0fa80aab49c80e7db47445f8a877def51271239df6999be255a9b10f53151fd170f31eabf388d91e033ac2a0a705b40272f09400dbf00a732fd3d0934e4d6ee09c9745bdcfb9dec84079fe6553979ebb996f8ff0e2dd7930d080d620ea26a985073fdf38377684d25a020d0ab3e85b2b4412fffd7bc61314764e9b7ed520a31b83d25e117508bdd30196551aee9a8ef2fa96aa94560f97354464f44c2af841669fadddf747d5c55f88e08309d9833ceca643a525166f3aae14218fca2917645a450c645c390ea9c78be8266fec1b2a02f0924fabfbdabe58934232c2701fb88dcf74090d6cec70e9e3a8122acd2eb7b9b415372c378c15a3203221c398031bb056acffbb2abd3844dd2c19d915861d27da291cb1134b881eec165a143f98c67887a2fbdae6bb332faedb1b6ee6bf1e315c9ed01dbfafaea52898b3fa8707ea9be1cee844eadfb4350b32911c5d350460b5b1692a3cc47347daec52f2105fbb955e473fe817ef9c78a937b6fd89aec2ee909468856c5b406582cd7e79feb06615070f248bce1bf526b02ddc91d8f36627cb142107b3e2133542845a0d992aed5fb39b493c2e22765c3bbdf5a6f5cead1e6b6cd6687ef811eedfa2fa0b35405d99d922d10f8db487fcf856b679b2cb35cd5072346fe0a6f809c7fc94fcbbb4a11b4bb64fc60fd1b25ea069d25da9b7a9d9b80eeb697cf1113c75c6510d488dd9bf7ece2222d2ff582f816062dce4efa34d46d94cd80520878ec5e0d0a9379b1571bf47c3de7c0e17c5211052d5c5773d1a2bff8954c825b678120ce260b6bc4f85fa3f56d24db28a2545891444fefedffd22225b3cdec6fd53cf046a93cfd49d460e0054e1cfd91eccc2308b202b96911ee195b7466207ce0d799a38d254fd6bfcd9978e31641034a47e41a07569469647cdd94ecd62a1d700add3489907c556e94784a9fc2550eb31d7d8ca3399aaf7403ecebd58164bcda77ab86128be72fb96d6336c6fd7f1b6153e9097e573e0805353bd4c25c79d3b87c5e709ca214b4bbc333155e0a30bf66fe40982ea981c751bd477deff66c4e1fba3ff614ac310191e5021fe7b3e72e48781f0811e2b255505ea9fb84ad649eca57243bddbd6bc7247e2f020432c0eb6446a6ffccd418788f69e4cc19988112f38742baf8c19a8f7e89d93f9fad56a197faadfbdcb11f12986d2f2d536889b5c24106d27a659b007726ed6b8dbd4d9f832575694483c2611bab01d0b5e0fbc98acdc5a61f09dbbad8e552a608ae03f60881a686117ca463e37d11747279cedd3a831b2e451520785c5bb83a1ebf29db9d3ed61fa034616706975bf1bc7032b1c90e13d2812da47d44a5bdc156f10415d182caf9a0b3c7aaae64e75ac7924a2704c2b244b1b80d9de609b013729a3b2fd331728f6d94add5036b85b16cb73f5efaa8e6dc6d8abf8eecf3bd6306d0dfda47867744d9a6d94b650c1d97ebe5e9e5c429f20ad79a16ab530e5db34014c68f51255b3769415c84fb650e2fb13387fd41c5b51a1861ce1fb99759dc2dae6ea4f61294649d812dff2e640e361fde1c7e8d7be152018521f8caa6eb40ce4a1758620becee59f7237ebc1c4b75faccef6e2729a513b53f7488ece32b61ca0afbecdb335996b6c8c1a62538ceadd0fb4dcb3155e424c6392fe08eb74b0cb7cd52a8a13f78cdddc074e971b8ea6b285a118f2ce69243367e9214284eefb6979bdf37e2831c512f18cd2b7d7308dc8be075c3ee8fe70da94b7f5d6eea8d7e9dc98d38c3c73d2948b1ecd0a859e0e7b548262bcdbdab51fea24ad3ad5775fdf54303c1934ad0aea1880e20c4e77dca1124854d8e9636311262753534a78f53240944e592cbfb4afa607d6a3b0763c825feac508e292b0e32c977677f45715b75e6ec1667a941f343d71b3b70b3d10173a38688e5abf49ddce775bd6a301a155db8b0c10965adfee3314ed4f2b41a94875a6e00c25b3621c8c926a9a85cc19baec73fa77e7b0ed8278c069b360cfffa075ebe2c4dacbb20c96265c9f526b32681808f47c99e5bab909fc3899d5cdbb26c2453931e2f660f88d2ef0b636bb1bdfc5ea640584dbc4ae23ec0051d9c93a8131910935dead172dae25f4a608dce9aae22250213181a9ee07a1982f6ac5dc5f9e43e7fc6d5c2a6346a70e7a9e6dbf9948dd7c1c35738e87644acca13f47b6dc6ee033eac96f429186814f473624b2eea67ba7ae087b5e8967809f897edcf0e623600521afa12cdeb17c7cbae469bd91cb349a5c3d48a5f08e083ae0d8d496890103efa453ebb9491d011ae689f1a3e979a7179494813f9126be629ca1216f79b289fe685e75c4e88cda3989413ea527b9d7cae55e9e4c03b404ef178a02064950bc4c8cb512fda231211ee719172e5901f0a33d7258cff5835e57ad53f77cbc83abaf2ce28d3105956068455775f869118e16fa8d7905c8f0871772e91ef8208239de383f6a420148b8e9963c5ca71f62fcb65fbc4cd158eb26ea899b2155ae7cf93cc4dc63311c62ca1dbd476ce454e4cec35a74783f979fc566a6dd177898c17110fc5aa76a152de4ac1b55cf0261211de5323ea22c0693de036f949412e9c2f5006ce8fe798b4c316d0cf9a8ef6b38b635d4d04d63f0e2fd94bb051171d3732bf5e0a9c86bdaf68824116c085f718b6fb5ce239055060075c9b49335658985c725ade6191518037cfaffd9c021a2e6c8ffa75ba614834464faedf343e44a9928fb0d8668e100e8b996e2f7374ce0a38d7bbda5c14bae2e6bc32bc3bb9e9111bb33e93892c1388537834c90238058ea9a9726bcc45bed01a45b53c0e8ab6bf270d76970f61f503603c6895d684ac5dc04374b84b31517a2d1b1f9a00450539afa31f75ef8b702558d3b049cf6cad0934318fae62572d3b17e4b8aa418a28badb8c864c41512acddab0a562f2ee0829eed5062fec8213558db659f93ba4749cb900209969bcf10445fffc0709579b4de89dae567eef98f672dddd0a474aded1f27dbb7c52bd1065d2a185977ea1d100b3bccb7c8b6163fb13a639e27140ce6c6523d0e48b8a358e9ea1641394c6a4691b5023f7a516e2a71a494d24eda3bb2c4052abcb3db04589f979285899453637c425e3703333e53221af8a1a74880e394c0ea75da6ae07bed7933b6c44c6cb9360a69e5e4dd813530076c4fdefb2e432eee18571472791d44b56e97d3837f55681e75520ee094f484ed7379f0add857779d292f4161c4b2844469b68e9c9e5aaa75322f22bbbe06eb2cb864f0a6a95513ec1600b27f7cba1994bf85bdb6c049ddc57750bac678e377739b759418ede77c2125d31a1da89fa4c9d26d8866544df83c0ec84aae178864152a8af2839f9e5b743c5616e13667f592ff71c9f7a700b2cf43a82947fe5ed2ecfb251ba44f5d706c32b53953080ab142fc1a45774293081b5ef19fbb3072e7434324d00775856356ffa0cc984d29ff0538291097ffcbf900c62dd600f5ffc70103ef158f9511f6515b152b483b2421e58061c95e092e0ac9f89186ee172dad741737cc7ae6aea933b9fa6e04a3e3bf51c7c75a5ee99c964985e86e96787d11f223c0d33538608c206c77134e8c0b6fdb11dba4c6336408b936dc1d8aa4626f55af5c02dce324d02c055293a520aa07c4ab3be61e77df2f3f87cb72507ea86b142b8f72398b704717b62beeb0c27502372ccc0ddb9471b1d494884383d93ea640d7c2a88fbf075d7ab9697a4861fb13a8dd9b1d4fd7bc4c4a0ed07dfdc0226092caaf79c488b73d911e013b61414f33e2600e734a1f67a501ec33e2f9005e9698d4ecbe34467c1d6f9ad1fe6f779b1cc67f160b651d1b2ad2dac14112a71df800d4147236d731a67fe5e16033b72a0ce29275c33df6c725dfe73c78cafd33a9321881b30c4ad10f1d6254ab6b68b72d9c1b499ce07520c4f53926ef00572292010ec72f284d90736a57ff35c3d6452e9c87e54db0058316bd92217ad51e4256181103cafa36ac8a00211e8aa61798e12948cb3c01f4cd19bac90f85dd1b9bc0b070c36340c39220faa228a18694069ed0a3c954bc08666924ce320e87971ad49124226675dbd95c35ad7bfb86c5efc72005773770f6f74333cb8206771f460a0a5bf05798452ddc1527f69b54b442f2720e11cc662235aaa2028dafb8e7deb1575d3f11ebfa89e432952bd6de71cc89859be04503e2a79873bfcfcbce8d7b333da75431902f6f8e722d952e845a873cf4042d19afb7848b0c2d026b8f6c4d0b8039aca70c49523c9b85a0b3e79ff5dfde7bdafa4c002a2680c9226e575d678b935d34068e0a6ddbff742cf190a05c8258502a4fb28885da0c66267693584645be67a5337571582bcbb3666beb73a5015f3b9b7ad5dbfbe706bb36fe850329ba93da23f52fd80ecff6aa8c9f901ef7e210cb9df3ec5ae19c77feaf666c6893dfd5e7a8f6f76625f69f72aa1ad0a4f780e0e53e332ba2f95d903c980b51064d80a0bbac0e17a207cf937656572bc6c3828c34ba460f24d96af4857c8c9a53663667d9ecd8f8410cadbf2870e2b36e5d2daa43124bf4534092679e10e5dd0dc013176d2929b6ec862e5053093dc796adcdb54fdb35f9e592aad09a2fa241de31029a08126cbcf9356295a0106d653221c089a6c0252b06e194cae1a642ae5faa2d649e646e25dcb809e332e4b1fd8f95b2e355e53954495a9608c6630e604aa3a45ae61a35916b6f5210953824fffe3c86c4a7648aa7af38ec3e76c0095159428e8f3ed9069a59078bcc5ce96977d7b577772e7aa7ce8ecbd2db79443daa33fc01c3d2cc3f12192d4e084e20d7c6d956d64797c5835908326ef8de99e3d90b784eb00dcfc9bd92b931921a3a56be962d2e764ca157fe902d2f55efae5e1dbba737d1b67c06e2f9ebc07a631eabe68737f2f1f1f55535b5d23940ced2dcc10da66f6b391ffcb231f5f9fff495f44a253424a8ba6df862ccdf43f48a704974912a200782694a693a8784cab348811e61db1c5cb88f52342f767912478174abede45100e9bd9abc76f44df145c81c8e57cce1842c2808e3b6b34ccf0637cbf1eb5861a03ae0d30c5ccb8f27eb24fc94a1ebbdf2809d9fc881cadd1b054f205102aab10173faaaa753a495fe43b7d7781f37b4be731d7bbbb3a656cc1dd3a2ae5269eea15eca58c452f5bdfb03cd5a3ab68713002c0fc7408970b857366cf49e45eb4caaec83464874496841538bced0ffce82d63e3c17da58dd009fdf49c6f21b06d8d8da4fc5a96cb995bf34a86c8cd3ac504b93e66434de8d3e7c2da267b71f1d09027e3784a2505b538c26d27ca1316f315f7332be7131b614934404048c3b389b9eadeda23e73263c68a1cbe688418549b4c27559cf3bfe0140d34b86479d2e511d673d09c5b34abe44e8d17ce9a20c15a367333216b1d1017f76be0b3800f2b31450ddb29f82469cffd3341e8d8b64f85bbb4d558f0e1130abd2d991e8f2923e57c076973988c2e42c8e6ae7303426c30a2eb1279ea146e64de3e3e5deff7c745c417a1a75ffdde9e5e4c4e892104c2b26e4dff918565dd1cac0e17f8d77a4d425c53c20f9e3ef18d8610e8566cd156d395870746e326e2805fba1f5febc766a1c00d29f05d3c88b72af670696cacfd607a72aecbe65861d6f2462f9522a44e3d3123724b1c25758488ac3da279e551f36a03f455f9071662cd27171f85f2abc25e583995a109dbd8b85543b02b9176427fd239acbed7bb97a70454b81b2fffb295f33bdeed47d753d28395b75acb53c2008a956a8d51f90096612bf324828f95d6319748df2d4ec2ff3f35b1cd931990103ec8f08b5cc53e576f46481c0f99efa3839e5ab86c68316215a6d3428c41fda68d32dc66d2b2d377841c93b3c705eef92890d86adcc48fc03701c40e532d79e2f4c5cd96300272b3c58f3b9c0eac572b67eb1d9325e4d746e72ae4f40210335e034a90d94d6ba23c27d21a4fdeb1bfaa557e499dbfeda8561b5698d2e00e8080b627f9be5a2e3d9c8d0901c04535f169534fd85f24428afb8f9cb77e6e44f545a39a26dbf5a53f648f76c18fba6be47309a21fa2b79472f0b440233a3370fa559963ca7a0c95567d6c11b4443abd51fe54dca6e61a0f69f0058bdf0d316667171c4e333835cfe93c7b87d017c95977eebacc4aff7e308682bba44064c0d5bf4164eeba631ccc8063b037dc044d8c7b48a0900d8074159a2fc42adb75c83f46310dc2072147c0b4e23af720feaa71de39afe66d698c0952d55bc14aba3f0e9ef3cf1c6e1151c2966f9c0156d349160402ef14fab079789d868a5567b06ed2ea5f82da869454f9518dc96ece7013a03a0d8008edbe9e3b2f78bec6cf8de7cf099a479a036a540bb7834499a0f3922f5017e60f7d3247aca7f284dc15bca99c4fe2979c5d2bb583cc5d39ebf98bf04b1581556966f8c4d0495e66c3c3bd0e74e352701ed3f686d26e5d46ac86393bb0d225a126953bd2bab7ed988507c77103553d32b1b4442020d03a71999696b9d02985032e76a307f8c7f4e8a848814e1f073296ec1a27e2fd84260d02ffad446719acd2a6e3988f6c4b8d105483bf3f2ac8eb08ceee40d251b6abd5781a9daa77fd151b0bbb26d51a08cf8bf4bc23d75473ed97fc31904fafc97f85f18a1c0ccc9bedb75cf42ac1021c338e9c362a468a0f365a064bb0e972465ca5affea8b3e429028c10eb83b13ed32f35b63247f2a4e1f7fdd256ed5c4596a0415889d7a83c0cab0d35290001f604f3713557286d39f4cb8bdef49873fb5eaee729e414ae4047c14e6fb223ad7aabc28ecc3f31efebadde16267304ac34b757cb5c5d162d8cb7580099869b72af379df9e61afb1c0df2f5d9aa14b38c2dc2c1617a6b849fe59dc3249bfb812db7705e3215f395e2a6a514728ef050f86f7e115cb4950c87e02d293327e604dacc0f15339aad657e691d6f2dbbbe063ae56f41402e5a4fc56a1dbfb810f50eeef8522fdf93656de119c37211b2cc8c6c28a86b99466b5a0b462e37cf00b0f98421f605602f71eab849ab2527334bc2efeac5d966f564326f41fa216be137a786e94745f54257d70155c7e16ac1345c72af1f35a985ef2ded20d10fa0473e374b50b1997eb3e21fa5f43d3d91e9e998952b4be4ad66e3aefb7473ee667abed3d66ac47864fb4cdf1d0d458dc1e65c9953de0417b1dca04a9b2390fba5d2304f4dda39dbc76cb58faa6ca950de28d0592a8130b48af7519d1bd03fd624e99f4f29b191eee49fb266bd1b953443a4604bafb2b9da1d85e932613e85239e1614ad74f225430da1e3f81ca1c49ce932a33609c134e6303325db7a9917ba284e1d8741d8c2129630945563e550801012f913faf278ceb9ea69f16a137c4532b9ace573aaefacd9da7208855ab9db6c3ae31061daab5d4fff23a5deaa883f443f567cfcaf4117ac25020a587c4f2ebbd47997e031d014c5a87db93ab0f54399af37bf29e693e3659ebb627d8181e4c77d9bb23d0afb8975f9cfd40b32847486f5b0587570c88e9e004263f40699cff0ac23656045b2d7ff6c131d78228f57f62e3f192f2a95e3df8f881a72d1dcfd083fc17227dc7f7ded268377fee54f461467601f66894309ce70823ff4f97c516cf681915e45b0f860a3941fa6e04c3119bbd574534808374cd7ee862a4ccbaa794128c336eb0036c7f91f2046bd9e840b57e814368cc78dae35524d2f76d568f3d27075b8b2297662c43e93a3d66677f472121d8c2f987ee1590f706ea9a2dd19180816aea681a74adf92d762aa748f37aefebcd0bf9b3f4499d40c3252ce88bc26fdc9c74e44988932d17a7fd148c09908245649be58f61a92d7c29b4f438d71093172adfcebfb699551605b69e745ecc3bf0166a6b7525cf493be4c994408d38c98d9e50664111585e94442e4e62abb47f7ab60aca69799679ecb75a38c0dc797c89e1c0768665492651f2082c51853bdf60fe97b978e6d3bd95b4f7af6ff77726fba43ad8d74dc3f52e53454eddf986877bd9211bcf3f062d706c40539c954c47226df0b352a2d5acab75ca8ef2abc9743b886a8c1e7067bb6e9ee881a006a5f9c97a4557cff8a44f5009c7c3f95861b65f9e390286c94bb5cd02596f0fd981f090c3b9c5c95e098e6228bc742e28a00d89be005251508855ddd8b042e87cc681bfdfd11a39ce8c7a7da8adeadf895f3912e279f7f250d7670cd1022a4c561450f52955712be9e0dd857018d3c5c34227af125ff59184e8df51c7e6e1ac9dfa29a37054900b502ff257b6d2ef76d67b5cc55e7adeac1d77b18eea6856b079e0f305e9786056dd48882e0e5df7ddc2eb03d81c3acf4f97cf36bab711f370e1f41f1a2fc0b7a27f6be9e7ba7a876aca2b8bf948167871af5dfabf66efcf858b2f006773986331b780803a1c42526577eb0258762e25ac552501ef43b1d5bb09f1a5dc75c30b72d003e6de16b74f3ad6e7e90e58b0f9367a046357eb531cd5760339dca2f571cde8dd7f303411da11b8f620a4ea9fb34f9f92b34ae6d03c6f21bc06deee32452c31a3314bb0cdd8d4e7cb9a772d802fa4a085650fcd0286bc478bb64473de6e5c9b2df713f8a3b53b164393dd0f9b85fbbd8c69c0d15520b01ba7a9a79a6d909e9fcb876d3c7c1381195ec224cf1a2ccb6ac65e90400d1c0e765321d7ec2501c3bbd2a52603b2a1d1a21c33741578a17837e1d9198a3212dd83dd1f2f251f70ff843e3a5d646becfd76c144300470f40ed50e024088863139ba3c4ffda6740b08ae26cbed533fcb7a026dfd70b5a444c45e7099c98eb1f24859b0341cc98ccae56cd7bf7e5ba0bbe978aac499d8f0be197c6b20b62a29093b1973b4f82d3fc71924382954bac409d328581c2b762aa8a528ed341da2ecf016ed5f15a452d9b31984c0d2dac727d477012522d6303b5cc00dd6acfd8d396d7f9d7c55a4fffd33bac4c94d2f466a4609f0353ddcf5f0ef5ab00b9aa11f21f892c5caeb2e3d7b00eee87270cbc329d87e74887faa45570cd6a07d32d02f34d50a74f88cec50ea81f61122bed42d6fdfc25cf4c0b8fb8c3f8f2b7230cbd96ec1dad18b3683055bd3ea115e9048900d7e588530158ab67d5198619572d839d1ba6217d6e90e0a9362e765135f28bad766a91c805e1b761d226aaf85f19385a47eaef50bf65c0c469373a780173c7f43daeb0814af0faa0b65cccd95b99490ce63b1d703c4edb589ee7c7764aeda576728bfe6e332d33e5036dcc0509bd2fe9ad8a2ec5b59ecae67b1207e074fc54ccdec3fc76b3e344bd69ca42d76e01a227520f40a92ecd759be3d73a8c78927eaa5ef85a186c20036e7569ef2bb07e54d561adca2de39a981da7393762afafc20a4377e9190bf2dae4d1a9f025b56b76eacb9f52be303414abd93ad0230bdb50bbf5d581b3ca6f8ed289c633d73c4faad23f641866f9a766aff43bf2228c1a9aafafd58f8486fcf52b40aacbaf571292c1b3d5382dfb431396cbc4b535f367cfd69a0d5b68ca4201128b4f45b6fb840a15465da33bcfc3c9fd696a853d806e21193b939f01bab960ef1a8d7627e536eabb6600472509cc39065d796fb6d7dc18b9e0215805967236f10f3ee14590771159ef256e9d806b4bf2bf2774bedc1f1aa7022e0f2b5f8719512f81c49d19585bb515952f495d4285f6abfddd6f5f1d4159c1a8e24819172608772df39225581fca03eb82a9464b53b3906650e17be9e6d074ee265e6f267ef52793a13632f54b7061fcc55841dc62bb4b84481b01e3029e8eb4cb4da4f6488cc51adeddab18b1174a77b43ffa9cb5ff846b769c641d061d91477e3d88839a42e398069fcf4fee13800eb9c5060d7b23b3b1371ff49f26a1f47ae3a090d2940cc6ae3b29c8fa77872d54c11c107cfaedee70731372bbbd99d4762ff8ac22261c650c92b7f411f6dd821c7d277fbd97ccfc26935efea2a754f23484c991c7ab4580561ed3dd46c60fec583845dede6cb142c1efa63dc18e889f2c72e0c4f9856816aa0cf2784b0f2d69a927cc39d8cc9348bbed3618bb667e19df4809ca18c5dc2b1c8e1d46ecf31f86df3d5f7fb980b839d44bf595ba7c403a6e503d3b9f429a0ffadd4396b4bd23f94f1b5f585351bc4f1b8bb33553365a3b2df5d95f82fb9c6b381890ff5a5a61224835a4434da5c171e90085e84721f402535486b5e77107bf138486b5f186f38b9f895abb5f74402bd1de3af00616c1cced9e424a4f1d72c68be3238c8c65a7805d05827e27ca9ab1392637f65ebb778f429fdb81b21a5ebdb26dea7a61fc06f301c58c420de13318b86201678cce1b9d372f58a646cd4bb9004e77b66882a6b1697581f9c64ecaa72f54c65e751e3d42fac15eb1d31078923c4578fc9ab2b51e68868b7f3d0bd2a7c69c64e2fd5869e770c64d5ef5eb25c853a02341f88bb3a359c3507c3e768c23b1f46efad43b6a3aa3c10e11f627d8ef44208e7903550f3c4adb5c22f7626f5dafd982603fc357c50b911d8041946dde5f27d44445be7e5303a47e6926a15dd80a5d8a3bd133faaa0b6008ef4b4536bec6cde223abb5d315d566e5c20937dd1887094d18849ba93aa042cb39c5f823a20afea918c4f66d48ef9ee0d45c39e150123aeeaffe4d951e5a56e93e6c86374548e22004934a8c190a918647d9b93e9abf1b21e5622ec3bd9ef4d610d6250c1a44f9d378ed260026f03220a4abb17c01978495b508cc332094811df21781e3971383221f4e9417b00e00e1905cc5399d438f75b171fd801b8ad090b9e8f2fd49c2072df330ea0e21f13be13c103208cfed2454ef91e2db72452cfc992b861b0c332b1b786f2555798a543f94e566daf9a81fd062fadf768d5f333afedb979c7ea4c27d0554095d1221ab75f26d47f6c8f161107fbbcd02e42202eb5fbaff96ea10cceea01fd72d31597311baf08d60ad116f21a41164e4cdfe27fbedd54cccbdecefa94522baa2160d72a3b98e43a8654d1ace377e57c80a919b3cd0b5102485b1c9743ff5c57702e6c8ce1e0ddbb5f7dfc5a43a21e07f1793becd05b41331e54dc4e0a474540aacae8bdabb22b444159b8048bc566b4e236f828601f42d1342687299a33a6b043cb01fb14c6e905659fb67b58bcd1e06cf0a545a13ec10ce0bb7b2cf1efeb1f896b1a1d8ce5958fca1b0d862157eb24409e78c626e495345fea5c70da4f373c1079de392750caa80525d9328f3e84e159da9326a877e47b5e3bd438b11478626cf0c3c055de60c23ea6b52985dbbb28b430608f9a6ee9b0aa17e18ec00b7229b2978289ce7cb5837ed4cf6809c5a157ca1827fff5b3f539815b43a6d18cbc2de558d527776389ebcf111ffefb4a58ef1ee0298b00e58d4b784a653a036a88a628dbe8a59a4884fb32310636a6ad39e7cb870e3482f8547cd488cebdd184c8920e92e7fb1846f28f8c646bf653376d51f309a4db191e9a073f9c5d68e755aa10557f3889fdb6daffa8646e9716239ffd228817493b226fc09325e8b8e638a4aafb9abf07a119df164e60c086633ba1bcc8f1376009c5eaf10aea0c08fbcbd1f60d0734989f826fb1e34fd868b1026031c00771ec16ea6ba17deed9bcafba781855b9c16fcbf66295df701a246efb3fb8a774a33b93e7c5a6716908e1eca4053c4aeab4b99046ee1b56a30417a30a7333818fd933f3e1bf2780b0fe77ae8d787b518a87140d80da7f6e219155a9a197fa606c5798ef0b386078c6f3ffdd0244c0b5ab040deeee651c0fe7fb9ccdcf29b678e4d09117ff5de7a076bc239cd27828e9597960c340cda256b24e0190f1fae6fb4468b8014b157ec63ebdcc1de64078351311a8b4f8e057d2b888e5a58df8aec02c32416ffc6220dfcc95e71a858a15dbfa17c0d85810d671b0dfe9cb280f3369b50a86be069671f599f8a5e54d554f63907580e358adaddf1939e623e759fa106bd399b794c982eefa4d9f5e23a945be8f659b8c6799f76b79f3a985e0121faaccc3cdee92aecb14133564ebd8655fa05f20129d54f2293a4f45049feb6b259e281798f8158756c012ae30c177b4e26fcef38458a6c37c076d292daa7ef6e6d850f501b0a6107840d03d201e0648672e449c4181be70ce5025435f00cd4a07d370dda32790ad3dee5de4b19252543a5bbddc0f8909920067d96030392ad613259ac2392d9bdd3e025dd8d4970ed9a7c9e1828a1134697afdcc40e69b9d524e2a878cebd04291dde1c35dd8180b34a9fb7831c0f32503b31541b06c9a59eeb12b2b362eadea55c5b5ae4adea06546c988ccf4e1ead924b5d753f69a964c9675ea788fa965a0c108d2d47b0f0150b82efc61445d45b2773c4db1f23d425cb2087c9e1224b52b55339fb509de72849d1790cc2568959b49e1fe43fa680bea4cf8397445e771966281930c64165eb273d12eb8d7ae32d2fc16de82f099717093badec6a0b7cbf458ecb339bdb72b7a578266e8ae89ba15ecf6698ffb1471f54cf5e1e9a028f36a26f737b36e194b6c170982dfdab27d86c6c49e91a90e7681d5444dc831e8089a2cc04d35568ca3aeaddcd0c8232e2189821fcbc17495a615244e5cdbf3ecda8463dd81d4cf3577fb17c5dabe4256e36a89cd86a4a0c97231c8833b33d38728663f36360b5e2e8700f13519f20a33a13ce6752dab4711313787196bb75a1c87ba1ec420644683f7d431fbeea284325e1577c9b20ef77058d44f7e49569904dbcce6f4d9628cdea29919d0e1d59c1bf87828c922ff9ca2698268614bafc43bf7a92f153fede3408c925a68141054b79ffa85e609ad412cba3906b57b3cf660914fb198e4aff541a46ba54d10dabdb1a6f86bf91bde7d1ade7e2a4afbcfabe224b384c0a990c5fac193417d968b9e086e36e38feab2d3b11f020f8d2de8338d93edfb939a956805017ace172763ee3af6f86dc81edcd7c9acf05c8ffcd62ad610d14709bfec7049e0cd8f3f9e2eeff9ffeefb75b44b8717b1b7dfec88c7a7be9b7614176fbc45ce249902ae5bcbd9caf211c3f8a26d1d90ec9fc3c6bb9c5eb2c3ef75eb0d18e529c34c02e58208fbacd8ce8d719b2e5b5a6cb92bb6dfc5d9d172a35d04abf8def185d825eeaa63bb82928f1799fc4001c6fdfd38ef6c17d45c21c35804be2630218172737528c5d7e2cc347d86405085d394c1307894e4c3d376c1b7d2e127ce8075d83892130019688ad42acda0bc5538c96f12b37c7d6cd776170155b2a4cc9d1c30ff9312fd5097a9ace51aa5cf0680260f7316eef8b0b604a65aab17c1824c94f1d72586af5d00b90031206edffa448f3c21a5848a25be6054c1161145a22af7842682b442ab57b54915cde2d8024a3d6e340468754ea5cb3a4a375448029c8ef8f4e01cb91d2094fc5ae26a0f7803e2c3c8f462a5008729dfb441e7b417c3b963de4819afb9716d0e62d130691217c66b9e454279298547c8028140e15bbf0236ad2d1f5715b1a41b3ae5ac3bb92ce97de5224502faec814bb17c8cd2d740d8259e69659939e8dd35257c391e72b4089f99fd80945cdc2bdd2234d9320c0e82e330d42e783437ff7b5679c1ac85330c15e3c179af913a31ca5b93aba061532cff9a239fb642ed267f3f8981434f446cb6fee252526e5bc113895d04c9647e8ff85bb981d51d8fd98cfabb7c86e771de7afdfaeffd02260bd8973c243df488651cb7c2cd82d6efb0d2538a4358966c3b21ddd3de151a6dbfcd61bbb3c53e66a60665311e4534213a1fec8f9ac2dff34d7aac8dff80d90fca24520dfd309a4ab7f328e8d6c5d85ce7fd34d59815a8057a310da388a7fb998e7fb1dfdede83d33a0060b2c3fb4a4ffbaa50a077bbbb7912adbfc2d6ca9af9f38f857bba72a8f61714f98a108a4f39f3dc9765ff08793765bd948f60ccf84cb9f512d726e8837004326a9108b9c981ce076bf153ae35d0f1944386176699884813874f58502f0a1f2293e6bd13d8097507c7c1797834d90f45a5c2515ebd3c4cceadd184d7c5206b7a861c8cc46cacdbe9edfc263ff4b6ccbfbcd383f07c0c47838555851b6512af253b2f67db67d245a237115ea7686faad096d63eaf0978b339c9e87f8db0c689b50e705a592117dceafb4986fb80652b9f8b41bc1e090fc3f6ebea0280f93d9e526564784d2bda4281f927668e4c3972eff89c4bae09d4474c831ec097ccd1ac3fe5dce94f7b8dc4218d27a712df4e26ed5b7cf435cbfbf232c0e46e5875f6aca666620ca1fc7242f4defa20129190e5460f0c8ac7eef24e0f14beb1bbe849e9c3882d79461b5710e0439619e67128282e801cacf944793128b60fb06855bdf94db62c5b0c0928a734e8855121173b587814d2e11968293a3ae431874851632dbb454f7795e3c2adb5f82c7e0e9e7b1833475d6ba31c95a17748d8d4788657f452cce82534d83074b919ec3d65a169a459ab1008edab52e0deb8987705fe760d4199b092ceb205eb81ae1225b2bcf01a2f045c54badba72a5df9e35291b746b48e7716e4b0269c8caee8e7ddd7bd5572d72fb7fb0535e3c4ce18086ac49336101e21ca5e131dbef577ec64dd617beaa9a7469d905d926cca2f9653403033edd6ee390c0890cbc38a19aefc01531997a7212020da9629340aa4ae08d8b0b1442ea671b4630fe99c0b9329b46de00ed6bd0413eef9187666bec64d04513e7dc92cb556974c2aaec11bfbd6c955d04a17fcee85fdd47dceb66ffff345754fa8aa06dabd8f4315985cf96cbb366af2d82d0958d7da4176fe2fd5c36bd88e3bc261fb89624de9462be163c4417dd961d8e7fc0d12d125ce80a750b1839846c3f12a5e87ecf4144066fa0ed68c26ff56c81525117e3a7753b53849d9a6274045b253f27ba588eeaa61512bbe3703f4c6c56c72ea054020a861084597e6aad0f2d01bdf64fa80979281c23a6e66ade04af1b05aca16c499c8bb2176fdb3d24975f3c7997da22bcd89ff1d3799abb6978694d28f182b0c9ab57199b68be82706a485e6dacc4c56cac07e9136d6418a921f3b9abd2d163b01d5e440e3d3924112a6c8a46eb09c3be20dc45ccbe2bc8caedcaa45e9a4078b41f4888a8cb1546cfffbe7f7f0397f25dd4880be01e5b02fef91747274fbdbc632f9e1a029f756c2ea7df31fb015bea0fe95244d3b20ec6660d7b96e0a69b41da46aefb92aad9166ed03d69fc909121dde8895cf56e0d0c963da96b739e2391d291f54c672b3f8f3c411b906fe28a5fd090cf8553dfa2ea3e9b31eefb37bfa950239fe7b89580db70bef09ae88c46c55d52a2cd2f8e6f110d9b931f41d41c9135000be1687944cb391d0b38047b166d92a804850b63723a5a446e986bd0d07c7b629da791942045cff3aad29713aec402d437d90a606d9156cea85d51f627a7707fc2dc50ffc0d91b53ba1d3b36fe733f3b745514946f1a4db4f79e4f67771bc713646e1fff19864df4627c0977587cc0064b6ea35353eb6d256380f9c6298c02767bdfbc96662c9b719dfdd64352a2b8f027d5220684fa3dcccaea3b306433fb5e5182386d77fe7988597effd74cd667e04d9857e3f6bbdbf075821b86d60ba1e84774de3d3a58253ab2268cdc70daa266532ef3a149ff09e83f37078809d776eb1f3ba3acf940437dc927467cc145b25f33fc0ad178d7a18c0056bd86355f183f64e3863a299fe76d2bdd6422b27a3930da660a4381e6d644b4e1c1aac394c0b774b14090afa5a93a760ef06030a0e46626ae828fafc149e6543c2145a004244276f18b2540445e51fe9ab7159299fe2bbbcf4320f6aadeaaacb84f2a7ff860c00a86b069f70e5ac5ce322f55691abe337b486edc2bb01b24e2ecab274745f0c8b456c799bfea05121ad0663293ce68e4bfa0254b0693ddba94e78a458adc76178ca0cb81d636e7e02fd0df9c10921efff5aa3d18779a2480640dec2a0a3ec403a91a9430f7f8e734583425eee04f421b755306a2cbd8157e64d8b357f3792ce1b91249640bda648aac4915c590f92c36a27a84f46acf6b854db3973b467fe6d883fe0b1f06e560b9272defa0e6cfeb6156503f4e5c5adbf928b19d6b1196b020e2cb6340238e1f15a3a3df171bd69de85b0980ca3d664c75d1bd6cc554b4833f9e6fae19259de334adbcd24055d485ca73ee1dd0b8317fbeaeb89e7a64faf3ae8dc031448278c01f142692b594295b53a205400665f942943e7708138680e5cc4cfea000b95a65ff835610ea358543d01390b9f62f381319f31280a116c1eae9f3437c6831983484dddd420beb801fcf53f438525808906317e1a7fbaaf92bbb5f7c160bfb73fde7e990a3e10836cb1ea6d05b2823c6852e1f8eeab7d2d6bf397f6adde3107306a32bbf7d020505892be4463b67ab9fc289369db050ab3849b979ef01aaedbbf3d6d109be729d64aab98678e2cf9b23c0f3424ea257730a36839274bc29cc768b3b71dfae7e1812b34ac59a113537e3a358b57d0319f9311342f6bc29cf1643b9afba1de8fabf23b20422780e9296180e73a7788856d25c3661124c5755d431187565d9da9a8daf48d72e3fb81db79c4b64cf6b82c0ec73cc3cd73b7795c13a2a2add2928efce553703d047a0748ce700bd3d6bb709444ef093ffde6da023ea270e863289215242465cb4e7c9d7f65757dff51d5121bd1c8b86d1baf430acdcc2e1586fb9f6f2df31e7023412b66a4d4a41016bbdd257cd1c577afe56ae9519145ac477d15a4635c5e22bb0488e93083691a8b580419c17bf7a298e763339f1d5be2b085e4e4e31acfd478864cc932f7575b222c8f78b6653d774dec3760216f998644d6d1746427ddde04ed52ff356f373f5e54a700cfeac9f418dfc6b5d649ecbbd1f9f2d9209db4f78a0948e0e1c6f28a27a4519dce014a67889322ae6c993b92cdeec057a6e3c9273eaa0218aadc672bcbe6d47e859cea2aa8b2e059404fc11dd9d03ab36016af4307d34ae85708a4468df54aba7e9f6a4cf453cb86f61eb2499f82ece18fcb95c48cf9163609906e32b15dbfff3443f976f7e99ca0aa944187162a904c03b9928929a42390633a809c8409759a3d6dc8f3e4fd365313e2b75b007b92bcb10358b5f7054dece105593e9bf5859682028ddfa267c36b53d087a0022b9e25fb1a02f198ba44066043bd1209aad9ef73375f25c9b66778b964bc2f6698a7120b2b7ec2b43a3476391337ab4bf7955e3111ba29f60b7de3da6399d26b544686c5e54860aaf305016cc19a4d1ad80329ba1cdcef1b758cc7edc18a1288a8db00b3589dc401b052544d4e7394a5aaf90ad754fddc9fd3d385f03a0a191d1ada559a3fe822e18cd4204dc89d220079522050db56aa56df2fbb2f21e1db342223c9059a97d6a72d18ca3d511131b3468f68aecb9d2ae631b4652fade0460f8bf61c230d238c73e20595f4b7ef50978467443937119d67fc533c42141234002bf6cdd20a8843b84cf0c904f6fae2d1c01d9efdeb685925b6b17d37d96ae1ff047a8c19237cb94393d1d4c996f0739f8a9a8767bfb0974d9948e07352b9650189fc653c42f491f6afb65c6a9c51e455f5833d2739b336db5b03a234293d4f1050336a3b4b35e0c8bdecf095e157e5f4b69b68b9db42fde7b885076008eed7c642e2f5e4229d76d66ff0f9087803ebdce73612e4be27aa0a804acb4ce23142d60e4b428e5afaf11e5ced580f241dbbb6e579280a2878c9a06f679e4f5a2b55c103f03395a961c08876b3b121565a6da963e3e06e2e27dcd131b689c455bdb7bea23e28c72587e82a3b15a1064b4371a3b8ebc6a9713fc9c342dcbd4b91e93df84ba40a637843c7e38bf5d5795fdb8bccf59db3a3cfcdb75223f131dd0bb19d3404ca190e6285ffc6f67d3f63d13f3366959f89070da405782b3ed6a6646d61ad768563ae2ba46e8afb3a86c6d09f62ddc70978428408edb226b3cee7bb024a55e78e1c32312f8e7bd154c436bf2455fa172f835ada08da98d6343ae3681a776bda373130d75586e4bdce0ca5476aff68f1cac76fe7d5cb94ec34831bc852c63fea1d668c24eebcee7fdad8420b4e027f88b8cace1a6fc5ee0b59dbe6e6927da97f2731e16126d84bd0c1113d18d7d7bad209f4ebbf0ad65a58b2f5e98a21aac74d7530041faea4e82f85985be6b376610811212d042b4acfc98410a5e3f97142938387f29f23534f2f33d1a88bd0472f7c84c5d7511e922fdfb4f861c12a78a8e6b2d1f66ddc803a7e61ac42d1dc10a98156d4af5a1b43cac76499115ef8b1d4ecfc04c6df2801aa8643305d2d276acc6ec7498063761832b3f1021cdaf44abc09a8501c6a84a86b0ed3cc7aa89d4a57035388bd9aa8177f00aba179451c85107075cebd92c8bba353a3fb0f8c6549646e12c8f77a6d38395d0ccd029fe4212f60c6c39024864b0d636eb96d4bc3901c66512dc7fa9b5fe033eaca55f4d67c60b7352b52e56d3f3c4c16afc1a027a295c7edfe3dbc9abb1876348f0cf5f711de2e6c9ce8e22f88a2373ec68929d27242239d4bc27534095d19a18d95698980b4bcfc22af97f3f9936179311b4933c95627d2a913058f0aef516d48d4b6ed4014dc51d547ea1db4270aa04a7c68f2f7bd07ffecc3aa885354de8b91069e2b892d046cbc136cc165f3c319d3dfcb38a0d035af9479623f00ca23d760308e5ed86fd191cf0982cf8f8655e5fbf4390f2ce8f8c4cb671d53b4d9d58bc73f86e389542ff3a2299fa6fd2da177be5cdc0db998835c15ed535d1a1a38b37aca372069de35360ee0dee5d15874de06601eb7223f7dc52351aeecb3105cc46bcc7c6c5ba001ca6c4a6a58851d0d69d73fc8de8cf688a21a84b4bb6b54ac55651324e21cccec310f97257afdac568e82263e7580b1c8b9164f9a34365aa48575e3f8235781e8e33880fe56844bc5be5c0377b6974a5f7df5e20351462c689fd762dcb3a0dfd8560d07d37ff3be4acad8a9d9dc2fed3d951052f0fb2dedc321b41dd166dd1ac52cc4e0f776e5de15eb34b52ffae38c769b968358f2fa67d797443922d1c454f2ef5f17f0cc616cd7c071802598d1171d4530b6ac19eec7f389c2252ab0b08d392aaa2fcd392ab88b5bd0bc41291bbb7ab38141b67f51f0611634351d2cb7d605e5e122cf467c349da9cda4ef98df5f010909b03a612a0147ff74d6a4c45d28d8b40ec66b2985ec6f989109594e6c0a6a6258345ec0a5baf9c77a37cbe547757b0c6c7e6a0dd6a4201e9e9a349b1d98ca7c49484b405158948932a9aee0d360f72547836c0ad8ea83b261cc8d9dbf2c6495282f2c4aa8260512e2c42fb9f7a1ffc3f92120dbeb1e0aa8716b8dcd9b4534cdc3906076b1ceaa319a5bc31257126a0cd57b1c7502e6fc782e2b8b4a1123b1a7771759d7dda69d27e4d182e9ddd2f8d50ac47b66c91a520e6c0f7f43eef80a84edd4712570425cca585a7e1c7300456f665cc9ffa095e8648c320c9128633c521f4d2e73042acef22362f2df1d4097b5584b009bfb7176aad2c1611feceba017e0abde552f23394dfaaf1bb739461c6e2c0902d3c0af46270bfec38c5ffc40c4e6d586c99ecaa91e1c3b6fde9a55447891fb06e2c31738ff39b128f44ebe228c027a299bb851ac11bd11736154dd394b2c6b7c4264cabec32cec4d883a81ee5c446bd78e13705add806675140661dde707abe08784b248ab2d39f474f69c14370e350ad798f18a35e8e915752606642d8cb8781175d1bb2d0851223e95bb292214cefc4b1145b8127135d08ea9c4e1fc6c1bd54d1cd9cc88315bdae408c49b70ce5f0542924b1a81b93d2d52ecce3f268802316f6c5a897cfbce958aa7baacee4679dc250b0e2e10892b082b69a6f6a0eb843e0903d47d8c36256cdfaaff19c1b42f5dd641761e53fe7446205db61bfa3c20cd6d1737bba68d17b02d11342c4750503eaeb2a1d7dd0e5633b8a7e56ca1be96e9ba45fe1562bbb847cb3952195c6db5ca2be1c8de5dbb78b52e3473bb388227952fe123e99ad7720665ef53bf99e9ed3f486da8b53e19bf399f045c84cd5313964073d91fdf474969215c2c9a353be23b49f61a8883b8","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"779b78f0b0e284ba3ac14be43b73028c"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
