<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"104809a6aea1db09519ffc5711ec7c80529165b892f5cbac654da79bcbd6952d19c70e96e7a71057f6e8aac3bcda1b573370152b4cd65e7e3d9229b717f48170dd168ab40d3461a99af26a9d61983a1795b766db40ec21cab2860c958f6a960ec17597824cba3d77df932f89dea820064527ed43f86718e44fe600660f5e0f9945d10d732e46d3605047859778c067b689ef1beb67b20b7de94d86077a5c3280bc59aafe4b245fa41144ff89415539f6b0696a66605c3120c92b2fbfd9f96abfca6c6cea08642e102143604af3dc7dc4e51f6723c05fec0ecc20683d624641c544cd064e9075d7d2ad7ec86b4dfeda2b656e0e5c2ee93019b3d0e731586d084305ea052d147b672593b3a011df84ad20553f393c581edeeca587075aa0ef8f21ac5816c8beec44e75a8b31d86b3df251aecfc36ced9266c25b623785206e60dc6891cc5cdf415d0dc9761051cdcc176211233f9d352189359ab219af62f7cd4b63da5f3e89d7e34f0a798d2331a6e137846261b638d493189cb1be4fbaa27fbc3476c27e0db2cedeeea31995bb6972f81c8f0230e6d587b411272cda6eab8e83592a43a319c6148d0e4fb483457da7d1f0ca55862e7ed589589dad0493cba5b5347b0db24c617c968ff4ad6ce83461f03ff0b75dde0d5346a4a2f31b4d34c18ec62b1123a3ec5ea3fc17dcd77f1e6aee373bdf266b55087686f4399ecde724b7752e39ea78d6ba33f9256d8089a2b489c5b716a0865b425af572c4ff124d21c759f0b20ae1f802ad4aa36b2332a3ba54b81e6036a201b1254291a111015359e9a0a48c829b6bf4c1ff30b22680beccac6708ee03ac9823864f534d493a8d3a1f8542befc17b53acddfe8770dc980c3324d84875bd6aa93fc6b1c6e21a07f551b66b7cd0cac985aa6d04f93228242c958221f0f82cb84cedae46bbeccece47dfef0d5ae8b7684eb44f1487038a3eaaf87bfc197e3eef5471849d02484eec19bb7ac09096ffa195f0ddb66152552ace0ef8f4b09a88c720df64c5bd8e6f4783353459acb20bba6d50eb5497df6bca803d4d48e50adcac407a492412635b1379c5fd940fa9be0cf80d610887827ed84e853e3969ad877df634a4d73aa57f7230d7c5a100a8b1987a0c714d6846cd301230c5a10081713fa36b915ec0d0b0cfd728ab59f51ec921c418c26e7aee58c56cbb84a7cce82050f31d713b20d08b46e26f40d630d11f7bd244bce89ecfbc2595a8ddb36041414ff328b10ed8862c51c12a0781d7ed78f1154b847ab1ae7196c36f3d0f1df49eefb38ad72130aa51536691608c9db4246ab8463e26b803c676161364275c8fb9fb339fa315298a85bff345e5d9b1917c2b65fe55af12ccc0f1bb66508f292a10f0dacddff3618a3cc421135e6621056d8f50cc57a3ef27ee928c01e42c2a2c02b686a72c7abd58c380ba4d22a539800c365c48828e404b85a1f4a9cf74f106cfa732e8e3c10bf027061f050a0e3def1fe3312982b4926db6dc742c6ec739f39d4b79fbda26f5f4f025bbed23e030d2d6aa5778abce437ebd531586912daf4c053bd395162b58744359b916363e3a7c2cd6d327e57f89730a3210cc0db3a9bf062c6a066dfe9f110d6f7d1abd5a7d68fa14b4c1c65b1b5ae542eb6cac908bfc4cd4928d5efc130545637240984c51d653bffc37170a75d26b0f77fffb9b48aee5a94393ef137bf6b307e1e0da4cf996c5bd1112bb1001b420ee629138a7e9cb54e632c2c2115b91472959440eae0c5f2e7c2abe7a5e7572d1b5ef7d8116e7a474f3d1beb636c5efe7e259d31815d68b13f3090e21640763b1ccd5f728f3be20ce3230a5d691fb0876a113e247547b5aecbf5b1f4299fa8de3eaab8b3e5fab1faabfab309ef8957d62bd519dab7e2780f1c63c016f5950574cc01ebe2e2a2469747e206e4be416a02d05580a1d081ce414c50dd217953cff63025422ad5f551c57280c1899a31c6547daa3b01a43bdee630fada0a65cf5000ed9c3a1fac51fdc4f17f61c50f9ba52fb02973a02b95b941583d178e07b4ae85b1574d16797d387ce4471a715156ee6449e951ce27296f72989a78cb6647dccd32d2e57ed2c37178c124564b20b8cf858def232dafe324d530886293ecbcd3f9e9c3321cacbd2ea5ae72dcb5ac4dc0646c477d0ebafb1659a7989c888019c3cd2fb7cfdd25ddcf3fd097658d17d845acae172195ea201e7de769daca32b48292489494426595eeac05e3ddea192435bf0c94f7d8d817394fc1c5c8a8b87ce86e48fb98c1e63d11e67add35044e43b4ae8e2ea921e653f1888e3395e7cdbb966edcb8432fa3744eb4411f24f55eaeae8bec04e97447cc6710307eb6c2a359615966e19c04ba02f5d589619bdaa238dc3d993c47aa5faa8a7bbdffb60968ecb80f422c450644765fb50cd1ef6779e9a50d878c2e1ef3e9099261a5d3b0c989e490357ab8d78c3344b68973e69542035350db0e38fc2c24a512231091fcbb2d2ef9132899094b40cb20bfed986cfe1d34f7314a228084ceba7ec5308b7f3cb7a23bc9a2be3d3ff17ec99f28dcec5cf9da087af4671a42b852a5ebaa2a2d634e2a665f73f76b7fa5499ede2fdd11521653f7a29ce551e7856d011042b9c98d5c58eddecaf06a8509994674c69fef2688ee3cf22ad622640923faa2834247ad405db8d8be0e35a5051131116889d7bc413f5d3abc36894f45324bdee78bf7c89b3be3e6ba6c5c19ed7ce36d95d245a35674fcdbfd30585531fd538c37374a7e49f39f60b584ec6f8b8d77846457cee5a7f9ac5e33f02ea6c029b28b12cd8d94f1e68493682f885c0fdaf1fb22a173819b5267514a2cfa403a181a4b2454c3df9691c987f6be8846f7cd38f709e1d83e5e92e28f8e78ee6b49001fb04701d167b7e522167580f42cc74f1e6f583025b3cd046e4e203c2afa8a9421f1f3d603e164a93d8403edd3f0db7162032b0810d4044e3bb23c240ce8c1489ef47267b67584f3b4dd5eac8a411e94963764cfdc3a839050f672747e5d08f06a219947014ca600f86cd6aced28e28e7512aa8a99490116874af68cf6c5b8abd8d93bc4ad271741e016de9d0aec3606888c580d9e9675747db7df49d04dc90f3563752471155731571bfcb7cc8e86b7dd9052b1fb06f40e47b15e54b9a73bcfba8dfd3d8d44e2e0055788b237b0e1119b49bef077e6855cc19bc17a99ae3c06292e9e79849e14d6a5870c98da8fe85af1130173cbd42e95c356b309ba3bec4231d19f671ca7b2f2418d5a482dd163e2ccff4602a7cfccde33457696f81e1df63f9aa8dd39ed71a287c4a51044938dcc68e951f320a10beb26dca678eabc6f1ec120c3306e22898ca4ac8a12282c05abce34461bab8877636da4ad6c102c73d65492533a9aee747047aafec541cf0100d3d292a3f98d71b74334995b5110daceb1fba7cf65bac727d5a89930b66806ee84ac990993de82cb79487d2eb18082acd4473968920ff338635f5e579cdfe768be29b9fb3247efac54297d320855783ba0dce571196f7be349937a0ea2e2eae2c0f0e2035f12d65ed72d020dbea47dedbce4976936101e94ea6f2d5f99d500517e255255c5c89050915d8dea06fcf322bfd5bc9f8e59203c9792b4865a1712a167e423ce3b5a84924f78d9ca1bc55f2e49b689fc5ea49079523d1ab952781ad077251e58208867eafe6596da9b81035e5fa8b97b54da43500e0925e2210bd58dc3de415a9e4fe6de66bf751a2df6104afd53f2a93ce1a89356f84d8700810e7cbb3972412cbc13e8846f48652c53055791cac2bbc7bee9b74620bc82d1c7a18d5f3b5aea361becff686f8b0705f9c78bf8c2db7d02943735351c6d68272b6d9e4947a8b8ec4d7f9057b00c1f94d589aecd3d785f5db917ecb580ffbd8e1f130daca46f750ca4a6114b717fbfc12603ffd921d2e7f7e6e184194f51de9f54910ff7bf7d010c97d8c51950eb58b464ac6d954ac5e6a89c63f13eb8739b0d590647d3821f5c4b8d8a32136c9b532a3018eb31e56e684dc70bf74514c7bb8ebbd87466e5f476cffb2dddc5ce516c727c94f4416666a1180dd967cca09c30f57b7fca69f07feaaf63597b59626acd944e9c6f7710c4506774472f33097859316124bcc4878d5fb9b9e2119cc1317b17863fcfbc35eff8ad36ad77c61445f1f82a8bb18ef0dabb172e3c582f723aade1673443242dd997c51de32fe0daacfcd119256c4f0828ef9eec3450a1399c1406b39be349f176a075cfe197ef1ee1b3af85dd73b6bef123402666a1d678ea945983727130cb6ca1689f0c8895141f351f6760d75592a03a376803ea4052166025a6e87bd62e616e42d803c6c60481ce88c6dff7cb99eff584b27a9ec28ca3c94fe3084b985006678b4b31954495d03db3a0c6df7fd9e07251071ff253ac090a54d6734efa8b8b9e5347ac41585fe33bd67e043355807ccf4fe799887ab72596cfef8f06fc45f916e0eaa3df9fdf2109df5f1eee6fa1c151cce67b0056810b054792b9450159942148113443858ef81c0b0b87476671fb25ffee819363d100287b892f1e06b6647bedd1721dad94cb017c028fbf19a96f0a8c72358f11c74572d62d99a95927baecd61f52d8ac9be37f221cf6758e9a0d80c53f68e5be2ef33cfc534488bb69dc275791db2c4c69a5b4f67712fedc41993ac14c8a90365353d2ff56060ae14a0b449773f01d27c78523bcf405ad49113c720962c20aa3bc0c0d7c5ce08da0282e1eb495d1a6a6971d02609af5b1526c57a55a4ba1dabc911a76d30a2bd0474ff32ea0d5b44dd1971e91436de11bfa5c2a8ec715b033edc809166781fd31489175ba6fa75f0f13ff6592e42e0899762a38bf499517cf1eed961c4066ae64a505eebc5398afc4cffaa142dde4341374c9a3126e3914fd05610a0cdc3f4f105bc1813917cb6a1a99c7a1f86f1b503dddc8375527cc0c65218f53267bacaec9400373ac20277058ab301dbccd80bdf4ea5f1e0102366ce7ec897ba0ce46181804df078ee1295f2c9812a84562bbd4477441ae718b77d82bd25c9ea377521f3076d4662e0bdea04ce3a9cf0b9a4a6e3e7e6f027353ccdbd8bf48d38116cfbbefabc47666fce4d7740e366cb99bf23411bfcfafc7213dacae89c1e9e83f1f2c6d77cb0f54e296b8f41b818aa8567f4826a500e163b80c8ee73512a7dd20e90d6e8a9ae49202153c243863f6892afafad2db49b42ad9d0c5b730a4760995fe58a50807affcf25f8a3f518dce6581276626b61703c1cdc13126b40644ccb0a85ef9e8e92c323ef465acd725383272254f8cb81689f8772d56c23955c2a3a238a104f9385f0887c19c75bc7efc440cdbb27c8efa2236ef0ca434ebfd5237d00b932b16a2982809229e6f3a8beb98d57b2af8faec14f1899a93e59a0f8822d84b5ef4d523bbab6cc4d641c8d7a4079bdeeba7eb419e4ef1d5970e31e51bc5af15ac1dfb41f7a5ce0f11f9f82f0e1224869fe7faf36590f4c4b8ba8554629dff2d68d2a6ff12ee7831884ab18d472163eb602857d6f73a99428b5418d1dd947035d1c4634b2a789152adbd116c873e21b5949f2be9b4c11d4646b398f4b73d0c372a26de21b06115c7f92629ea57d519037967bcc92824ac4a144079b42e9bb0f14020efe206a34565f0c3d813654c560c245350c171fe16daef6bc0b4c3cb6c2539d422c6da9a431aeef5b2f423e062018529c309db56031551f4bdf2382ddbc37c54754f5ebc683a2e8c6306f953f94a2e8693932d876e53a01655a403631366431cd0a0320742e6fc36b8de6bff0f0cdefe222cb90f179450bf9b3d903d6717b4678bbace0d88e63bf2aaa46e50171c441b70c89e03db07950fb1912a50f2a03d9955cc3fbfa59a7bdd18ba60f48910894c3bc7b724b2b8606959a2b9d4eb8b299af663b88f850bee0e8f3a93ffd1a8b218052f6ff5fb3c3ea39177ad8a8017bed283c4c3f629d5965b1806ed27602c589efd24bc025194d6c6fcba2e5fbbcf87c5d1564ec761d117f0d4a94f55ec6d21ead1eaaf062863680540d5b8f25b80b08bfd3a759cc9b1f92e4753de8d87b6fb25ab0a2546c6699b3bbf00fe1d6e46429d6d95725cf8492c2948ef41395e452841e372753fa151695aff640ecd5a70cd617b2408f19fcc80ce61b5587ee8e66e08373e67b53587b79d49b6dfc456457ec12795c5a228485d33d0f36365a5b688b60f571a036ae7d60bd15f93dd04ca496a32ea822c689d245ec0a37a611677ed026adbfd7767b58c351808a115740c0c276701b9712b640791833b637c2c4f48e039ee9df61cd9ed8cca25c1a0bf32c696a651405290ca45a7ad6030e2f0287de8797ecc8fcac89df352ce392685abcf188b73963845a48efdb92b97ae5d990b4e05303a229456d247a931ddd241377d88c21269581d4a14db1becb38b9b4dcb993979cc485610b2a66b1c5e80f169ae867bcac0c8611ea3b8246205032621991b0f71447ed38dc8b941309ef7cd0dc605269af616bfb6e8e76c7c169cc43056fa15a439e65c2185c57225927f864b9b13dd27e35bf361ea01b1b3854d2ef4bc98bcb1e18f12a5f6d933b28c494570f8b94e2eb0e0f527070c6594d803ed8ad50f293997297bfd8cb0e15341c5324396977baed437c3259053bdfd5e2697d9c52a4ee8bd11d89ed32921a9d477b5fca005215ab4d5f8fa59b868ffa64ce245e6492ffd7c48ee922f41f43f32924e7a69bfe28d5bab6746116ea23ebd2056a5dacaa922d3f8802b172417e0d5b46456ec6f9a159d725a5bee89a694b4d02d1f159a1fd39ae88f0a4b7622964b9a914b0ced843bbdbce88559e6838a90efab98c18337a25fdb08b984c8bc3bacb1669ca9451722e850fae45834b5b5609f27bb005335434659e8b56d5516bfb5090a8e5db799d58c8a24bf085e6b7dc6095d85caac78a671a2b5871b2d18c5eb52493838f5cffdffb51d2d3d65d8dfb045ef5085bac2e492c769e1004d9425a4bd09886e930fbc98b8b19e1eeea0b787b23ca188358733969e4f2f0afeab4a0dd7a44bcbbaedc81c38cecab391b7540e8802a748f1a7bfbbbfea62ba0b33213ddf266beded1fc85c51022eff3cf4c5cae88ceb5314b92231ca34b0ade71033100c57d22f4b37e48b39b39e18b1ba50b186e3d537cfe3d75e42a7e209fa5e4c7aa6df18d44eeea7e8e9196dfc958cb9f748914d930bc65390f5f2ff79d3ecadca5112cef648cee88b7ca9c9056f2546b2a80e8d64d8c761aea9a01cb44aa96a9ae93b5b1cde29fe425cb27737175a218e91138bf87e7ec061688b820eb357fcfd527ab74204dcb1c33acbe241b94b6210f4854f34e6da312254f39a2f4290d40607f2b058762ca9a4368ead4266b60f55bfc39ed01f0351c7a60e0dceb611746861253945bacbcdff31f7f7affaad962fc153df5a93da2195a8deeb88d52eb307ae2d5dcf74d8149fba80b0b1363fde6038c133c14b8ed84bea4172741ce6c6986034dfcacdc3002e811e54455d0d93fc4fca9aee652d5e2132eee100b3e3348cad62fa2c71d49007962c874af9994cd52689e988a69ecb2d7e6116c7108c9cca789436e16d621c394433684255264bcf172b5976407fe002e34b1f9f70de4770ca9f88aefd6ee109fd6426682af1229cb4005dd5f01220008ebd720b90754636d22ba3493391820893224fd35d98faa499a85ff2855d92ac463bd0a8c583fe1cd97cd4f2fe5e0564a21e2fbc61f3c837c7a67b9ef50a0f36da6298d8683cd985b542477730036fb73e7168be513123ea84a244cc67827f84cee19ec87ca556488729b30696c5393d279504a40500476df069c0cbbd32b06ab3beee7c02622350ed7d44c58e1bf67b49edb90d81c287eb1d6c6e0f07930c9883f7a9c9565037c13468620e5996309d920fddf7ac90b4b35d6e2b104fad4164b57c31d993f448b29d07da66924bd170acdfaa5347c147f7a2dc37fe819d8e01ab2f34d311c8cd9100fedc3a49d04158e2e9a1030ffb118fc67ed516c0a40ae4e9c9bded481cb304b0231ce3217df226d6217e01e34cf1d9f397c0d85800049588890376e70e72660cd3a5f3ffa6a9664916d836af2b48fd11909893ec7f5b9dcc5986c3b076445e83b083d4d4acb54a979e58adec268566d29df92a3fe472ab3c2bb92363db8d3731e4226bc4c4b240cf677ca798dc4a43dac7387ee5892049e979f9b18db2ea5676d8c56d1551f79f0f7aab6b6b3a86ce6495e3158f4c0902080f9ac0ed26750c4a7ac9a615e85e274abf367ebb314b8d82e627b3cabd3d53afa8bae3914d57a04d0607683dac17445d775d178a985fb04ea0d4b8adac5e55aad27ff5c6d0927b088f405f0cb902b4cb2e316b90f1ebcda1f5f440310bc6214e0bb50b1adaeda8f5a2ba200c0053796948b34d177db6a9f35ea64014a0f262d9a21ab47a31214793d0b23af8b80373315fa1f4a09992b777fa7616703dc8958c6076ded3d15a1bd89099fea5cbe18f4c7c2f6f71507c5d5e7ca8be6f1ff0ee70812733313690da247d3cc09bd558da27076f486a3567c1f38993b4412129673b6d266fab6363246bb5e69829c202197800a1fc9bc55dc4a05a7ee78a2efb9849414ec458235927c75bb3c242de20bc8cb9356e33b170a2475fd2620fd9ec9126b4c7c7f713c1328345cf2df91a6182904fb191f51be140beb1839db7c8ef4b477c0693f8121aaaf839521b63c3b3f9b0c7a7661ab43e00c0b9c51f775e8564b593e9ee2bbc70d41b8a113a5d366a99a6efd5610b6fdd3985bf8b2485d0c06806fb743e08fdafe917b498f3ce188bfe1c47aa734b31efb450f30fdfbf663e27066f5c9091ddd46b2b370e01e77fa3d556ca4d43a48438a011193f3d668203344b3b651e942c4f3c9e87e6e535c28dfcfd040a3d9e2a00727deebe325d46963033647190e97b0f4bfc94b3518d6f4045624035f55cb5b48037d6e2c611b9e989c9f6569cbb0f26bf254d5a7bf43333e0c7c2e23d23b24bf6dc4b6b1067b594617f4416b89757f47152a3b1db07d89acc0126d3d30f2e3dfe150558c77e45e4630b98e00adba48987b47d4793e926b97c827e2985b3859713e9ab98b25e6f555c1227639f8b88b841e854773d8051f2a62af368e9b1d1cda4d12b5a8cc02dce4709ca7ed852f5ba4f60d928141a888121a0fce79d75eda41f5c9d45f737f10efa67f3df2ecb380ca199bba933edcc7af8c5b7e9c65b5ef3d0a1dc7b0fb1cdc9d81886913604d2280006fc2640a8d4402f537c50b296cde3223e75ecbfff988e3a882e36b18a803d2d244ae32872201b87f31899fa2d27c15263f87b29221b75f6134cc8e922195ad4f9deaacf10b4270e01c0292daeae48be8b9d99471e17f028a4970d11966e8a31e855a0cd0685d15779ed1e9ffb7aaa6ef45f269f0f1a5e28fec7e762a1e16dc59654e189e20eb95130992e14b4aa328e7e1bc6bc6ace582c4f6954f14db014429ef596d93ba709573464e2b374ca8905d14268ee3a2fbe23d2d87f137fb9a99a62160c8cff44b6a99eeea492eaef3c8cced5dac656376cd005f96b7375f821c46c6a6043f911eb0afbd08e85bad730b48c8212733649aae7639c4ab355d078718b4a2aaa513e0597325380bb7d78d29595677ac77b01feb7cf0d0e3b08f4d3c73a240c5863da02eddf1c73eca8173f9a6f75751608d88fb16064fb626056d16f62519bf0ad087e31e4d77bc4de7c478982022aad25a355a135a430cc1623c5719b2dad8ccb5f0c34a3846d37d91a54b02e5f966e6945b8518bdd0e633e030d5e6a0f54d3437e6e77a7843dead8e0e536fd5e2efd98f5c2132d5229f791d379d5d19ad97bf06710c9c6373222dd1924a4f71887a764b26272e742d21a4e0bb75536a6ea093a815c1ef2e02393694ca2d49a123ca9930669a22509ade1cb8e7af8e7fbcdaa656602ef42b6b82f44becdf566fe16726fe76a7530df173a6f6888251aff718ef8ba97b45cfda18ebc3956ba67e0bbbf41f9a752e69fe0352399d2a4a4d0b344127a69ada9218f55047185d2dfdc44edeb61ba1eeb47bb855b4bb01622545a848ff2d7e68fdb759a425a093fd0e3c3f0a887e879ea7f15bc1d7c6e674743ee6c7a9c1fd4168232d84942074a1805862e208864ca6c87e7d04922cc9f4e82a840e601cc3ed168c1ce28b329905e55bc8d17f6df12f67f49b06419c01a04d0505aac77b86b39edb9f20aeee5ee5115e95b9ed440032a396aacc52b7055411a18b2c8361f6d445a6ed74804497ac916016333047d41a2c093715323a7cd416840e1d7e6022615f533ca4c1a6b02fca118246eb1d4477b2bd6347ee0259ec89c4b7b5ebc020e17f002f49fbef3dffea4a9f9bdec4c2c69ee3f1bda5a5404c6765548ee84efef91bd0b200b191251afbd0e72df691d1c5c6de28b43022123124cee5a9cd150e9a0e9109247cda9ee910afad9722c645768b7766a6bc0b9aee2b70e2b7b648b1201fdbd708e4b428eecba653006a0d6b889f4d8a6040aae21f7790076c268b561f9ca7c451c6c62836864b5baaf33890191be68c94d62fe543408197090ab2685f522e3de2dd94f7cdbab5c979300e0de74434d09ed34a430b3fb2c2fad964142b5efeebee42bd0415ce9b76c96c617e86514ba11f85a5c2741246cd797294d0931e0760d7ad5721d04954ff6f03751c52a1300c1ba571e77cddbd99ce7de7ec2a16cb67862d3b35dafc6a9544f24c3beba2e9c7ecd33341f7b6795c40b0bfedee76a1f6d6ae9b2ad383a448fdf90c9aec599a2f106c8ca5cc38a04e89d3864525b4397ab3812bf9d20162cbcbb3485c0c25feac103e0819c3beff817366cf284e50f5afbf2b5a424f187895030356bbd8bc65725d8bd17909183cd3feb57537084a669260a5170a6cbe490c34d2252f414bb637d0a98fc2df275bf7a1274faf556fc709a468b0560a801de538c4679993d1bde38f6f37a275e47503489ba44bc62bf4cd3008b14ce7f60a6db510aa627939f541455536e47410e7f8e7f6cca4979621c967a78e838cd25ccf926a10e3999177e3a09f6761c34dcb083f13151fe424f759b98c2051dacec3ba48fe3d1507bff0896d8086d5c6d857c56b5688caa0f79cda721c652d8457c8cdaa6d252676fac9ed1beb03d60f61cb153cd58da1f9621c8b1c4970d44811e0d64e5435bf09b90ebc91fb11afc34795a8f5a74a8fe1ac6c72acf4951aa004ee6367c3c01d54a292339544957a6f0e8edea09d65d55b53dd1be52e0800e0ac43402091e25ebf9e24e425038386e6d72bdfd777a90a1d0000f8ab2dd5f553ba3bb32aada78be5d9bdff510f3cc2e278f699d4d69925379c99b5875c6bb8d9a6ee5c8de2cdeb0b2ca508837628ecbbf1ba240c31e059a7a9508acba7e3c33b283f2ef8dc5cf0d52fd7e10523e23097bbbb354f5738241351c3696a4098aa54ed6744c71e1336ee61135e937d19f04c248fbf48de362064e1d8ff4751f58f74844c7b5f5c489f0a159aac1f73a0dd315c5a378a5f441ccdee19d3108e554ff96bed005406c7ee2bda7e7fd700bcef3d2b1dd676ded9b587011ebdd2a3b82c8284663e4d29ca6d20213bd6bd43b95a5f3e5ac0e80536e264464ed82bc329930c16401dc1c8c308db258b5409563a1601de555b5c024993fd2eb975b8599f078d022192dfbe570551bd85a6f79b52d6148a286ed31bb479db0d8a391e71994003fae27dad68c0963cd855f1335cdf21adbc38663d974d9b07c80fd4ddb2f92b4c5f3cc1aa35fa04db06ace51724cdfc81822518cdded0898e9c40ce9948c5a488d277ce2a03f49308a1452c0b7e74b44b3c68cf11e13b60b4bc0c88a100c764be9c80a52f950abf872605ffe12c1b47073dd97dfa7ff9993ae40ab45b4889e929a35407baabe0cef0831be9ac8dc9292be6d1e395ef4ba93d8c1cd65f69f23a1a77a03356bd064bdf2a4600c9037246d894488d05755c1dcf2072f565daeb0bc6521148c3db0b3668932696b06c14e25b9b22021047e5b48a64e95420b3e51aa34e785eace950f3e9b02126a4e3a9dc560d56378458cc38c8f596524aab3b2851004847bfbc80a5df5aeb4720e6240da7d3ec65df18da28d84817628d80614230eb6c29e24fd0ed5c83877e927ace053f73be0c9dcf99a5a94eba51b9c8e87bdfd305fa357b64855951da623a3aed16e28b7ce1c609de11f6a9ee16f436cf43bb753498688a6f8e90dc621baf3a843620a67f90bf38ba319460cd1fbee7fff5d94368af44bb241c02144dd31b7db0487b1d07aa722a55cffaf40fc17f1315f8456998a4bd742a294064f2c334a334293e2ee62ee5bc8c9844cd4b0d01ead08938b140c614f3ea247c1d4718f45568dc1b49374f5d75d2b9f02d4a96befc3d1a06bc0aa33b0adfa6097cf496f5647b7c911d681fed06b67291faef158b88d241617968efc90d1496863438ac6d8cc0df3399e2fc1f816dae15989991c69898813c895c351480b6aceb120df5acbbf8a7652bcd81292ac35a12fbf2061ff157b2f152ac7324ff5e2610662cfa947daaa5a8e879da6a633214c81061e3acf6b7f1313b79e516679161ccaf0a9aaad88b1b346ae75f5d3174205dd3ea072c29e812eebb7250185d2ff129690aaf2efe0171e1ec40b1054a87507696baf12296078e8e6fbe6b638b6fb8622e9c3a09931c198c0afbb2c90eedca26823f4128de67d158995b229269246531bc540b57196f547ed1281537fd304004829c7e7e4cdc99343175882fb7990ce020833609b7636d653a1ddba016c71b64a2d8ec7b2085352cc5e8f9a9d3a35e36f7c9766bafea4d4255f63c6e79f0ddb3d36e05b3a4dbf7e066aa95ab84bcb63c8b289ef0d61064b0a71d5fc0b6648801d6d6412a1ad21ac25230eaed0951e106c469b9172c65cf2d4a67ae438c6c73c34a1585a38640c0e7ea0a017e8bfddfb028764b746b1ae3818504ba22eff5543e31c5bf702911fe3fddab678bc1a20720c15b122014c303cb4c141b445b57506b163d28f1653deb9d2e30185e7058b80833292cefe9a5ce741ec6586cebd7e03c0a479e72dc1d1c4d91f5f3900381e1657c0dea70e58466e43de54000ceaa5636ff7c62bd2ac3cbfb910ef3cf1b7fad1defa4eb4a6091836b5f9b054d94db08be4428d1e4fdab4a53bc9dbb7f75f661b4ac4473561030b5287c174d9f1bf622664c648434ccccb4029794e82635d53aeb9beef5c789b75b92200388df06b2bf8a269f0408e0d14cf78ffa4763a193bb239416a91bd3427fb51dee4637a727245b1bf2757d754035d33f167710a2a31fa52c4413d37fa546f8ed9e72c7dc32b6b906bda32cc6d127e03747c13e1dfacb43143d2de86e6967ba7fd126ae9e34faaf4eafdd7887e30a82094af3d0408d2d43bd67be0c7ab9db672caca2d7cf6319cd00ff458e71b141d6873ab04bc11ffa4679c3d9c9066e16fa3781c014a2bf090327efd55b55b0f9fe6f3d3c890720d14d10960cb5bd029ad6bcd81532efd1478583971a343735c8e435d94e9e8c1d0bc25943bbbf4a4768a3e5a8f9fc2320107b73d23fd26dd08091bce34e4c2e35e0cf7421c323ee6169a85705d9c2d199a5bcf9e18326566cfd97fa15f0c3af3f0135c87f3ad8583f1006e18e772cce0d17c04fc6102b48789b2abf88d3927cf88ccac6916e32fc558b549b39476840f8d03e85560dcb4f194d1c7354febf2b85058c7492cc97d6dfe62e308551a742da1abb1c0b5f6bd589a0bdb0a5e510e71a3eb2a1a999749ef51726d804a1aa158539265a7d4f5dc4cfd8dc68982dcb2a3d9ebeedbf9ec27f5e5fb43e872bcb87ee473e600f30a6ff4eb408e99faf66729654769d23e014468284530b5cc32854e83f88d7f71176d759b2c621c2d3c64f75a734d11d6d745a6c529428267a525239bba6be59ae65ed8af89ef7df9cc4d4513df2a2fdedaeefdbf3aac469ae888191f2ff2916c1412f6e90774f6a1de6d389f520fb01c839111745c014f28d48161b7e18304e1126355200b82d57883a3e92817df19d33ec72ad3e2518c6fc8bceaeb4249369becd9f661a1d0348bb600671b343204f3421ff6bd6342aae3388692c475d112f8c7ac4d7a38ec8357948b8336afeee4e9d33afb615dceed95facc20b875aeefd8b82d20a8b55f12f4fec5da2b63b4655ec1793dc79aa015263dd2e32f66f55b1e6f8bc06d66bcd2e6314aa9c306bbf510108ba2ead8b3e0c73667d3fdfc4e87ba57b7af39de2fb69c452670976e212638eb35a3cd3ae42b17430618280a809835d9b6ef92fa8e5688c57267f263409a1743ec63dc034f587923c5f7afbd65f482b4b8694dc509c97a01dedca6ac71f59b71e371b5eb04aefab5f139d36112c0ae5ab20baa5e105b90ef833947da58e2c33aafd06c2031f5530f2ba97e9c16fba7ede5433a81f570c02299bce2fd8c1af283e6011f9d7ac4c2edf643a679b92f51be4ff975c7f6489daee309189d5cc7c55209fd1da9151e7114e4858f6e8ddd9aeaa03b367a7a4f3b322359ba383aa846d9319f472c1b535317dacf60ece9c50e6c7c0c4953bb1d24e165cef7be30e189534f6938140e9e69114430ad5aea4ebf1b2016da27a157c51b1bb66192f2c347df67295a8bd606b3b6a6bf4734fd7202d64f5860b9efedf61db2d8e04cab3340e77843af326bb5f15b81fe7aa1e3a1dae9b211b3743ccdd7e6905ebe17db1c324b2c28c1fe809adb608f2931b9fda023d7a7aac60d3d37be7d447197e74ff3fb429697c6e7e2bbb2a4cf17b0f35b4027a76ceeb4e489007189e7b90d4acea2057c88f649ca7a8e066c306b2f031d47c4fcaa8df49d31b803cc2520ea828a45aadc15d3a045b2008c69f5d97aef391d4fe92008f96439b1997ca2f4e14e65aac87d14f339e9aba4774c6a9e46d8d4bef2c14c7ce0d081e20b4700ab7663a0766ee1583a63a5ec6cc98a607006dac4e8e59a2e8aac343887cbffedc17752384c72762f4f4d1d9a774d16b66d5e167e5a7fa612c46b7125d55605c79d448fccdca010a9c3f17cbe9f5ae1bedaf373be97ff75d07efb05ddf2f3820447682ce2bcdb0b1c8c7334f464ced7da16690d7d6f6c833e7076f454071a2ca876cb813e42eb9a6be719a4e51aef7411bb6e81229945975021ce97ceb9802e56a16fb9b1585c2d941d4b20139a892d3c1c3db2e11c5cd010528870159af39ea35679eb30dcd01f4a3aebdf0c3d5e320969c502e142c2368fac6e3929c3a5e1fd03221b63e85aef058820ebcff437f06dbe498e55ada3b19e700e8ff86a621f91b8ffe799393cd95bc613338f6e1eb32dfd783ec274d15f0a51ea2570a868816062dc0b610ee24b67a0ac87d7cebd930b1a5884ac1eaa99980497a9915094c2e7ea3405d3d6b51edccfbb1b1419e007f3cc915aa695674eea26ae6fe48a3bb8085af7ae0b932a526b0d5b34f2c3b50488ca870c2ceb55016327da501349d86e015e13b84d12411cdbd37671a7b58074a1a5e5be54ea62f6708cf865fc66c9c45704fb5e1814e8d3c586f933a9d7d10371aec85292be4e76fae50963c6a16095e1c7c7ab254bb889f493c1a591275e0b2bceb4ffa1466661c80fcb9063879f4b72a199fabe380480740188340b7ac95277d4e45003c979337fd280632d320c3e994b682b51a9d62930df5c381b13417234719c49bf6098e0949c3ecb7696081aee9bd8b3cc52d96f6b0f30d82b4ba7fa8a9298ced89b6bc0bc2819978b82ebc5bc0a51a67469df2c230f80fb79fbd5c6fbfe537563d4f9f7f7c45a4253a349534039b65a3ae0870404f207b0f61044400d52d2ece0136fc7d4e99a9af9d1434e91069fb8a77ad14c0309bcf17324a0fb8b552c462cc8fc4d6765b8763a2f3a8153eb2fa6b54c3c1021473e1e8f2dc9236fc6b9f43e041b587f001a2a267d94875b46879157428efb4c7392aafeba822f998b15c04c88fc291972124aab8ea2b6e6f8a21c4002d3b1dd778a4f8e698f22036a9d7c92b079cdf5f8bd0f5d73e33841c7a713797090dd507c92efd3f5923a685f90acce99876eabb05530dae5a32daec50447a583e3385fcc8183764f8d080e3677ab10f93b23eaf69d643b7cdd71ad08eebd8c5296860a4a645b8d6db74b2801317033ca97273799c4586026445c458238e44126871f4cff45fc64f51e840e11ca2f0bd9e939797efe5a353aece296c1024be2c4a203e1ea42d52f748e95b4a17be0214cec157954e893c8043442c7f368be1623ac930696036a7e653b8e6a69a0fa2073ca2a31b3c43caf6a97105e253f9aa55e2f04e04380eeb81755bb6841569105c05c3dcf1be889ef1e8dc418e8f3000f1d3a22bf3f678996e2ae2d29ec15cb55e611c4ed05cb75f1f7ebd347a177202d2685d78dcf27139142aa0e0e28190639b2b3cb7659681997ea46e354f6815c460094806a61137fcf7b950ee3736e9cd7dd7e95257e870d4bfc7f1203ddecf89689e3c5d2362076b11bb2805c56f2003015de30dd5094c46a73777488097be11cd92a61eaf98e46cbb4b8d10dc1da327292dedc72b79f378d61ea6713efe5ad99753aed95d64a3c1de4d103f4bf1a5dc9e25ceace213f384c3b0eb02c231f341aa227d37f37b06db0916c8578daefad0feabc262ac4b4e220fb2de71a852541fec56991c0e8a8c440708cfc63452ab79aed60724a376b3a6adbfe8f7aecbb77a78466876e081614d64914029cd074ef04a7b47f598eb3ae75362782f1d81484b4bc01cb958db2167f021f5ccd1e833739d24d8d67cfbdf7e127714f3946587452aba959a33e9ed8b66d0a18c198472c0bdb1d6db0a447beaa45ae9d9ec61eaca2bb718b0db9c7bf52284dbc785efb581d19403adf02268cac2f98419dba3b2f78d8e107ff531672ae840c7ecc7329814e5dd45c384f3b68666d0fd8cb77763f8bbc47b9adccf96fd735ed2bceb4eb7be09c84b2c91e4a93a55c4fecfcbaca96d2ac95458643c4d127cd8f227c0873387876982a6490dedd68b06fc89883f21e9033752de0dbd1fe17afebb152f6042aa1627ffa5812b9fb89ab7bba76c24b435c34d1983647882ca1a57fe3a1a345cca4b47ac43031cbde73f103e7f7fdcd4832f5fe892e8036e75cb77fe539aa6f3b43b483c0732c1017a0ad4f2a5be869b2e3e22a608b575808ff168a9a2549bfece94aa8e1a4d11613c89b64bd8b9cb84d9b2d7f5ec1400cf47e31c6121e47c8a11f5cc69ea8343b6d55a4fbbc3e024e739ca8de6983c6b54c8219695379e4eb0814083a50f760de900e55b5ea39c4c8de2c698a5947d2168d11a710bdc209a5c4b21aceae6b5c452e39fa4f6ebc8558cb41d46c9923fa5fa4fa11555af6d26f093016a5f48ccc504792427b5445a4b30c78f8c321c3edc984d849a3a362db8f4c32cb7249e0e027bab183e906cd0f3bf11cf0e2d18b0f5774a94c4da97dc0911b85b49d8494151b585aec016b7963ffbd8ca05e38a6d586a48fa9404b576626ee2046a439816adca246adf89eecbe3ee69b051771e077c484203ee97d6d882886ebe2a780deccee82e7c61d083df8caf3e1ff4409db92d29ed970368104cbd3cdd3d493510d35fa16349686ea07ac081fd9711366e9562d6a00740d2e5124d44745750654d7a57daace1a3f24f18df2f101484822a5a400ee08898896eb897d4735fe3ab82cc402b6531a297ee82963a042ef01614770db1a299a04d49d8a2e6c98134494bf0b5373acf42289b3e3819046dc27ec2cb8ad2d2a18aaf687d67aaed491626d22776e8400cc32ca9f9ff3eb741407403c1fb9611b3668d45512ec7237612c046a3b06dadfb9c9ea512871cb3d94407a60f25b9c31757d9f4d7738190784d15f267fec2ec3eb38c1a15bf2bddd08ae40fe1a8c6df371a305a5f392473d5cc6e9e4746f7ec0c4e33810b990b51ca7e3a76699f7fa2ea437de178b7a724d51137eaad371112da2510d5c60afc39830e22b7236cb04a90f0d24c54a7e1c2d415facbe7ba18086e62b626d35e3b50616718ed3301e0954aad4ff601e2d5531a27f5705f887e780805a1b1255bbebd3a7654e50703564b615b29677f704e03ee12b300ccc104ae292d47366a33cd09e4e4650543ef50be565e240763ef5459b409dae2329939ea98bd99b941e3025fe2ce92af44489d40902cbc139c8df6ab32d16d801421655997dbd5205ab8e6bd1c0be1269ae1c65cde2b98f0ab8c507c3994122df51bacbc071af593f871ab631593797256081aaa35b2014bd8be7530310ade11a6bc4c25f26e5deae44ac14b61600af628b6ef294ac0a77dcff6dbeb3f21716f2bb559fcff2441cdbd72224d979eb6fa249d31d89da8a187a17c6f1c8b88b3f5f9a3617cfd1b1e7a0bad8794825a998b4a125f5514ae6b5e3cb1313d9573d72386d3ceda346ae4dd65f4e985bb06ed1f1270141b498c28c3270ffd88d10eecdc57fd786643049d234b0019644cd1ffc67f1e3cff6f3043d18f4458d875570550351e553a4699dc62b37539e74ad3fffa41d3d057d884a3f912b7d1374fd911bf9d6e8b815960792d202f38caea4087e641033bad181301933ccf516de370afb75c2559804054e0997b1867f886c161a965e2a15b7c3b4da82bf2b80c2739ed813e974bcfec32379e9211cd7d2b6785d99cca6b6a74cd34b79b62b58933784d1ad4957e7cb01a743d784d9267d9c8360d7b8af29c31ffa0a491247d41d36a18a64ce9b0b92b448c2aee38de0a1fe69cda48c7891b655cb3a744b1ac077e52cffd4cbd981436b9b703be9512a27c7b50ab3aa76ae0c60757f4e781473a5def105ccd5730458957d764226c5cc9a7394d8be3092452fc75fc38b8b3617144a9efb30353b4af15a2c3d8ba17bd57377ef34e4ae1a6f4237ac0bf120b82ea9ffe8ee2eb18c915e221cc71ccd6b81e1d34247deb09fe1c1b726d9703c3ca87ad05aa7cf6ef62a340016937dbffb3f32b6fafab55c1407687ac82e12e2a346f94560a49fee3a5a9ccab540952b43f7ee8541a9134789dbddedf1668543ea95076c7c32666e13ec07aea24459c7f79da25b92fba94202c70143edaa4a3888c87a0896d71273d6b4a04e3dcaa79ab5bc54b7213775355ccecb94ce58a888b476a9de8129ed2246d56255bddefac3e6b94f5e5c7aed90a7b533cd11c6d2b6a54a5a49d0d5b9ecb1d3ff673751f8b6a209786dba616aad1651fccf79e18a3687c03b2584c41a90605bdc961edbb1383b951d0615a80dd61e28a9c879bb0623779cd280ee56b92af0eec67319c1566dc6c888fa7811195cd72414835214b5b803ad66a816c471fa2a473c826a5eb0107b2f0ec56e258c9993475b79b3c8f86b82f96d657d5c095eb9a1f3930403374dff3b7de8856b8ca2661ef57c89c13f74534ddd366288798b17c2c7958d21745a1d5f5b87c3a329785f08b7be91dc128d645617370c3f1e23c0d3c0f98a9810ae64c8b59d6dea7a0fb7026cdd0760f9628fa820a5cd477ef0db300f679abe6a66e511cf705086b7bf7b3ed815c5c8573a476d08021ec31341d2a067db984c9c77f301f941fc6b88377369713e1008e70a2e6e77c5e7c12405d47bcba532922a35c890772ea5d390f82d18735e2641b16477840b80d43142bf2ee3b64b197e03e7787672857fc6e269e508552328af78d0b4d806f75ceb1a00e83e7a4dfbb3006974ca45329adc08668a1f28bd375b46c01e133114a0ae1870d80c9724d54190c52ff2ae8a75fcbfd84ea5fe8870a352262d6a6644e4b72a42e03f0ff0ac4ab07555360e6cd424ac0c984c79a8c3c5eddf12b7738efb29bc22c1483385ea6eb7050b47d61c4ed10280c11ee59d5200380ad586e71fb51d2cf4ff5fc6147b36b691b86858f1a578df34c25ac246a9c45b67a961e60304d1a8110afe59bf76897f5be5eec69e2218f9b083cd5190e9eb53b61dcdad74c0cd1eb756fae923822562a35a12239217c05496eee4dcd6c724bc6de6492ac76910592494235731483418dd0182fe556f025d42ecd2966bc57303692fb0983bf064bade3ad1e36de559083bba7588e96fdaa3ff12ab95ce231b0eff0f11d5b3f30e4280fa10a49fd4089933638217f67d12bab83888dedfafb0e793e9cce72da0bb7c07dcdaec00f6d3ec03818cbd5add804faa9d898e6b69f4f3e69515af0823c3dedde0ef9285adeef722aef9bbbe56394d38774b438fe41a247b33a22a77d7cd3fb7b28552bac375a92dfdd5705e44a5a7af772b56dcebbc48bb49e2b7f803ca1cf93abe1322ed25e089b819a9430b36f047591914b61fbe04d46064d07322fc2b66b4aaff78667361ff213b9caee6a813c9f4545967a5ff17c11befaec968f727cf1433b2290456d1d7f1141aa85db3d114a55917694576b1e5bdbae1a2fc414230f27d64967f0e627df18fd600ba0ca668f2224abc2d29763cac295bd4587ecd49d1781e70c919d25a75c1bc5e3571ec824cccd3e5a2157e8e08e06e9cc1787afb3aa02c85651043dfb45bb1df55a2eab4ddee42f6293ec03224f401a9ab45a5753f5f81ea78be7ebd8956b2957be2652f5c3785953bd54dd1fed1c1e0e69c4d336f789253113366ba2b2e5a4f6ce93d54c5d09cdd4f4f2c6e99c71f3939a553c71e4e49738d0b9784859c79eaeb7f259f7081a9b2b9e9da67b7807da371572139ea7dd55c4ff821400a8b5eea114baa6206c1313bcee2f30563e34daca28a8236701c651e5e2d0b0cad1ed4afc1035524477f36363a57d269c4ed1687c5dd561fd0b2aa6fe9a236d99ea484e9ee9e08d62ea1bbf2e1eac57430e9dc904003be1883a8bffd75eb2515479e5d451c6c49fa6636c99a55e005a24fe298762e98952328205f5e80ceeee36e411d5c069a2474ad99bd00c6b1b7163589cda902b29e3aecf671a8f79a8f5285cf86335de55bf6bf540e819959400d4225612f4d3cc4a46f7f38b51822a87dc2ae55024f163e891e28fbad3be46e08ab6d96652b7d20b8199963f92520566abcba272f4baaefa3a1e14165a8b0b4309d7752b58dee8eebfcc675e212bedab55d272dddf041bacdcb866494944f4db946d3f5317c26d9de9aa9c97b726bebdb268b81dd8e0bed0221d75ddc48688e6be9188c0241d560c55605d5154c134c7edc42103c70539e7b44e6a7c3a60438d1b7704d78089d081a059fa192edec15822d4a56cb644ba5c67b2700cd1d47f864a5e3a9070e02bf7bba545a38e9ab5e3e0993f0e2149d21869334b3eda3ed20731d05f20e28bfdcf774e4e184e373ec53d0abab61d9ba09e886f41d06fadf77001df39deb8746789cb6742a0d4fa5aabe0095e567dca40e96fc222f7dff5469a8bbe2a3e30296e4cbd4e4c5b704f8499eb0a9ca2b2d7d834ab7b180d21b493d74cddc66300c7842629702b3d9136118ad3c21034915db8417d376193b4ee274f576c00ee70cd2ba5228d754244a850e49bec0471285f4db765df084d185fcb0036b1e47d5bfa5ceb5c674d9d39958f2444be0ec41053bf062e284b762b6c227fc90d044193b2b4b162040afcd7c2804e84ae94c84350d364cdd9e76fa52385fd74d48ab69f5e61f1cff973f4ec6c4bedea0f10abe1d654332a197bfd249f5cb9a882a53954d460fcbda4983d479e8822ea45170d0cd1b25e88835e18de14457abacdf28c55fc470aac616224c5c68b9c38c799b5dacc204867ede0f9d8c60a87fd4c5239f446b9f3b3cd4ef353708a58c44c8814715e54d97c2f14579497b5188739c760b29a3a3479d423ed2802e7013cfd5952bdeb01752ea84b67a1aeb9ea07837d3d51142fb1ff6f27a11ef5ca8dc19741e611d8f0cfbcb437d0fb41c55cd1ac18d5ad7b49f59f2cdc0c2c4f0a31ac75fa43d81c60715eece010c2b1180b434d486b3f53040b84ee4c4cfca23c53e38c625d89d2ae4a47c374b25803c0c05e8c315aa2cfceb415535c380a4c1ab7bac5a6a55a4188a200da7861d959d3165fd5c14a710e01466d01504373e7d352f3d4303178f5718f1f611bf33b68943ebb4d9752f4c5404fe94d93881bab77409b78b749a0eba2738b2d147f3f6926b6d0ed4dfd75c27e9716b8a9f1d6fd4b23c55f9d9907416dbda2587c3ba2e7ceb5a16399cd8d04fd24afe6e596b9bbfff9cb0386d05abd4563c884c7bf6b2e42b77860c71b7167aebfd24546e97908ab5971a6ee90536836a2c1fcaf4d8181545304f9d2a46254df16df8822d29f9e6594566c8198dc3cfa40182cce9e6e10e926220a2b8daf97b902df19419b01e40e9cd252d972256f41c425b1264a67f183acd89044f4dd4e27bd37d6c3dfe406d8463055fb30b18cae68006f237917198139cd360ba9e4f2724f79828a8bfc7bd24fbe05c5011ab84dd67435c85b183cee5aa5328cd2570675560d503a844f2898d0bcced8759f6b012c4c30419b4469e204ac8ec5b737a27e94c34c2ec605a26c90f21ba1134d1c725e0f0c111e8efd103a908cdaaa2e85b49014599a24bc68de9d5d4d77fdfa92624a1340dfc8ca33d2b1a61fddf55dd93e56b6fd6d70f5efcd993f72144f3ed072b9feb39761c7754d303b8b1526ab9adc128a186cf05b1b420e8225fbe461a45a61b885b83a5cc049dafc906962c3ecbc1de606f9d154440cff6498b83d251c699fc0c8a14d69555912ffa338e099dc971cf2c58740d37b8f97a0547ea3d4c5b183561d79cae6b9a8d1580af6a84b0029df2d6d9ec408ac66e74af76bc9c2c58fa75da873abcb0f47a1b694f7aeeab3e53fabea1a254016f2d7256d569c3c08ac35b3ead424ed396bf482798c65c31e2b1c00b5090cb4be0c9730133fb9806320ab70a66124165142b3751155f352625f14c1546493cf660a7ca67325dc801dc040a0a0bdc15dbf1eb227be8a7fb003c1be8ef0c3ab760683a2e6e939121b4f2c47d57364fa11dc59928a1402617c637e9c984047aec8cc5f964189510a977d98866e42edb5aee4d073fec798bba8fc94ee7acaf97d7915754f3a6a8e326fec83cfbd5376597f023c1769e07cf50584c5df9587ccc630e943cc437cc95ca41a1f42f51459e5a39f2d80516af81522f585faa96a393789b9a4ab2a79e932293cb5193f33c3502aa5d30de06644eef8891ee1b2718cb2be4c9a2981e1b79e23b2f55a8daf817a6158c00391f32649f4cb6454e9f807354304431a576d5394454bbe3a952e860b2ea74558d3bc9d13412a605cb8572cf15cf0f61aeab81a170d584cc15a77a17306a01f81a8dc86af5c13f78d4ed5ee546fc7f1c9483f7f6c4b62152db4bbe1ac932b35089855ec3e1af17a220315f61fdfbed34c30452fec08c4679ce1e3216087d5aeab59f32540d9b4f996596cbcf9b65ce80a94917a0f66f57f01db0471351547da9682b2f4aac5c6b66126d6a39905840a6c6590b65a47389b1959ca1ba886a8202ae9367e45253546f9662eb88beda3183352c19952985ee21f3923e0e3c2c4189b5a67cecddf7bcb6e931f3b7f6820b0c73cb5bed63205ff94a0609443140216b418655f6482a8b689e292506b5b4f3e3b743e6cb19efd0b4a7f3f47e64ee46ce9d332b12cb280616c0ce32faf4a63b2d8a181cd4c75b9bbbfc0707ca50297a191b23f4b4fd0b7fc96dd6aa4737beb62a40abc26626ab9b06f28d3765ffa8a82d9ee1c03f91805ca0f74e01e7e08be4aba02099a74659cf473242960d07a9ba6b674f8554babfad95eb03fbcf3f9b9b2dcc8cd8fb01ff2ac8f4d62426782f89f083cfb34f6cdea5deb9e4ce4a6f666f45190d83a244a6e1c9da7f8a51ffcd90ab99786a10c48f1237cfdff21d6b0ae798c8448f6ea9f9d65ba3944db93841a0c7260628f54226e5e846bbf36fba642251e1a0feb383dc8123f2028c49f75014be6d43ef8640848fea30c6b2703f9dd47aae752bce6e4d74691b62f7c031e3e86c535b4d7ed44891bd8add56a2ab4c934ad1f965c1e1c589792084fd74dc276d527f812e493ca7298d8e8086567fa877f18e8ade0b790a0521a5c021bae0c7e14e1d1ed988c8da054096cb8b752df3e89b05921ae89c1832b3799dee40efe93beea7da119b513cc865826373feda8b7af542bf091dcb5ec4e66cb4881049b8e5676dac19cc9f64a23c305963df0df5d94f6581d9c5d2a8cc7593612d6550e4c89eac3bb97d47c43cfa2f98b3e02e23d1d5753bace9b9da77f0b534650a33b19208138160ad10a326e016fca7c30668cf0099c23ed55a9d89709a5fc7dd4f610a0750e47371815ce8769d202418689e4bae3d4e2940b9f6a998bc18bcf6ffc87caa608fb4b02ffb9b1ddcb0d3086569d6727df157241b60e170c46585e554a8df8de593e4a452004d2ed24af986eaa228c023592d7979593ffa29cebb1e088de47fb9ec2dde8d70b58bcde2b0d3369a0e0a36338ed22173a6df4190e1c2f57ecda5e73a74dee79227407b59aa55fdf07e4167dddb666eac11e48b7862b9ad09f03b77f518d95509ecea41e0bb0302ff83bdd63bf21ab137a303c7862c4bc06d666f12ec3943215a0ab30985e81d4712a8035d48966113feca247230569ef917f70318004168f364d59f27eafbaa0e8c967bf84821f25fbc1aa793ab934a48750bba0780447e1f90cc05b6b297f1e3aac8933f168c029c5a3cd366b2a8943b0a9a82d165c74d8e3c59ee064379b1637f53a2522f4b14c719f36041a21fb75d5c3763f032f04a621fe991456bbce5f8425174d1c96044b0861e4571b1df20cabe065c23b5304e014836356d5c3eef78d0273375ad59b0af5e108bc1b3d03360675282a5d23562d5abd28443fb89f8cd369339b24afd29dd29b9cb60c1131d9aa8c4faa0a41d0991a5cb33f85d26f1511fb30e470fcce7228181eb2b2285814548dc53c14792f5ee1a213d38217276521fa785230d3c24df56fd869f5b6e2d3ad064ed54ead1fccff668a58ad7babbcf8ef24d2af150cb2bb7bb56e672c53d82041b87dfb83824398103b3903448ba73f1864ff19111d3e04a353e5c867ce4bf3879878ac85a292045f8c9b3d1b4423a21614dbe4d968cae0c4aab03f7f2909bf3d737467eb684b51f6864f9136d03373015721ac83ede9c08c9728f1634fe127ec86f8bca4ce40345da69129809b9dd998998c0ae3cce590deac6c984e2dfb508f71e1d0515624bd74f00961895cda295509ebd330e03d9e2b728aa7613de3fa4bf24ed7e3a3465cb9adae7218cd678fc054be625c6a351af236f69ef437d15df61afb8fd895ade54edf806ecbde9951ea72a0048e30db1afb1b8c508f5d7b0df460441cbf492d79073201956cfef12d2ce398007bbc042024c6e888788a955ec9f08fe15cc2686a679b9d2927f26fb5973080c259f394ebd9bb3051f589e76cbad4265f831f24970ac3f72019dc2a18534e58b7745c835226fdae4e4e6264d87271aa7e27d1070e085d482a56cbc9f3da2ad1aee41b37bac91bf8bcdc8b01a4d1b008c5b82d3cb7afdb23100b05f9c3849d1177d673252aca89c9c69ad20de6ad54ff1f28376e2b4bf396e5614d1dd103479e834f86841352ab1a49778b6b2def5634fc7e2a315f081e7eec35517c006e9a056fb2ffc8e565ed902be2203ff64195ef0d180b5d21c9e3dcd909c635c4b205cdea466e0921630d0c2c0210e210c853b484e3980fe9610242d36dcd19623d5f431eba65e5a1f06cf1065ea4b14de053a2a0225a7157a6728fe013abf9a4c4dad436e277c5744dbf7711d9a0342e81592d71574def0113d00d3ada0dbc520caa096efb60af80e4bb7c3a873dfa9cae9f32535078d295e259b5c044cb16f31745b3f416af0181461899d39a3254b60936ea1b3e36cf584306591b76abd34bad0c1f22a5454da2a04509ff65b7d259b6a3966042da15bacc5b9227714c8ff016aa9c7a374b68b0bac94901beeec35c6d1ecfbb60f140c317613d8f0d5a6f1213fc8b79126e13cb76b311e3e23e965ca87ac145ff587f9a676cfda52a2f40b50a09b4b376336e384519b03836da843621f8b57da6f04ff75c86e8e6652f62a6fe602525d994493657da955566ab8401555dbf1e404767b47319a3055a208e9357eda90f26646c4872bc00e2a639243249e2c80f9232f22e6b2ce512a55eed8e299fa170e54cada6504663d4e2fb1a1cf75b05216cfb798393cb9d3a44355263971669fb5258b2cda72d09cd4356d8a8c0c535c4495dee44647310b67a871b139b444fa6d71cac879dcf037426f6b14ba945a11fdcd3764512c67d650e0eaec23250e4711096f632d8f671c8beb803ae379a178829ce43e62f2ee546b6c267551822464bf285ca66b05d3454b3a9ba0bd0489408dc74766a615bba258fc811981645a27ebae14b527f84de28ba75e0655734bb34c9f6b4955d607348b0f98f52b4751c86c3e8ab384c9adc86f4fe786cc6aaeec61b92fcf8d04d7cad5c77961c6b4410ee6422fd1468eaf93ca6842ad6959af068e8eb38a33dabcc47b1a621a4ca8244877e254bc31bebdb28442e03876609b8fed9905f7490b783219bfd4e1da39c5d7e3e83a0fe915e0df502dc9bc4e43af3fce39cb1c7a004db9ec62c44dd6dfb15e1c8a86432b9e54ce077f77823e564a91184ced76f58f414d6d57068a0b4c9c6c0d5e8be995db249ba6eb328b1aa4a66ae336e0c0986b6e19f958ac2c619898cc682c23ea8c3e2f9430f00d3073fc608bfe4304dc003a314c6763441390df4f0f32df4913aa69e807f69b9a1b799cc38b0f8c87f5b562eb1ec53ac18ed58083af6dc3a9889ff39f05325849f9816767c72ad5eba557850ed60b9cb73e431d516d645dcf5d82ca23674cbbbee54aabebb4e6eccdae957d42e308d58bfab8d9ba85ffaf2fbb30c1138f4cdfb9b02aa9c548e9d0143496b020ea573fe62bf400f567eb851ca1371b86e14fd1abbb28596ba3a8c94b31900f14ff408e3257ebae972ecc2db9bdc1309a8f5b8c9479d539f7b465ce12215d06ff67a83d19a7a25012c646995ec766c20a5e745b7f627184b1a876d776bdf3100a0215ad133f69485955206309d8268886f4724cd24ad0d18a5c7e9c4f6e8631581facc443bdea13537f6512cd12d22f8b7d23ab6fdd0984204577fd001e7e3acf41e245b6b5dd8e7664f710999d523b399c6e2ae2706d0b4ac21f7b50c054a0df7d68300f49d01b05d03f6dfe54033958b90cdf4dbad16781d62edc6e87e41e080253e2588734aedf10c189656b4f6509772de05a3d2e11d8fee2d0fe79f9da1f6e6c4b6b703a9f9b51ca75ce0bdd53f083a033afb6e796769a8c65b5854811e279af3cde24d6eebec17b9ff27a3e5b420660eb0ad6825ce4818e8553a4a89024778a89f16e5afb6483107c78013af07e20321ca6eeae87ff836e3a20c951ee5a1edde8823a9e18a9557802a2a460e5d8172ea18044518438f5a7a87586a88f29b76f4552f653a63e28053c896a303f8ef650a97a5b835c44a25dfd5c4a840e1bac874804c956d615570efc83b6f8441bb8b0afeaa8d432635cedb370dbd70c89213d891e7c1b010c184a10acbca389a7966d97af7d7c320508fd2764b505bca69f7679c3e51255cfa57999c427997ba9ffeb7231de6fbcdecbb764ee151dcf7d1e05acd5c4cdb16403c7e7538dcb282ddddfe80bd02d236b632a9703f9fd4c09473fd7f69f9570c780b09b58c9cda97021df3335fc3350f383196bd20fe2953480fca9ec9806f7d661ad3013a33cb12aa3d92b8076f97283063fdd4fc933b37d481b54074ba705c3ea32c454753cab5e64d82440854c67705ddedfd3b937082f21fd256024f2b8098ff4212d824263b9fd24a8cb7b91ea0944ea03221f686161db715cd8c107f899e25d9d0708ec61e1d338776c14748c16f235812287d38bf6465350879f3e91d65342c8bd0dcda153206bb2e8b926f774bf2ce686317e86b86caaa2ff22efeb20f2557b139cd3e9551debb868dae2965116ae3f74d1d0606481ce6d0cac787dd9f869042d0f1188053771dac1e8b7a2e2116e3f4bc41cee0f04810eaf8a3eb8ae1351170038bb33022b12f20d9bcc2e7757a3f941ac329156c1021f1478814aea389806c1cbb368f8d90bd00f51214878813cf9fd964fe5d0f52b9542bb1bccd9eb132791e089fed76f728b1f544480255d18fa82db4c8828ebbdab8d14d4819fcb2ea62a71643cb947502a30683e3cd5bab64a1395a2f8dedbc588bdb90e2814f61afe7b900271d1fe74a5e1378d8f8f47f928df944916774464ccc75912956dd07781e39441d82cab07d133fdba2aa422f1fc7255160b1cb6f345d522b215ebb6ca095419c86488b85fa2c122b7c6f1f883b5453afc71eaa76571d8d0872ffa5f1c8df7fc26afd249ae00438414b3c2230e0fb069ca4360dc413032c4734bae22446c72763d81cb70392954dbd41cdc99de31db9efdd07f73a940ab2149da4529926617fbbdf1c444b59050ce9f11288c522101d90434f326456991a57fbf756dc8b3aeeabd859516065538dac566c7a737e8e101d3e2cf4e9122f178828320a547762901a136cc8d7152d8dfa7c077fb4195039cde1729399cc1892bc7401c1b1c277e65f16571c238a066984c355661840427967204cb9c6397d5a4fe5ccf6777691122cb586c0879a7ccc085190d9dd828b3603759f73465d125185955f92b3e1bd13228bccac8c8e430e1c60e7ab147ddc4b5b22f9240d13d79de731298354e2f4d3d042921b1a0220c521cdc7ed52010f7069c96c36cda54a173c310ff916925767b88e247c66f797ea84e222177b37539505a036d606fe65b8a900d73032120595cedb575610401ced829cb389771d7ff1b09f32870ca918a8b6475cdd6558d90e5d2af8e82d91c0de704a45b1a8c60a8bd3d364dc1d6dda03e54a5a6574bf0a2164d5634b748cfa7a5b3614daeaf8724d3a741e5a41ce5d5f27b42f827d9b7aa3cc39ca3aa47d8d50464c6ce82f1e0bb3920f60cbb4dbd7c4d50f3443be861445991b223a8a0d8eea10ed45c2584c381d3d2715217fc55d5741682c497023e90c6d7be67937dc7083ee53248914e72db9b4c570f09973576a1ca97aa648b22ba29f4cd6395e943cc624b7ae5ba1202639ba49731f56cbf480c7c6ef32e5cc911e7c1384debdd5609841cea4fa7ee9661e61f47d510d314fa0d545d3b3cb3c82b51148c2d386dd7784e6c9520c24ab3bf99e421516676089c6970adb7b0a77f6567a32ff914954d0c7e90e9a999e92f484057eacdb45de24169418ae66e71da1b188624d2467858fb264c1d3657fea726c0d1e1881d0df0579a2b91d0c88900b51a530c9740c850fe20e5f4e2dd821724b82fb66a582e083969af4bb2107842e41f886eff4dd83f149ceb9f5e4ad618231863aa23d1d1ef0f2386892410c5d13243ef03ea9ee78439e41385d1f52f79eb7e53815edc76dfa7a522736b3ac333feaccd168fcc88ca4051812bcf3847a447b570c944782dfadd68dae1093d53461cea9e450001e240e6a62986977f27ee1f0043e6dab9d793f2bed41ed8b28126f11abdd68f58e9314ba24192f812073517ab270fbef629fa3977527d48482e1a7e1d11be756e0eb3e55b1cc06b996342f24b0a4ab70f99407714c19a837614d8dcb4fbd3654f0956d06ed86085772c7dc7406a9b4df2e6bd27f3d06e0e2e753a713ba84f777ed9e567988e8ccc4a07c5f186a3c1de20f8cfde0cfd84797a283674853ffc8f9cd88239139166531d1bbed9b0dac8c6503ca33f8cce9b6696fb4fb9f6277d0c18cf3db24f464bebff7deccc9b6d8740be202ea922f12e74a12a91f06cebc5785934a3fe32d0efef43e5d7051fb39afbb7416372db7e1469431f73bbfead1c056da1867fe8ff0a4e6de1f5cd6684e59f55d99fbc7580a4a87fb54d947eddbd70b9cc8f0b1cf57bb645dad00fe4a8a6874ab990205876c95cb0424b961ec8e469e9ba4cc23d1d7be4af076e23d37415c0876f9ab3699d38184d55dcf259dee83d0d15103b9650f77ccd3f3b9bab51f161caddfd63b7b763d41a0beda7882303dda03fdd0f1ed81f04bf762a5b95fb738bbdbc1ee7bb69bbd92579bb044187680a3ede35d0c3807c427528ceef62e7577715955c086fa8ed029426726e4f3671900d1b3a136e7a83ebd4e29a30e17fd48ba784b958a0622b4fe3c3476c2c39d8bcb6ddfc7b0ff68e363a03cd813662c1b91b306f1140f1e81d6bf5069334c82e579cb5c2946a00df829921cf65346a3adae972e215b00077e9b8d17a27584f131ce4e3b0ac854c7e16d7c3d15d2e1cf22e4556dcb2746d9f6aaec1ef4be654626eb124caceb4b4d84738e8d31bf690bc0df63318969377ef3d72b4ce991ff55a3b1f6d0c86d7392b7401245043ae59c095d983102260b92204b3325b5efa60b66dd205c0cfb1c72aaebcb342a480a5a46d5e73a27caf1fb305b39c3167c34c7c0577da20ce1fd1b39e380d808b39daf05b14f8edba44a51d8abdc0ead9365466127f2ba3ee94819c136d9be04422d52d23092c6c2941b0bddeddee989a68df4d777c7639e8af3075a195818f46d9172e386ce0f2b6406c2658e597e49275a25019100dc4eddf20b5a12441289842ceff3aada83527011a932d04281bd9ef811866c2c4650045633cf351bc992e9989292f9a0d08dd9008c2898de38e58306dd8b47854eacc167016f9f760afc930fe9d41cc7ed0123b87992e2b72d88ce0e37b53e2c96e52e6bf4de735ecb5d5e1bd04cdbf6a8ee3a0e57a52021df5194294cf7b6a51d8b6b4062f82aa0fdbd6953242ce94889fcf0bd8ca20a49fa3e3e1338ecf0e1dcbe70b391922aeec777df88c36cffa7c09f9518bf3fdf56c5872711de13b38d0c51db6985cdcee6480e777974a3216299c967495bd057ac5de3b1cbddbc6a5e4fe8f948a393ed6c4387244849038ea8b83685cac787b7b6b173d6155ba37d266f9b72dc60f385d35913adc94195d7c362534e4570cf6add8ccd3c4f31e8d36f53e51c05a5c13ffe92f18f5590dc8c1ff5e1ab1c0b2006393569d659e8c4799f05f561931e940103366b8c4de20fd45e3134c07843ef02de403bf4ad447a3242ea09328fc68bca7d3184f2cd6a44ff38fb337e8a67ac96113fb8df430a99617ce052854952307bf30e083605f5bbd410e6d1644eb1d1dd11fdbd1bb452d42abf0214f77ec4f6eb9f176c6c7ee2cd9eb3214475efef3ff51aa0d4f1629c663e2e476b251d07425701e54049cb9c7ac17c8326d473ba47afce8f0ad5b91fb735b4dab46f510126a523ed386759b94674c96cd278e77f00d38ad9e78fc978da3ba7cb2db7c51346f931e3a5b509b5dabe9f7486c85357e8d3c51a5c8d16230c49594c78de3aa3708a95461e958d5a34f8abac9fa7c3469ac2621a37016877184546bffdbbdcbc8af5f1a750455442d26d06b6fa8493b09fe7b6545364b60e7a364f8c24fe1fe5ff336c3f1824e819328d2e610c9b4e03ebf61ae687fb88b8a95a83dd90c1c16b4e3ac5c5cfb04a9264674f702c89966bfc2fd270b5166d33c27467a5ed11a117d0bd8fc86e58406c0ddf349597a738d358a3979f13eacb0256d13aab082d796cbc28f2b36cca72f5572ab9a0c5929f6d1f4181c88416c3e6577fe67a50b6a19bffbdc60ead176c4ff243ecd8382938530e659ad7bcc1477dddf822a7b72b17a56746abbd55fdc06d96bee32595763046c8d22e473012fcd4ff0e77e106d806267569b364ef1fe4f95af58c5c4e351beb0c59e41d895e7598b16be69f42c97b7fff5bd7741b273da7b042a0972a7a3c9433530722fb56e0fffc86b329ed632cadd3f2ce7dde62ebb79b00e074e3a35ff1733a6073bb4cbd14d3ae69aac42b08032e9503d6714b45fa5bedba400346e9ba0f456115e5ad21a1aecff8a79a7f382c550f9539087d6845024e3d4a4704de99362a0c0b2523d5b1ecd9e4ce54107f16a106b11415597d466c66e4229b1801731847c298545f18edda07ec2a62cf34eba53ae455e6779a1d76e6fd2e1d34ecaef9997482e931e36f177513bf48d6e8bc1b5f496c9805345dcef1f8d74ff3a6c1353e3111766ea49783615a496608ed54e997d3476a64c8835a532eee9b2315b9939de13b438b368d87e0af996d6eecb32393ac32eb836ed774bb7633940a8c1464a901ce763b5e5424373dbc44e1db15d8d4a39ab562a610ef10f130ddeea666d32062792f9c01f7b93790fe8116244b338dc12ea08c475bea920db475b554424756bd006c8b54f59382ce6e202cca5f17da5e9d60c568543fcad0239a0752d58293a310324899c16406ba0f1e656592169cbd50402e7f588b023a2e65c1738611ce6fdecf8a7922c12e9f3da289beec27f7114cbef64c5e0c621fa10844af093cd490cccbd019f63b2f12cac7aaa3ea9f5c3cb2af70f8a1bef3fca7224f21bb15efd9169f7203166b2b5020576fb1a087e9bb4dbc4fbd36db41db4e98136f1018d80d53e311006c806162ce92694c45d3af357f54795ca261ad31d56b783e07c2f74856628f599ead9453b1d8561fa4762ac593b948cb3d6a8fdecd6dfffa4ff5bc67ae122c637c3850b3a8379fe625f5c08b1eb5b91fe4181d3698b8427257448dfe0300e129bf2230ae89df3b0ffb4794e3809b6640c19acfeaae4baa04d245c59615796f14675327ae65b1b2ed654c8cd2ef69c2c72aa14880a6d22af232d9c9bbced09b893f3c7e41a99115cf2c8ff89d2686d28df18844db8dfa9c2e9dc1b3cecf3210963dc33abee861ecef350bafd155ecc5d5986402b3bc797844d87798a181eb1e981c7749dedac5a41d41bc4fcc0ca1f8a8bdbda17d8d9017f8c0b512e867a3deffe1f35ce37c9d8afe893ae2547fc4ccc864bb3333a5d0f185c32558d99d695878b1e833a9a5a410ef61c6be1a0fdcc1a2147d2c8e6ae04e51293db6ec58d630af09f374f306c2457e9f623812afe64bec747fdd9c8c1e1b3e28bf00ca7577703365b403bd6e048ba1d5c85d51552c3a1e4dfc5513632ded6101ec575469c81df376088f3cdad4ffe698e564587ac57953687ad09f25b09a3438bbdcffb6388c956c04f598aa43228136e846fc9607cd38acc3057b418c011a22bff16c2bf15d492cb606507c169148b8d2088fa573199e75893e43f0b452a3983badb7ad7d2fb79f593a9e6a8d2fe999357b77c8d6227fa08b059a039fac10dba47bf0cbce2f95217386683c8f5b02cbab935d0896cf4934f85426853795e9f548c1e647a3a5a20c12d35937c3d3f0c7acd0892ccd2ab9ef3c42413963182eea817148afbde6d5468d891cdcb81366dbe93151be7662d1354bb25be7ac698c31738a2d27f11107fbe95952acc27488c33b72dffd661155c35d048e934a344b72cd17d515f04a6e766757b333c2e1c000bc3edac671092921691dc6e324fae00064101ef9865d2a7050d3b029f4ea57ac9c96dba366e8e362126711ff01f94a97f15c416351903037f981fb52f286f4431f0b6d8d878ef27e6dde42eb7ccb7be5247a9a55837909a5013e41ff82529b7d0f69c3cc55e8ae7aebfd95bd3ea146b11634e5032067f68ff89f52355f84446ff56205a422c8055fda5a9594e8c1c3410e4d97f8c9ac851186a110ab13570a13a1f7613301ee95ac62685c7b0e6a14a389bc9e914973e40c574776006da4f704ffc00fa564817854098877b3386b9dfd7455bceb7e35e842750b791cc18b00ce31bb3f399c8a092ba78c1e89b4bfc9ae8552e92dc4207a8b594e672043b8236ee5e0e4868c087f6c9c3a2c32f8f96e382b11ad181f5a47e23610c6c271aaa0f3cf2c08613742301cb1da004ad5a57964afc43f92c760edef1a7fe03bc091b3412811c2018b22df8b5305e1e4ceca048624a5ea53be004280579ebbe8ab3bb52419a268cd917f0f534ac10cc16864aa62c6586d9dd64c82b45caa4933b8034eec84f501a1d2e8af3df17fb36d887b51702584e9531faa51d6bbd7d1ab6519f69de1b01a80dc267057396283880a0b04c28f347d05d8a7217491a6b226436e68a15b9b29b0425e0fdc2272dc65d05af15c037a6abe13979ce6a88e2e9baa1686b6f6e019785236e48bd84e433754e1dd2d1505d2e59acd77bcce74f717a633287c22834c78eea497396772f30e2b95c1a98047ada5544532c18ca917d08c8b2cff249efcd5a033df11c3537e3a1a4c527d1e67761e68ff00210fb1142a02a384fa8c2478c4f9825ba84ccf87d83c244ee7369fc54b4438a5f6b61cab2ce8d1d8e484f20c286f88ffc434ab89af3877df70f57e886545563e32803dfe27ef49f646a98385e0077971e7ab9bc7ed70f571c40f7b426f226a457f8ac17e73474657738bbd5e721b6ca6c1ed680d7fac77d78a9aaa384330aec0ce59c0962d9705efbb2243dd17d91c82d83b7712c88346a41a2c6ce5ead08c2de90976cb46d0f95e9af2937a4cff873682c36abd24bb47c4a9687291d8e2400cf808773d8c3120713b5b499fe60809dcba0c79fbc3387325ac6026a7ad163c70b37ceb7ff0d86643abf838897a6486bcc393ff8964f71675f92256e87bbc064a95ee637fb62ca261aef1c19b774317514547ed95b22b3401fee9a23862af205aa49fa55fbf8d688d040cec088fad98f3120b36a4e499037677f07ceb43ce6ec9c665e2e8406ea10","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"8a01c5d3519b99bb5af51a466587a22b"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
