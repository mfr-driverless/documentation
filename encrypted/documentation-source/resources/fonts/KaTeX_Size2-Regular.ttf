<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"94ae3590934ab6ca11b86acadc3f81a6e2a02e8f99495843c3ea3321f666b20198f331744ce94283c2f5c2d68cb9617fa1b7fa3171778c041b62cd0635165c6a480052633fed5ca738620a4aecc03e860f3b4854fba7a7a1c8581af9a111f341ca450bbb10f3c24c11ae7e29fd0d67021010386f5003db8563a2c1223bc3ab4a2b7f1680cbd5c7310319db6e579fb6354ea2cc46baff9562eae2a0981a14aba697f9dbfc7ca6d9a52a30371abb90b9ed9cbe6c980243c48f2e278201cab2d1cdac5aab4d035281b271cad02d7062f8092a309dde1f7c7836e781544b76c5b5daf92a63a000e4f90cbb5486bb2926cabc42ea005d0d7e7f4ca55fa5d2731a49ec3828aed1f6f0b93807507ea5782671bf6d56a8bc7171977812c197b6d80f84439566e7cd8681ed5a4ffe579a1fef2f893df4f362bd0f9cda756ee0127810743797539e91dc7c2920038abb1c6cd46314ae9135e035b13059e74827da09e65f4418c73a297fe065466fa8f77a85d2284f4f60d2ed9122d69dbbbab0282be04b5b1cd8bb1b886fb8022c8157acc530d8cf9c6c94f69d0c2d800f64eb8f8aee0303c74bd7a057b870767aa678cb6c3f39bd01b1f93144f5445da04b02a9b6e8acb075336b0b9f8f12383218e1c9e1c8f155f3f814ed69f233f03b8be5123d043ec1e869a6b9deddcb5a79cefff241680a60f67c005f78353830d5c3c4781a659f087f8b5d35490060335d433cc5cce7e0029efc7ed04ef9fce4adb258f1c2ca718446f0a2ce53c23204d0bd0a882f953b11a91ace2d85eb187b101a4348b37b4f732e18677e816639f6957a271e32680a39c83bc98ad979246e69a32b462111f397cfdd82cdeb24e73f6108c2674c7d330e851b5d875936bbdfe9d42a4d0a150fd6b6f4f53fce550b6c8eec020cb34329f8aaf16b03c5e104cbcd9f56a3fab181d460fdf4e2c88fd8fde0a642e9a5640898d9d7dad50687c37e932ca78f07070ab2d7fd3e3cd9e9c33ba70f5549d89e2b96c6c837f44f4ae10c5c16b545059d9c9ceff2eaf80e01cc5c24d84047b308fe4b897f22f962173dc5ffb3bc32c44ed797ef47ebe657514f21ca402fff74ac5344f09de7a00b1fc338351b35c7a6b158bb53ed9ab7bfe86a77ecdbfd3ecaddf8e452c549236eac21bb3ef6261f8ef93f6dbf919dda37fb3c4698522f1ca2832ea5d12d0252aac121993911b513f7ac433b9230ebf77ec6e41205e0960a11141e6b70696f633d6b5e006a20d924976b4e6397ab23fc2adb12175a7e94d416ae2a1f5d862e015f5b107cffdf95aa5c63fa8c710597609ec0a416ef28e20924f72e9e5f7d11a4f97a8edfce723dbab3b696bf8ff4896135b30b695fcbdafed63b5fb5d67bd67fde6e299de54203f19ea9ea9d1fbd7abc3a6f4f9f1a17190402f9fab799265c3143fe28ee08667296e5cff1a84cc01e9354d88c2b2c79afe2cb0cd7501fc0ed8d0a9699ff12da2bd7293d67b234add0250bda9016d5c318b2409d9b64b3a0920562e5695e627f655c6e124217475a2687326586e43ab49a4009f9b167a247fede719963f79cbb1e1fae0a9a9311cec236df45bb26ce716668dc15903ea958a672e6c5cdbbbd748fd173638edf89b3c483f19f903825705db3a170296937805e8e2209a0e69c4605f1e736c97b3f36529985ae96a87661b263e0407494d444207e955e908b894ec7a58eb25c5a5de8b21b538d352810f07da57356046235a6e0049e882a5047fd179d82de8b644fb6d56b353e57d392dbf7bd37bd37536cddb419c8f889234f667b6f6076150806e3b832c1ac6e4a16554efba5788882f110101c5d5e374c6cc3b390f1daf340bbb9956659091330e35cff583aab0c8f31f9d0e52f2ad8c227de41e62376903ae7c4dfb7a56ac437adc5a84d46cff835a0d8ea8f4ffcb34f731449df5f7c6220646fd063ff7d0ec2cd09370ecfb7e78102356cacdac2184a47a196373f900911bffa09706ac5b05f128e971faacff7c0ee793bba78c554a5cbab465a23cf5afd8c27c7fadcb728708504847ff514133fbd1dc6034f9e9c61f2561c8e561deaa2456f08e49722b72008dace7675c930a455727d3fd2555d5b8972589367900425ce35b89343ddb246bed02aa4641d62ed0db3b1e3b640cde0a70a246a56c9f904f5ec815f1942f69152a16c19203d48bc43ee5f2e098a28bf32a0e49c15f907be93109abbc83176102d8c2bb8eac52468e7be5b60e75ab5a5c2a4def429d6491a2cdd3557bd1879c7d2106c80bc170110cb5b46f563f052bfc5b93f3d917681b2e9ef42466a4f5171b44b5422dc98b34c22bcc62b05001f8a65ff18e653321cf0213586c3099dce40975ec2cc6f7fc84c70e68d4f9547dbb62f7693e729bb9c74b455b072b2238d0c31860e8c13be55ca4db8318be38378044ee49878d431ec97d45234d4a37a5d31d85ae2ca4446b91469d3f1a5785043c1ec603bcb023afb4e8b5e3872d2e7c65023cffba6a8eeb1f93bec61a408a7aaed97e9c612de7a4e2307f6cff4b2229cfebdc82eb0e86fe373f359ffa121aa696ff687c22759850a9f52865317cf152d13b9cfa3ac1f9612aeba544f8ef70260c9cd84f74450e435779592803121dac5636f6328044a7e12d721db6148ad36fa130cc41a3374deeec9f52edb562531294e1bc111224a1bf673495244fb84139103b26536b1cf21f2c249929513e863b663baa3b34cc3527df89726e4e381177acbd4b9882da592bd8a606f8fe1d5053959a3207a98ffbcde500c4a79842c19cdc516ae559a2161bd47e4d3b3dfa8454cf8313b6a931e6d5447a790981b11ba4bdccef6dc407be86bfb0174f5afde78aa4870fc5bd634dbd521f9bbedef9de5a5cac94ce6d7d256f01cf9591b73e59fb0292b33dadcd65e302b115b8243649cea98878ac573ca1c568426bc97341b3b78a595401c222c21a032524f1bd0c99e740771f2b05a01957178cfcb2acb14075e21a0aca1069b2497be05ab1a55b7b1be86f19bbcc2e1bbbe5b40503edc539c6419472eab5880365285e05826ba48d7410916fb1a4b4c65705413058ff5ad92b87468779a615721470c42c34df2f09b3375a4be8dfadcbec07d3f6620c9f12072d0117a99ab571eb638596cb0d33dcfb7d450ba397b7850f2f7701fd1e6939ba46882a5214363876f7a1a4a54cba6ea7a2f79041b9cf302d4cfbfe567fa1de6bb8a5ba550ce0b1026b0a45725c108b9d5eebddd4fa6a68a1c34d38ca59922470cf099b3b34b524704cb1fa7e48e7be43fb4e56152d3256d734cbc5ec9c8e6edb5b3d0c79c3164adebd2c7aa1ee99bbc8b5d47c3a268529fdfec4f1ee0fe6fb93a062e708890e9405275158208bc601905c54bc6a9624167344f50054c848ece4a8e36cfee044b3fe6480466f9462c4d85271eb40c2eb5ccb7ca97539e6cf96040bf4ee3106b4bd378f665e7fd725e2cd9fd2a988ca48f009c357d88dd2da20ab4fa037cda4177104975ef910a7b6b0c41ad3e5abb0769a13f1f4eace4b919c40cd46ed68d9f076cc0e1b6b8fade77fa83ccd4e39dfdfbb2eac84e8c9218822fc16c8ee03d59ac825aa90b6c50946e2c4bf53c4aec20d7143928a5ee44d6743d30da4925724c4a8d5a629430d788acaa70951ae170d6f994930a25639c82b2169e2016a8e1d5a11d0b4aa75196bccbd36f8b8f12e5499e6255e817be0fc17b41d8c161fbb942be915e648efad05705b5f3fbc1374d43849b97f4b8881755accfe5e86617a0fe95da6a73b1370a62f7dabc6501311b455ebeee29c5184db874d75012921521dbc7294fb9b3b27f0df6405a5af06f9a008daf973cb903ff1eba61c6396248176da53de8556fb58203fb3947f5417816b41e9ac3975fda48983d2a04dfb5b51ca75bf7089a1b35d9ccc9fd3859a0619aa0b0e9343f63929c605d43cdca0c0608d6f3cdf271c23037d69b2f53820820857d77f7cbef5d148932f5f90bfff6a7f40107f4eafb1dcdaaaeb5b4db50f10912e419d72cfeeaa28aed912e8989069685f56d03a7b38a607100f10e86a18fd495e7d486987eb5092fe9113ccd81d93f184d9e6d7d1a96f697ccb5f21995f71ac6351bd3512907a5bc14343e2b764b7ba82059f4f21be57ba11b84a901833b7392f3ec7a416c25fd6d95fec3801dab373257df163436f414a8ab8e9f896693ee3e40df30200d05d6461a67198a4ea854660627bfaab08dec5e7fa6d9992bcb9f4b1e45fdf9e163a74f3b17253f5e38b58728ade7088f9dc41bdbff6f4ed627efecf45da4a7d9175064aba116921b7896501e4320ca18258d7b045907f20a59e1c797e40bcc2b201dbb4ae78c246723b8982fa0cb6646305606549fb6903a3c5ef4ca1c98e920df7bf0685c0725999156388b7d84502d626d2919ed456884d45ada8faf26fce78fbd82033b248a172e857353650dedb59a7bfb6958a27459015f44a7476479db78eabed8af6520eb01f05992baac0a6166bf38417eb70d9c3fff00799a0777e0871ea8f307eb20edac3490bbba430401c0910d7d5410a3214e5352e2e9076c9f0aa2d7933a7dbe8dece2ed8c2526d4bf6f4a2dc6483ac50ef0c45b9254c83a8233bd06a36909de92908319a69dec3fac01b4e74350826ca1567ba9d6faf0569194b39bc0066c2161a4a48fd3008b933424f8d11a45fc25d5cfa3886f3fd6fbad178886852416a4012c463666277f0c3da89f3ddd7e883a16a205e32b41a77c3fdf94c7017a5b027258fa6307a7fcb7d78bdf52dc69f92798e28a9cae7db72d2b41fe825e673cafa446ce6a42772d6f37c76f468abbf689562ca077f112aa4b78fc7fd2435e7a6cdd8dbae5585eaf403c90cefd5fab7e38486d1db933380d440ef774cfe584caee9af2944ee3ed0c69a57ddab2f3486b0102f6286f59f1e368ab7ac0e913e62ea7b377bfbb019781247f0274c7579f8a0a49b0768b3887718418ea4e8b871a055f3db4452cc71be9bed6655d153cd34daebec3c64aba8d8268601988a5ae873d3ae7f8754b9817e7535ca0cdfddde515e696aa30883d8213858267c1e33c668c663350d69c4a4a55b9f80fe8203d28e94e4be2928de01c3c93181cc7375386b9747e6215984eb1eb30766819ce5f9b419581030ddd423bff950575180a87c0fb349942f7d98e93ee2552f4a7ed6a0a3e0d9fb8ef6bac3edd6637af8e896c1084cd0b6039956ef64e4ee65c0ba63016755d6cf77d1b7039263bb34f9943c83edd420177bc517918ae767a33ccc152d5216d740b33e311017dd4b0a5f00c081d6e1e270704bdffe57d77e824a9aebefa5759fdf94d8c013353d9fba1a88af4995325468f7d0388d585a6c0dfa44f401b4abb1e7b253f81dde25c2d52fb4294c95ea11c6da52c7d362a6f426943274f706d440e464c6dae7f64be0ff5359bfb29267d15a2f9179d4786888c6dc7f0f4dbad53c9bccfc37f78bd86809df5c7bdd3df920a55d8f6217ea46742646dfc933e9703f54cc7d18663841f9a1c06c4582bc9b44d587795c4ba6f70bcec177bb739f54d52e70361b036a7cc03e58326ab0a929d34442a66692f19b332d1c4f3eab290c7eff4b2d55084845bcf49029a42d21041c12eec307dcc9ebce9dd337b7190018a38629b31dcacc6379c5b5c5621f8beaccd55868526d5224d2f88883d89ddbf71cf6897221d2831fb8407f6e4eafcf0eb694f47f67d7300cbc4207e4e1ffa04bfe98f9ac08f8e040b4b650f3d570beaae23502e3620dafefbc58a268cc2bca8ac9156ab5984078be6c93a93fcfd7ae9b5eb67c1be6adc756f344aa621cbb856d027f05d6ee26651a6e18bfcd89a99981161784cade98655d5eabac9239e26f5d81239c6891395fbce3c1581d09b4bab6cf1a3d986ec1e94fe438ee2c3d14fb22273f69727debf05609c25cf281fa5f60699cb5d2e2947fb80018e2e7d66f4656d56d88e5758a483d2db556dc83b8f1098bc4b660ea5780cf59f175210593e4457bbadf77c538480e8435fe2e0cf41415d5d1d138e50b91f2f660b790182f0cd06a97ba4d35e6cf2be808da86983923617ee910eb9c7bc4b76ce78f8d62a59077bc0be98495b09fb94595f37b4eb34cb604fa303d9147dd9f879a22dcaabd521a4d0e7290f99ae3e29f30ffe689356cc5c27d4197f58f6894e8d35d9656a3f09df640c0aaf91e198119f2946b3d36031ac9e7a9115d2bf44476b1df25fb1108b925d19ccaf822967d9147066888fac173801ed945a7f00c5151b607154d2b3f14cd962bb7fd7340c903bcf9adcba2435c8e469ac8bf45536a978c8e8ecdea27c65e5eb71d70b19d0974c4e90e98d5a1e03b7928c161352027e98c9857277889f886f214c9f631bedb7ec206256b11302e00f082f1ca15b84070ffb73b0eac7a7da18661f2e025fc63b16c763d2ac3c5c14ed7dde77e89dd735396811366ea295df2d47540ea25398619ca513a6cc2ef013ee46dbd9109f588a8ceca3b1afe92d35a2fa3a2b663a4e761febd26f28690992d334cae8c2e4c60c4fa89717b483a139fdb2073e54a7c420ef25408dcb2daea534ebad37778bac4133d033d344ac59d4fe011f15435980f3ae014afc8a1c51a23bd20829ceda21c72fe6a794f6e01ddf6d97f609705c14e40ce1f82b049db2834d008c1405c2e3d5bc4f398fae95d914d367fa6deed82cc84aa9e59efa7cc20f1d23b1604e6e4fdad06bb39853584e58e5aeba322e75b9995323f6f63a10ef9bbed211978a1f2d9fd2a94b9f3a364bd2fc3468270ecd2fbc8feec968d115693024022c7ca6304a130551f36e2ee3da64584356c4f41faf28ba653887f26d6696fffc7b2058f59ae8ae7d216e9e967128254cd5d5d1e94302c7159b91543093447e25c20ccd5478ac7feb82600c3cb236c137fa407c4a20cc66b6074afd99ac362768827c50e7e4f9671d0d2aee19545bb9549ca7a7c9c0495214da815297a5f78cb66ef6338e888a7ffa57710d00ece41837bc60cd7a391e15148e3c93774e6e4656776772b9d43922bb10a31dc7b3c47291f4f99d61383fabfc1003208860e7c8e7e46cd04e6f9d0668c0b51e74f61686c2daf04684be5bbccfc8a250cd0706e16877c5c7fe859361d63972f1f575e8231a095e7a99b3cf1880a9e2e654664f4f895de0d850fcb10d160bba6eab7e4d0c588cfd61ddbc5963a15c559fb16e353f912aa22812235be7fcc35b20e323385c7839cdbd6c1960f648248376d1f25e26d8fcf66b15dda3282836b8c29474f9a41971e4baddafb35ed08868de6526c0adfcc5f9c992e1f6fa561bcbff1a0d897ef9534f91096d5880a8ce8b0d14739f4ea31254412a1775318bbe3bdd4dda6ef8d21f634dfa726874525168a0983edfb34c389df8cfe1a78e4462ecea699c10d851d6254d3f49dcd2946bad2c6922ac83fb8318625c49a2c1d2b1c1b0f93ef397d467d9d6a39ed9d06c6a76310bcb917665bf3fffd25a1944a10541d7e9edbe9a21050039f59f78fe44243592d214d04deaaed35bf8d5ac88806215313f28e42cc7f4bfe4198de60fa335e8be5b96350ebbddd67ccaa0a8ee98930f0a55524ce2a10fec8c159494c52adf55325a90d5d1b6e3a4fd3c755bfea9dbc8dc9838095aa5a1dffe1261c7b16b490efcc687039662f2895630cd5f3f47231c70e0463228963380d6d2e4f846df0d2e048ff82c92cd99cbe31862abef41e04ba48b7a6d7d4d5ba5fd75dd73f2e305774da44baeee6259157593d30530c1ee3a9f9023e539e6c0dc1d8fea973327be40f3dc373bae5ebc7c8abfeb941e9c9d5bd4e48d68ba65d5c9b1421e65c135a72b35b886634edb766f021f26906628adb4282bef2ab4e936a322df8c60bf878f61653f640542921e1b82d0a13f524550785273456db4609a97a0cb5cb219d7fd3a6ff4e7e2c9c81a95a5d142cca8b1c4a7ae4c09ba88ff9276586f295671ae8c5cd8975bb5fd49b3e40f6cf47d481249bbc3ad8d0a89b46f3598e8e669ba04f07ec47b896ab66f5bcc190dad11b5447f2c8950bc75305bd4eaac53d6422aa5e276449dd352000851fb471d7724f8ec76afa05b4e62252f9bc580845c19647307b352f83bb651720f8a077e33241527c2dcab0cd2e4535a69a1af13c397f40b50a7fad7a18ed8b87859bac241a6085905a6a1bd8c4515ece7d5e0417f63c87416ef6a4c14b0031cff5c4035f4cfd99531ecbf8948c5b489998d16c10479366306b7f3d45448b692669bfab48c685191bd4a82e479acf6d7e8fc38c1732fc3ff52372e899aa9a82ab8c3b1f8c7c7167bebecdd9f51019907fd32c25e88262d190487f8ed979719c604619267d7e684130260f1ca68fe4313cec51372cbd30ecfc5242180c75c855b4cb2b444c576e7f025218e788e22d3634276fdfc76a4e04eff75d0e5ef93ec460c8c1270eccd2dc8e993f7ac487137129015b4410995d379a5302246edd81e99c98217b4a1a86cb19ce4e1571bfe573376816f3348319984943d3bce737741f5b9030adf2dda712b79d6fe8e466c47f180b92c703a4d96b55d6670eaff2f604b718dded53c51005b51f7ed9d146e7f7469d5f44633378e6cba9eeb03595e0663aa5204137b8cead21ff946014c247811f0fa944c7313ad48fb0b77551427a7241867533ece6a3aed7b43e4067a012d004dc1da8ada0842ec955f62244b89191ccb83aa5fc82e6d0dd8a8ef941e4e2279489d8d19b7438b80db99d506fe5a1e286780a13504d6317ec5e2fabc77f4ff55e990f97c4227cbacae64c9624d80b65e23076b7771369409ff67b8188867a92222345aad95bf32513efeaf811330ed7225b891b2736ccdd3ceb0db4e966be3d5150ae8649420884d4f9b37f291da834803cb3352578c7afd3c1ecb730c5f1f3dcc8f2e54f7213930bda28c95296d61df8ec60573a545e205f7dcaa79ca3f6b4e101de236165ed6b9bbf79d19b58b79f042d45779d4baa10255656f4d46570d7403da9971becf8b38888b3d8866d1aa9f3b8c8aec737a40fe9256f5a607c094ca58ad7c8e716004ca8c120a92a893c80996f6fa498f2c844e7433aed5de77e5964bf1cad245f0715a5ce2f754290efbe1621e5358549039b8439edd269d3cfcf55964dac0a2ed9056f769df08829d130ff3ed7ce70310ec235d7091f2d0eacc69fd602b9a33e3c2e52fc5937bb8e23613aee486adec50aad660dc6f0974664e9d7b53c59750a08dba8114f92112f7853c7083fa79d00db8d0efbd710860598ee0f9b26cc6b62f2c478d65e556b5293991ae22cfd6674bb170f0e920e64b957aaa1ffccc89cc7491f3efe9ca802bbe94a2042c3d51db46a4e9b469df1ce4319b90295c63a712d02e9dc609518604d5b74f90c9af699453e1041ca62084682b684b3f0e79fbfea68ba71ce9be99f59f779a67a291e77f603f507e866edbd3a19c613a4ea06a54acc3c0bdae9ea0f18ca70fe445cbd76450c278918230f77a98377356e7b534fd1afcad7959174f68781eae608e71b251a4150e2d0923c1f2852ef751b0b8a75c14d2965c7b6d40e3d2dc7c5abd1673dbdd357e988c7069deca74c157ad07460d358293a451146ff6d33acb89656efcfad80266cd52d3ccbed1e388d1044ef221126ee01515ba0da9373afc27b03514a6ad887cbd5ba3c73f67138239544687f6614081db98b98eabbb38623f0017e21e827e9c61d09c37f9fb00aefbd7c7ce13ee218247d2cde91137111d0568d4ec9116dab4b58850b9791984cc0007206c03a9048adafcb923673171ca2517a4e1286803cca78875450e2934e9196d2ef9d3576cdcb4f1aca09916a50127ba9035e57e57bf011b41bf304baa28e5600056d3c0100e64f6dbfad1bf581bfa9162cdffa574c38f0d280f3c979d00261d2db26ad6c5a4ef95bcee4191c717e49953442aa2d3aba92d9d3cc94aa64abd36403cc7ed9396512a5e35f8c4dcb50116ecf4f9f9bf3377ee5eb552225366e5ebd79efa4f5d75ea1152c9e9466e95f2079c48c2cc1bddfb6db6a66871b25871632aca8d686ee50072587849c684c86bfcc254240119cbfd45ddc19f0a1264e69fa32935e308d0b096f9963499686e48dc5eab16dad4c787870e865a85e9e2c6cb6165e003c56d8505a038fb9ce4c733b46a53cdafc8697a686d3baaedd4ba4be02c4f3e9f805f44ef19289f509829bc3068b08a18c339bcd948f74ece2f37ec836a18c6ef3bd11b5978fa457da44456e092d9db1300223cc617e052f57dc4748152eaf97b31b10c2d6addaa589614b383fbf6c55095b77226652e3efc21d08f9ca43a8829dbf640db5d3de9f037b51d579ef1e4514e6db1958104db8bfc3e1e87d1be710f1111dc708f29b21adf3205105bd77ec5ae4ebef5cf609e397532e5d23791782503fd517c64389bccff87958b96a9138874181f5376989e107323162d43e49346445032f44ce4a1cc1e84b6a9832e1cbb8d05b2832daf311982baaf9e181454c3fcf0e4bac640e552ea8a8a2cf579b5cf92752fd083a7770025e5fa4897148947d15bd654b8da75c1acda72bb41f19aa7c287e85176a41311fd1468a325c6a7c470d0bb31fe32ea0c9ad33a448b42861bcbe9dc8f7bf4136882ded03997debcb8802c39e8b6ce783325a54ed4cce3e3f7391f9d674ae365e5514f691a8ea4a3d9512b868352508bcf2f510e03e4081ffe614e91cd85c4875578e9fafc1cabfa009ab825c27fccbd3e681f3c558b187921c44133853bf2709980be486b9bd192ff5a4f33782c8454fea4a986602bed8841e5f6e349455279a111ef7e0aed4457b84426d77b8426ecbdd112ac5a0411c99371ff3effe3f82753f37385aab8826754184bc46296ad8e3eca4edc240f33b6733280f9e1956b1527457a13a9bf6181571629a0f4710ccadda732106c221b54a98acffe0e38d9c7927e7ad3516345f3936e3c879f533b6ead41978266a1ea80a611ba835761e635a71996afa3e13c6ffd886f86d0cc420e7ee1fb136b0cfaecab5aea482f60b1d6515e51e2671363c50c1193fde8e244113c7cc64e1275428595e01a6ae57b4d646bc4221b4f9c3c8029044574fc2f6a4c3c4b445df2d99c228c77cd6782297fa499d43583168d43bc8182daeb2f29ded201844b52f5b90f1d737254e9b52397fa633879e1d6da1efdd4f3eb8c0e121b4fcfd9d5df8bb49328c287e8d0d18b7bcc21761ae9c233a665ace775b2127c00c8daacc73a46c23068dd7c8386217ccc4207d1c2270ec991df546bb8e614f4a55c6e447d408e12d7d14d7bf512a21ae9b4e9eed795360bd0737dcbbdfd32203c9e2a9b4b001daafc1d5fb7cada5091f94b5d3087bffde9ce7e6deb99e21bd3ad9f0e8d2890d16eade00685fa42a1da2fcdbffcc72e8509c610ff7d2b0a7d49b8a865b3dff2d631ad0fb3a124dc303454f378d91b810c71403c18da1dedb6953df471afdb666d53b80b9f1446d75be91cee3b542a43bad2fee020bb5f313c089cf3b96f31daa48b8b9e814c211d4f927fc9d04992c863645b3b999124024933a531a73881b3d9ecfb7fd3126edda211bb6d8f07e509ba92cf3229103175dd41bcf55a91b9c96e2dac7eec87c9de8ed9a0b6490db657bc4493d91ca397b1f0c909f5d8603142ec5d85d95699db0549f67b21ca882d1261a15fea107fb56be9f6533dd910e877cb9b197407f7d1dfa61c6fadb904f3b2b5fcfddf5e825487a9886e9a305e08cdc556bdc9537474f8877b6ffa4b6dff62f2ec3dfa8a2c8cfcd9a8265191128447d5205cdc25790f4a80304cb0f58b1ae26de2c54a54c138ac5344316411a96348c614e6991ea4b0868bc336a2b7da2787ee7637fb4eeb2edd7cde0dc4ee29367124fc3e82505a2bffe320221db7f2a9d22e0a6b1089fc97c0b3a23ece6fe5c11c81d58e0fa6f62d26bae54834a745d27faeca981bb77431c480b914089e832820543edea9654a46d04b6534f181f3d015e0756733168db0e833a2c0852903e2a00152cb673dbd6f8ca3d81f3a46c2b74827edfdbfeced8f2e098b9e6c069f3c4a8022983ff006ecff0f12e50fadce08be3b3ed59b6bd69f53b26dab70e43276b912d9a092ab34b0c1491e75cafe32db6099e3266a92b00465cea73dbbd88573fd594f23fe69b96334d0d1cd5d207bd219309d6d3099c46c2716da39484f245713a0389f8d2b2d442f051502b527e77efcb7b3c910ad02202b433dafe57d32d800bbfcbbe6d81db3636c47616670a33384c75d480c8e2862b00945965e4f660ba4ced7b4d00ad70818132a69109b0f462aff50e65c82891b23a9731a43bd572db583cc27f096be6e18fca0d446503686a11901c8cb19b4f028a61acfc4ac5d7e7a12756b6cf29ff7c7ed80ebf3a9f2f7618fbee4259d73095208e8a7a3e0d84ae04b04244659805180d7b1eb57b5fdb740d472f65e97118c415485a81ab7ea298c9f6971d262c5ffbb37a1d05cb0d0ee3f96566f47d4eb47510ccb9d6566d6a29074066758bcb4999e703a662dc7bc7fd12c1a7cebdd8007a8e2d6a33f2173b10fc3775b2b37241a45e5d19199e2a8cd73d08de3c23f6521a397e95d7ce45a31317ec31b3926a4da3fb370e54c56d3646a3cbcc5a8f18b24a014b9d6b9726766355f41ca998dc81c8a06358f9b1ee5c495f8d0a8703f532a1177f33f6cc6c5ac15fadd71bd5410e9fb2cfbe49f374d2f3180d25481b0fa6a344956e9da60f9ba6c47a3a9f059720cb8c186b1fab62c725c31b7722173e62cd01bb0e07f38c909d2cee241b69e582d0b4d423d8c42451a02d35d228950bc76cafcaffc7f260cc012e026bad92362057a374f3ae858a923ab2ada27f237735ef5b6854a80250336291f620d63192aa4559c7a9f0870f520358804a6154d3417a628d0b56562f605892890cc565ddd10250e3a20f94388c90fed9ced595d9872cb4d41c4a24b44154cf5c2a0f57534e8e62c2eaf48c7351cbe3c30317f5c4467ef347e5a9cba47bed379c686773f0a21a677c1402e2e1ec794a81a7aa80cdd06acf97e8e049da66884bd98bafe067a215fadf487f368bde4afcda804aa5b22a4fa5100291b38860b755effd6522f48d55fc4c00736e4a3820ba5a6c543dd20b0abceb91591e88b2f2a5ba620ac477d95d052d724d6b961f7a6e88831dd97998f73c22852f573ffb5eb88ba7c6b1d4cc84dc05b73a3ebc290682279ea8ffe58000b659d668f260f267baa2aa3957439129aefae8f29990160e8bc5fa015d3c6cb221802ed54c6d991025d67551b9e5396030b662317f03faaa40ef24f71c554b4de6f8fde6b9642c911617bfb8f8af9e0cd0dec40f03d51fb9170e822f636148b1bccbcc4bd6699ef07ffdd1c7579c34df4a322dc9953e2c87eab7ccd8266b79756afeceaea4c4e236f2921e07681b9091a9f926ec4c6cea75a5c7a7e2abcbda3c96fc3ffc516654505dba194ac9e1bd155b4ec2c5757b5a6b39a3fb18fec8d961747053dd30649669ade8d46713d58e9aed31df325044276ecbdb4d62c2a8b1896bea9e58758fbccfb3cc70924c548a13c851f91ad3db4ea6c806589f87acabebd4ced42d58a6ed8a89ed5bf1af78aad043e1673194f4b2798ed38d5df04af2f7024609b6c30b4d04e2c2785726c19569de9f9042428ab9dfc05e0d489dc3e98b53ee9798d0771c83d854866dd61c062d98be72b4d28d7a24f1a8c846c9761fd23a4a799c334072a7da61b666ed0f51b8deeef470dfbd024b5a2935a32487ec70d5e57a94acdb6191007eb8c23366bf4f899a0aed226986d988d7be4d927e66f4dffbb96b0a2c7f97d1bcb4226b6b867aa619d2d70813b20ff929f8c25e59a04255d3ccbd5c511fb54b1c3c57f58fcb7c86c6fb3da42490f114307370782114d46d31a2e401fed07b2b8583e47827c3b952e4cf5795038f54807529aae61b48f737db2e0d48d258369d553783b1d981963eea914737764746bc5ded8329886b2c6972498eed0a1542f0db4eb5009f657bd79052d368ca136b6ae3403e42b72a55faf88d93fc80a0a474221fcb62948c805b3e3a8120b1af6fc82a706347c40b4d80cba3c9e5c377791650ced0f39e3c3d778844fec2dc52254ce45f051b08a549f49f7b64fcd64b676824d3fe758068e039dd82b6901100a6f185ea9fb0c494ade4f2389bc7258c0a803f5cf22cda73d3b075eac638e60b850969934b93d9ccec6df66b12ef460abf62eadf3bf9eae8efdcf2aaf6ebc18415dbae7218df75c3afe4dc26a013d0a8e846948840cdd01e66aea5bc1113bf5ce452327e88b6b413bf468d8c027d8435ed3a710267c5a22522ff65f5961ba0074820170a5635b0e9e022e7d84a8b0652a06c7e95424af079423da6084d06a417eaf90777106c0af170e166709e861b87311771f3068a86e7b8b681db8dfe1bd99a5cb4d96f0f7f5f97fb91f593701e4bc7804a08e28ba485948d25f0f46e6ffa3f371a78e29289f3e807811ba4ce4de2cae0736210ac3729bae53d74e31af51a5c0b0e878c56ce5186dcad8ce498b2365b3d2a1bdf291bdd66f79d2e7f02739c40e4ff60c74ba915e69f2bfd89843b9e3efe2a05a526a7372ab4609e1d11feaadcb5764a269a61ecff4d53d99bc9b9912f63b7b05f08748b30a69b2d5be7a38fac77f2f3762d5bb90af68493c8bb0e416dbad69b5919a3713845d2169cca61f9d6ff3125a7c6ab17cc72e14b5063ed1baec7759a8a9c57c06a3c9e9a3d38b3a91d40fba3b0a064197520a4f5387a11af4294a3a0c642f429ee6bceb7fbbb379aa6beaaf3a52c96edf62bb1ab8d9edf36062cb84ad0a707e20492af7af1e502aea6a191f17a97ee20d08acddd1f8e77745d2efac30d06816ef25272ad0cfc078f8cb23777c3ce96f2813e0810903256c336902cff101624d6d153eae8a45632d6cf9b755e42fede2ab23598efbef5668e5410fb818cddae83836ff8d043ffd268887a770555efb9af9d40ae88a45b109d69740dbd7be4b68f0bfa1011c5cd7c18b7d30966f69cf3ebcf0746893ce229995bbb6b1a22b6dce9a32ff776c2c98133af2044d4a53c751129516643f14eb1ca97f99f99596604a345164efc0b9339f8827fec5ad5ddbb56e73fe932341f1f3c91e6e2eb3d816ac37e6c5cf4d5cdc55d5e77abfded79715af04bf98c9711afcc8aad39502cb083db486801dd062f917e247a8c1aba0729955e13829c46b87b64374ed77db13fab4ab361a5362154ea253e13a9ef8a2c6e23401871c39b599873f2a7036155d12eb4c988b2be05bcfd8cdcde1047251388fbb4f1f4800e9e92fa5a1d77d39a5e2c5bde26cb6d790b41a0c638a8c3fad5529c021e35a75795c842006a238e34fd429eebdb16f061efd718d2a67a2f3aeb56f0463b6063a14cb5caa3969a3e323f37a67b772ed9a2c7ef630e32413beef52319a67cc4414d601e7a2a0919b28f45ed70a582d18c159d33db02adee66762522a951d18df45e35a0e61bf0c57e6d18ff867591f6bb83838abeb4d24a24c36dd2d288ed40e6c017dc10795d651105640e61d46cad6441b6b3c4c117383bc2d397ebab48b1cd0b5bd9ea2b78ff94ccea99fa47b93bfa09a4aabc9f7085776bc2920847f8b565d4cfa694cb31e3823f53628462a1ea4dcdab093c0fab8dd40845579a6c196ed8de626996b0e4fd4b5505a7e48d487456006454fa21fa3a9a651eb1f2ea30f67f98911b2767f93b179836f8aa4cf4f0b32e643ba4d0f8127dc7994380b2da2edbd39f5c50335fc3d6fcad168e6ef3742c6cc0127f866bfa1fc06dbd1d44f42ba8d63d32d6b83e2125ff4867ed075a594ff263012f440267e3ff2f3da742558ea47e5f9c0a33099eebb715d29474438e07d87395db34716350cf74ae6ad2e3232db5cdc5c11461490d1e66f166a7b3ceeb2988fadfafd16234db4463525ef3ef05fab908313a24bac348dcab538aab4198ea8f3fa5ed60b25fa6b87ed751671e9d9d7f0efbfd584babdb8401abba8ba5e88640c3833a5938e33587a8c57a404b1780f95f6a4fafea5bdc53e2160f9b57033dd9c959a53b6b8eaddd32ba72029964b2a60619b1f9d4197cf1b9ce4f783f0fce79782f1029b6365837875c222e7c50eab406d7456466c63f5016038f886aac94e20a520493c710d3cbcf8117770d483c9061e7a32f0172bd64988d53611d0b17e3034b715d77f12f7d86beceb6a7e9c10fdf90901348a00884c125cb91ca5b3074b872455470f7bb73c2996c4143d54e4f6809451e03db6d8595c8aa7e695df639400831fe16e0be9c03f47b36155e3885e5e82d7d4d42e85f0ead05f44be5789c35217f2fffd0eea0079fd908bf5fa252b86f3b0bdb5440baf18230c51246526c73aa66df64beb2eb562f26d46aed84d56137927970e8fed4420e7bbed0aed3ed7fa1859b9f5b07a7ad72947e45b89b576a9d02f81d2a8ebd77343ccf962b87bd0cbbbd69d81aebce4dfea4e1486bdbaadfbc6c9652d06bfe380684a16e2a4bdd196f0af5ddc3a7793cf806cbed5ddb8b2aaba7874e9962e69d16c6fb9285f9254c42d506ca48c0f47b073420c36a150fd77f50fa2d4d0f7b6b92c2021f46f3ab5ce455b22accb0fb394e010af18e713158e2d76ef8f33da2b210c690c49cb633c615cccb824c44abc84d4a5795df5ccbd0c2c8d0e1d398ecec4b55ff0d79a902812811e6ee8a49f3964461ba236dd00471067e8ef75d29119706b255e791147402ec0c3b703160276d8452112f0dc2d5ed1612d438e121f78ec108cb2270742a2477eda56b8ccca2ca5d920721a594dd618e5829d5086a901249046955a7da825a06d1b7d95b84c35f5ecf764e0e0e44ab28f767c0ef3fbd5ff1b338cd7b78d09eec3a504b3df3001391d0149c044058c682adeaac13e0484f276ad8e1e3165fa3381249306d17fbdb0259e18b2b685a343e9552708d64e33ec1cd516428d9217f76e5593f9fc48027ff46ea0ef631f7ef8f1d5f22e2227db95ceec8fd74db6a0140d99eb84ed65270f0d79fc608099401d9a170d0e31820bedd677f87305a74f0abfdee26983da4fc8756717a0b81411d18bb090d1ee9698100f6cefc531005c87a97ef775b715b74d63ca1773ef020d8252715ff17766a4218f94ba3c49d6a070a69552f142f90d05e8d6f52c4de50a9e9bc7bc4b042f5a9466c9f86d2516bdc140c4b87f430176de62bc26ee5b976f5c207c9132469084044b08e1b05f76a00ad8fdfa16d3c7eb098bc7f485346b75e919ee0779428de29c86e089c99f51f4d3acd6ae78bcc2684430ed9c6a50e09e22b32ed9fd05a47f8a005404334687156336f113994080101b46754593905ff55d3ccc27d73c0ddc194b18e1a4b069e571b3997fc2823968c87d82de82e75257036cef31234c93012f3f2de183917d97cf5f8fdc38e24dcc5e648969720df0cbfcb1af97db616cba56ab5b99373fb75ac4a0a4da2b06d5feed93299503e90e5807a0c9cb1a8794fb4bd845475b649ebdf9812fc29ca61d81450a42c725dd2fa2bcaaa8d669220eb235dae5060bf8b8f6078ebfa88c4e3a0124605df897648e364887a6d015695a79ad4bd45e3a629106f708b0e97ee6fba1b3d28d2e1a172f24aeb4d44dd2b142ae39efe674939db963507744b07fadfbf7c248268908e92c664de42665df950fd8666cdbffb59422f6972d9f64317ccb4fea5f6f75727cc26c6dad42199f5304b33f210bff4a5c90c558fb7f28b84b5b21fd9e1f333a24c7261d9f6cc871ed1645af772b37286d54a73405deefbc51c5f1c444c708766e1050f57f9e7b2151a2551b1831ad18e8b2b7bc71cc8759cd7fa30195ed58587b21ccb7d453c27e5277bb516c563594b2bff86fe39a85e58438481354dafc8d58826f3feab38447d8367e505236f440d7165f43cdb3ef97d7f90e08eb86e010b54b03217619543e26f7d2847c274a121c9ce11be17ee002f47ae53988b722615a4ad3edfe555eb42b71fe1fe2ff35d88b387bcb9e4c9ab02e8da5d07f01230184432bee406677c78749eb5af82d7379d86c2ff1ed416b5e7251e0e021e08fb5458c9e37e3aed343370db3988b208200acb38501ea65e81797608123f78bc0c784ee7c9bf5075aaa5e8d81b489f9c1e55086ae652ecfaf1b70fefd72d5bc7d66fbfdef29b11b20d2d6e006c3bfe847c1cc02e3fa3df0cac61e29044870f106e2718bf49aadffcc1e677d3afc94821fa2853c353119a294bedae90f35c2ddb8854eead77d63fcdf2277da595316ef8db065c73f6574e88d3d7682e76adff1841c69ff4a5e8bdc883596c23bf5a1b469113f920dad5a119c18d642166c3648bbd6f006f293bbfd61f788cac89fecf172cf16ff2e6f2a595df1bc883eb26198f46049f15e5fcc7b3f17b88216db41f722c8b5844f21e8d0a70080801d844ee7a29efd0f4e0815967a9034fb6621bd43ff780cb650dc6dbefef954fcbbe62e884302349023f1bed7bb2bbb571f039a9fb0058a3ea6b2776a733a6a35c37004a9959a98d7335b8d3a570645c8f2a151c79edbd51c7bd31af20472d68e7d5d213250e8bfd37fbf86965a3428c39df03ec8959c9cd92814ff24ee3382671b7f2e5694d2e3b19f19290214815e15e349c5b5f56e47485ce2cfd903a645d66d88fd3ef33b0f0cf4980b1de9547be83a13a636332748c14dd8c6ead9991b8b04b63364c12731001dbc338d36d8710dbfe41203700e8eafcd6cd1e502d4608f9ad245cd8d028032d3edd2fc9f2b6f934a2a2af66075c2d888a2f1c0ca4304df1441fab858386d1dbb4355af49aba1e55db66f6858311051ef87d9da83b001262fa464972988e2b47710afcd682e5964f05e51826ad6631f1d3a86f449ce2161781be5ce4046e71443d683777f991c616757ea0998d547898a0e8d36cd9ad3c6b149fe292f349787368840b1f050b6c47f7caca8fa956195a9acd8ade1e7713fb3e1487836ca4b4688148f2794a287778aac2de3cbe1be6190129a8b3712526c1e1d75aa7776161f10fc9d216bec2ba376dc64839aff04b969c4cea5593913bfb8d375dc8ed6b20166d58304a71d12f3220fe782068bd32d2007a5522e2586a8808153fd02e849b449edc0940373462bacca22a7df4ef714f867aa61f685cf59fbd83042b6d3128e76ac0e0518059472602f9b20e3daf759ffb261183d520c741f094452af65e058179780912cdf6d3277b5096d7166bacbc0b9375d7eead90cdd0a1daa6ac95c3754601bf34a18924ec0e57cc553513fa4b999a5806a27b7b4d585a930e4e0de30d73a328e66a2fc6ae63736300f76db53b0aca11bbb87a2708c0e33213486a2f618608ff1b8a24a2ef1c56443423e12303ee0c7ee38757392a43955342b6e4978665f5de057a68fc0d92d0db4346813f656f22e614fbaa9c987e0c85f3f0bc8af95e0cd5c11c02697ee163a3ee8f161e8ef16c195aa7a158f0ac174558305df96b63182ba1e6822ea722618368430513bb98bc3e62e183c3f6c368281cb572f3b41898516e738ea9276419551327824474395892d87f741d807cd1c5f58e9330c677c3414f06f7275a92999605bba58b1fa6c5e5bb66ac685b0ce6f7223bbac4b7f2d67211bb8083f078d3f2adaf1d630a6493298f5c4579c27a5749d043dbe05565de9f1ee8227b7411b2d7cec1b8deeade9f0044462b42368aa2384b75fb67510c8e219f0ab89983659cb863ec365e64bb36fe24dd2bf7945a771c0b83b30b5d78f1891a5c8ba7f0140eafb157d76f520f9e2308d20387e0b092960f3480cf00b72e3e055abf5d0a8b34452fe1f1fa6c34303c338670f0b4e7df61d3a8e9fa3eca250a62d046dacf0f02a3c00a04720268ace9a287202526614413ae1564eb5c3c6ab768191f92418a0c30a6dfa3d9d7f9e74d23e7902cd905b7bb6ea8ca85965edeb4c977203e65664473291d5532bae620f09fe0bd891e74d34ef9882480210eeccb00ee4b4d8e99c3a0ec5c8b48c72a57d7d94fd87b815254d12a9f78f1824ac6be4a62ee87d396f7a1e77ff18459b9787c795c32a15a6c843f4ec89d94a37238720d6858a3c6dc21732280710e3e0a9949603306659fc83c8c7a41badb9bb2f07751639fb24c571354154f3648056b07a4d91c00dd1e98f51b2483bf52b10a9a9aa7c87ea3f7d8b70a0df6a338887169e9cf0732fdc4e633d58d0d2f8900208713ca7d68ed8bd96bef31d53dc048a69347fe7b3b6fe366521aa48e4180e0eadbe9a9de76d58128af8c06e838a3fefe0f98dbd196f4162ef1b9dacf9d35687b9a21b949c2d6e53379c7a9367409006129b28c1f27ab0dbde6cabc3affedce904f002bd249e4402d683740103581bde3cf7aec410fa13c443ab2def7492fb1ca519750b2373abd244fdc1f44fc09e665bb552c5c48224213324ca7ff720b09224f63e9596b8db58cf575b035ebc34dbd6d87e32a8908346c2faaaec9e28463b62221ca300acdc308d3859e7eee6bb85f9282e3efede931cea6b7fb8c31d149de29355e82c585812986756f57f3061f3f0e938f28f42994000890003b6487843f06c93e193a7e5b0e0a1f230c0d352a9ac9983b007dc13a084049697a76c3313b41eb8253bb1c8c65ed051b0750f5dc11124bf5f9e33986b5b68e483f4c78c1d86e68072a2bbca8848c5331571fcce12072838c061ca73c79d64958dd6d250cd448e376bb32aa7e253f4d6c1e316e01f45243d1b3f1f286d396d914fb59f21f985d0f165fb156d5dcaf7ca28f5a21960c9abc301f65d77f1dc","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"779b78f0b0e284ba3ac14be43b73028c"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
