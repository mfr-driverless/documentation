<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"24f6f2091e087176f2b6b52899cd5ec93c6fcf8e7dd22e0fd4f6fe57d0629bdaebf65d443f00d98d0b9cc4abad44f8f9b429a35a4bb2aea11d0c950b91cd8a21ff0f48c5b1d8cba71ccc7d8aa136a6b96d79fb056ac80b017783c2b20c53925546c82aa5164fb8bf28c306db7515579658ae269a07fb4e9c0c28bc10057f2a9fe26f4f9ae2f3f7a43d169b4c5083fe25590aaae98d0def698cd76df61c9c846d6d46bf224c07fb2242308d982dac25399b7b7e0a4cff02070f0c90719b74b63cef1a01e7b586be0ac4046488907059afc340f401038cdc0c57b64e584e6183c418ca2f474529c9eaf857f184d5b9e374a2b5ba1244287f6f7d2a1343a40e0982a4686bcf0ed1f9bc9ec2c4e3ae773cb2d065b9753205a2193ceb812cd02f05a3c57c14ff5dc2698f7398ee1cbaa2da4004932b5fb984407ced2c3f4bbeffb5645c86a4c8caa1b7a9e5f9238cc0398173c8c3bd4d6a93d31bc6c5467b48af1a529b72aaea452dc01dc508f2a372cfa0a32a940763a9df92d50addb8234a81b929deca64428efb949a77fa3e5dbb97630ff4be88172fb03c191460cfb103627fb53d073c781df4922785c1677cdef8672883da98dffd35be3c70468c75259a0a17d8a5650932d2d8acc97be8bcb81db7d8d6d411360258f284800812fa6f532c3c151776752c1fb162f95ed38091e83909d26e5707abe914a35380dd0a19b5acd61e18dcaea96f59633bd822233a91fddf278689a546342cfb6273ba8961e8053c558dff769d2545ba9d23780ebd1f9405440d9651aa4b8e0082b34a4b4207510f923e8d9b8525fff369ddf150ba26c3f8361798b442c77613f39b78cec2c71f101725605e0422639707c847541ecf646d593ec4fddee6e34233bc911d0a06739360f90d7cb20cce0aa9a07c9ba411d96f5e60154a49fab1eb4c6063d88ad2d1fff468376a84c385a75ecabeda2fa897d0f20491bbf9ef540f52d2c3c211e8934daa2a48bb8b65461f0995e82f8af968c9aed3660e085788cde61146f7f71175a15f3c7cc683e877c06d2cb19b0a9157f6f12d56326c44bbd395d93aff6bf2865229bbfa68cb0450e2068c18a5bb360159a1b0b94a52cf7dd7c3dabc720e84e52a4aa6db14895e0943190b3322e3a2ffd2158d84c97b19944ac35428090c487e3e17a2ed01700c730f7aafa31e91d53016917be9649eabffda00896fd20d3c1150afa67a8945726502313b363c4533284d9216f0b792060ebbaf8618cd28e6f17da8cb899717ba61564e8f99d80be1fc8e266827f65a4041932156af54f4262f9cbf9d27b3501b8b2ba84507797cf58a89701bc4daa779c539e96df900ffa42734c1d69c32561fbea473e94da6d52d44094d26689808cfd02f3baccb93312a4781d7ae38bccdd480c2a834bd5d6f434eed488b589432d85753a7ced6c8e1361883c937c851bf10bd1f4d9debfd52c14e3c49fdcd5575774c8b177bdbaea4e636546a2a5dbbb35b6f71dd4e6ca8c7f22ccc99d6d4256ce517ebc92c46da43ff91a637158248f06f1949b114a63a3e4b26d1c3405769f4bd191888b8e06a434ece866cff0a308213ef50fa067f7e88be00f1bd7d745f02dfe77cf789bc2aaf39d09973564237ed13a79ec9d7e0ab091b0cfbcd64f130a91985e4f302fc1d8f7b73d6698af1e9be3610b4d22dfc9d6ae8cde19cdfb14766f8a7bcc4bf117cf8f580181b1560749a600f39c33213055edab792c5fd1dd434377b5803ead06ee866dbb8b2862863292aef26cb776fe7dd54150933f9329da1120aa60b313660bad09dd5e31b6f1941c139914dfcf0303d40c2f7669b96f866eba4d1461d4e1d12a9b98659432d01ff592529e92a899ecabd22ba90a7a0033098bd952d900d81ecebf03c8312607b4f4afe7fb63ee8865de18c610292b8464ba1ff6c7f54526bfab7946b8984941afac5d1a258907966bcf08ee417a5ac04c899aa78d6c5a630ab42a03838925fd5fea39aa4b03ce6e18d1c87ced8e2843eb1e2649689b45fbfe34d1a44e1c63fdccf5ce968f3886256d19d22a5570e2d3aecbbb0fc0aa8d265d015d6418b86311d73fab8a2a375de2807b068baa840e888715d5cbd5f899b8bdb18b241406314252e251c171bbd5282a74d6c7008e88b4914eee5300e7f97b67cb49126cd863a0b5588b683f12ad74980e17e5e56d84a3d727e303c9ba5021f5cd1d961fdc72c046a43e9370cee70cc369a74d008cf2ca9e51b1e3dd811129af8e3ed34e86a1cc81af31eed324ea30e14ec4f591fa815851c9409a02e82534e7cdf8ddf5536cdba5c292351f8aa2701e14859d2771592de75a354ee4e439c94b972328d16e426d967f66e5f42a0fca4a1a92e48f3e9eb82172f2393a7e6d9606ab0849febcd890deaf424a370f409cd897674a67dfaebe3cd311d8627edbb96cef3fb2b88aeabafb11b4d645c6776b71f00f51e3c0f16f51879f91e6379c50756b48ab1da903c89700165247fd3dbb1bab10f4480ff66fa5c5dd4be9f9aca3e3f00871b0bfb682888b8cb9439b5de4c49bc1b88ea6e087575f945b00a9af375d0669535ebfa673996859338efd7723ffb84840d05efcf90b7bebbdb34eeb7f0967b6b067a29ac6cd6da8d1f6a79e7128bdc11a0830c7028c33854ece4974c3acdaee02aa9f1701202e4c7bb7f7adb7206689a36a991929ca847659061d86a96691a19ee20e83b160a5dc88bd7194091332a9d6492affc5d5b4e523d0f167da2287738974f855867d75a2a855931e94635d806531f83b5e9a51ea70b9a49e86ea06d7af9464b72d32ac054b33ec7f79d0c5105bbe876ec12728bc37e44eafd95e87c90185e6dc43da74e5fc2090127072f0bd4eff17d940ab914d5b645c06683d313a3ec1ca738d8143835b6fb0ca81891e11428577e77b3944182372b2ad1332f41e33ecb076113b7892c75dfd953246c0f6b3343c50bda299ee6958452bc502b1044916348aa0682b7fe5ea18cfb4461fb27bea06cad49c3085d1b9cdce82db18602695710b4bba0cb531e02df8040e656802f8f9c3f1dc289c11cd38a4ff29ddd1b980593e5c20b1436036c73af52b923c85c845bec1fc54cdee1e08e006fcc4c53bfa8bb04feefb7bf1734a0fed4d651b8921691648361e8bfa052e4bef06d627bcb182a09f0e5dbd247c346360511396789362d52114010af02ad19f3d4a31418df62a5cc7a4f764c607585668a0f373ba306ebd1ac08273d69dce5dd18517b6f81e431459f509062376acc1311811bdafb10166ddc67f67fa16786a69d7c0b66a967fa94f4cafff4c80a178b52abc16f5706f53aa78fa4a92b17169a5280d0009a1b821e005406bd9721538d0ef989d701352756bd89eed1499aa157e3dd3cdc20f80bdc8767343942dcee199e2030d8bb63c324397fc46287b7b0d295250fcda81e9a8df1d10b522bdd51f705e362b303244bf5bc6b0283f715c56fb7e2e3000140265e15d3a61e193d1e5265f09748b9f8445080ffc9affd57c6ef92b78ba5ffa57979672aaf0b85a861a07a200e426848edcd7225b25083fd7bd016a9154f63c3a9054607678bd3cc5071946eb7857fdba7807bcdade6a6d644d0c4a7074304b04756b846b2a5daac4c16dafd188ec9557a07f1817e32f8751cf39a5051cd99d9f0aa21b73ac01808989334d64e9d0e93d55270f02ad19808f983597ce0d98e2cb686b8da2b2cbe7bb34601e595274b81320704323fd0005faf447299bdceb61f3002e534c42d81642e1871d203825095ea0aac1a6cf4a14be8d0ec8a4dc7f16d4e6ebc566f7c514fbe7cd0c67aae95c4e0c437c8253b8f0f26698fdc82327d77c7f992ee61db2737c72d60f4232537753f7efd136129db41ed44cc9c54def94aa7d4271a48705a9713e37b89aeb7acb3ab1d45823d2f8da9153b20172f15e907d2ac43ce4b3bf207177a6d203438d5ad0d12554b61feedf5d3ad55cbe8188cd0138a80e60f491f4cc7ad0b5d1ab8f5fc58d34afadb0bd32c9304031c669198be526fe312419444f70b016f59e098413613b377a250d270c6e806c192b05268114ec46b43aa2f67b9799f6c3e221e7389f23d8d0b5e21330a7489ac5a30a2971b17a38d01be9c86b49b8adb2ffafd298ee3882efedf6a9469ea7c9874e15767b106ee4362dd374898a482d084fd6225f0090743b76b97c851b13da0f6c498508108fa9b69a19e0c8e24735464605c2c78ac5594de11ad67371e2dd532980401b012cb486f9896e0df43279f3085c4761f2565620d617decde2f95a2569c6dfeb26fd083c71b2e8da2df63047b23e78692cecd35957200b5855dc219e02587909a3cf035fc758104166391da02e0b9d5e5b905fe609ed03264a33170b8f97208a79d3cd8442f6f971b88a6dd6123353628dccf091c9d64e8e74aaaed4962d1ad95e90e50ec1fe82fd06c6b9b2eb1eda93a95eccf74a54094c5361ad0f13d75e9a622fca537633e146b4474895bb37292c9fdbaaab3e4ede7c5d69791b4f3e50afce9729d3ec5de646dc52d5fb5983aa5c853b0d7e29adee1ccb7ab06e7bd95b89f3636f2ddcfdcf235727aa0bf9a700edd600a01f7e0a6ce26e3a5c72a8ada7bbb641bc63fcfa336a09fec17b9c682ecb21f65b06c757dfbc011116646032b0d3867a7c887be49edd43029eea1d65a874178a1d00e39aae6f24f704e77e8bde06096e854fe46f476a840dc92ed40d9830c3c538e55f2847e341b45a1a78a7d37ba590cd2195723dbc4c1cd2b6ac9a56b41f077853e65559b6fe3c1cdd18639b4b4a97bcd955c277ccb2fba5a5cda30d19360cd83f6821a4504c75cfb3668c580fc2e8648bc341159b8efc2f570fae8a00a49203bf3afd445bf6f0a6455756ebea8a8d53d32faa18432d63076bd60df583d37cf934972eb45310d87097dffb94c21f540d6400100e01bd63feb2a4f07c9e53f4f683f9f0fec9834bd2dd38e1952f899d31c7bb1b8085e7a138c3bdf9c949f387c70a3e0952590e8f81a9bb8632f1c287bb5345bfd5062b8bde75fcc101911128afc9c17025edc7999084af352fc4625e7769d44277923654bf45c83fafbf63d1fede4c659ab138fd95239ea6de44afff4aa758596dae203ec1cfc4c1cb77fb0137344652ba2ed9730ae0ea11c9076a71554a793d11e9246c8a69aad91e591a610e5487e94b724690f6010cb2629d41026c14e2e57797dc8ebd99a703b97561975771da30f68d97aed222f5d17763e18c437b4d00c0c22cf91c85c1c7c6c1b0c62226e31e0ff77c3578908461b19e5e59bfcd8cc3851ce413183e57d15b7581b73a453a0b7990998ed3bc2a9780700f131c87d1c706fb9bb6d311527bd3d98acfefdd68083c749d1d736386da7c468980c5565931c6a1a04d4d485625438f9c83717a970bd2ad38043a3f82b69be70b23a2c3883b7827bddc0f1cf39dfb786ea1cace6d074858c982f00ebf14ec220689d414935e3c7d85639d61c002aa26adcb5a1104623a497afe06cd3f29f5fb603bce350a496d19fba2763f5b1551498e3961a9e8def69ec679fa7619f6efe5e1a966bba3e51976b2434cd4fe63bd084c35a3a2e54155eed7ebb2259fc868135aedea247870d1f1a52c2acdd3286c83561def272bca09c9383068cc12348841d43f0ae23fbd1d6f90d6de8903946444d934ae9457c1ffc8cb34cd12e016a09d1fe559afe5cb8d62cafbb3cf2ba8fdd9a04e9559d511cd149e0256f0a9a9f0677639ff1583965894defb118dc98ac5f108a2fe52f73f20f7ad6d5726658cced29fe636ab503857b939d988914cc0fa617a0a14253fc58a3e7aae8277b49c1fe5aaf870fd47e51809013f64120e37b02ddf8639c238ca223c5fba5be7a103a02ce5c56ec470af0002af6c7c38569829f4c9831fc93d95079d9a526964d55df945720a4ef154b909a9a09bd2337574d120085b97f59e48b8eb05c322d4591f9ac701083f65a7ab0e25fd06f4ffe525ec63744f13903b656c2970dfc80b288bed2e83e41acb92b79ef99cf529b03e70d5b3419df26581320b48f2ad1a466e47f2a44e8031cf4e8d9848864754e7321e48577dcd2aa270e505012e38e28e0db1b9a3a37bc116c3ea167fcd138f6d26c5083bb9eeaa5bad3d6a68e91f262f5e853a3b1b3e09f8cb2bb117da1d27d0a0b091da3e83b40315343d55dd00d0b5ccde7cf7d618840c379a5d2c4b250367b5d1e22f0a5c28746a7771d3b790317d5047d83c625478c38947ff78cccd64c4ed23c25da432237280093ec9357660ae58838763cefcaf56268b496843b3d9567092e1e55e32c2873605cbc190f0b31fbfca96dd62f22be06c6f16f1dfd66d34087121910da3ff412f5ce3cedf796ca9ba674460c8a777c482fd55d35d154dc1a08eb0db0fc7efe37735250e641792efcd8d6706cd3680b0916191d4f021474001f4fb08358e8cef59a81aa9f0da91f6ee54cc39ab8bdbefc235948785cee62c8e6ac63195695e0decabbb70781ba3380d009e0fecba7b511258f5f9f527c28b2fb3f000b6617f108d1dd8eb3163191d7d81c7a2f59ebb41dc9cfa24a82bbf91ed80e0427cffa0ad85096cd7d7f3a14320dbaccee52e2f57482662649001e0ba11d7489dd29b5246691237ac817a2e66279ea6f4c622047443ea8575790f2818e7ca7e9d364fbf7c43ae817bb4b93d191e74eb5e80e438eaefa7b2a0b46363ac826c934136cf79e042c63b277cebfe0422266949166ab115f0fdd2d5665fb5cf665b44682cc5e19260d291c5909bb53997f1059de09fa06666085927ff3607621d0a0f4d2d95ca7e77a20e25d2d061ab1e026837bdb794d1cb165cbb901260cf152584f2aa6d7b88cdb1bcd2be873cdf017e48b1be6f1582cf095402ef6ff3f0a6f361369ca7bb86604497f5c72a7ca12f56d1a2b3c46411a7351c359eedc1e51bf51cddfcb376ac93196e5afd0a9b23f5b72e5af40e9edbc52cccbc962a1e76526b88fc0ca2f47b2f4f876e89607e56548487d1f6b971e9d4e1f7d462cb4d050f561dca62729bc90b91d69ae36f4496f3a13bc94e085316d5eca36d4eda3a1d3ebf9d81841de7f2cc37e35d81ea3a518bd66adc5fd09ca0dcacc9243a2583aae13c186994f0c7284d2e5966db99e1acc2101001d1810b7f9b7d3ba9a0e93760872e4e248b5ba815e42c22b04ab918f2daeb7f78740364226b844cf9d5c848d7a61d4855b0bf5c7c37861624dd42f03427ab44285013c6ad8ba518874bf2c64ed89abfba6a61b1e970b85d4f7aaca18e0bd4ecc521c81aa07fd28de225b4403ab938abb024c7c10e5e6e9de6f0fec66bd21271fa42ac72d75e64aeba3b2c41a0fcd8e48838b55f46e69829323b29a2709c7a4e4ae0464cfef8fb28ff99604b359c71310bda617c4ea733321c6a3aa53bc78c03506bfef3081d2f34ef5027a1ffc617c8640c221862bd0188bffec045b8d2a9679792be2765c9c8499a07f1ae9db63ef91ebb5a093c106a6950da20b2bef708d479455d26d2f2b891a9db8884a4d5a1781e60eb4a5d1b8572619d41a55bc321e889d2f019c70702960c6f055d7d5aeda81dc99edecfe91c9daf297d3702bbe717a11acf12d2f75a974d62b8ce02e3ea87ed09a16127563b16c8d5cdd50b7f4d24a0416d2fc94993355a7e17899ffee3f0b0f1f558ee1b99c48239fb5fa82e2642bf935f8101bb09cafebf8fc4dd6379c1a7db00383c9a5dcb2f86bfa9700b85fb87415d9a195725d21ebd2d73a4738f09b68a758293ccd750c732278bae7ec8daf9df833796df997536cd5b1163389007b02c7f96b022bbea0b6c2fcde26eaf0620023f3693acd215291e5ec6a08d939afa5d509b14487c9b40d9c1a0f73095b6b72599adf694ea8251415c14b5e7f0f82dea2f3f0671900f2f129d6c1b10ebb123c6c7a21aa480171da288f62b475aa977c75a7cc65c981195aee1e0e5df81ed30a7285a61207cf510531457a838019b7aed86772015e816e794cfd8dce55f55e6cc5b6edec80dcada54e2c70ab8b78d35c30a2db54092a855347e88677157aeabf53ff0d4f5cd242da45c97ea00a9ca558a61166fc22e30d4d29819d696052bff2220051d0233845f118ab883c66b82bddc37bf0ba09c0eb2d06a5c0f6785d28ceb451991f65f32a6b9bf7506608a27f0faa7ebfeb9c7e32859d9e444fcddd87370db19cd1ec12d29c83f29fda5d550e0c10e2afd5c76ed7e4eaebde82dbdcd07cb0742ecb16a8a2af513488f192bf6e7f6a7db35650efa6299c7be772d1754297e6f24c5d673cdbe831517b3a353e77cc6fc664612a1a60e697e0f7aa052799c521064f27fdfa15482a191977fad46a4359e339aa02b156ca97859d0de83a6fa35e4098f6c9dd7ae302cd1c0c7f42914c6d9ab40117daa34e7912b7f790f84128473ce143e039355fb665974f3bb36ef46f884a526e39c902aece212b0e53884b9b3c704d2bcb34231d8d989429ed06c8d54ef12a2196a815c03b3d4e6ea14fd42a2579efd6ec64e75c25d1dab482aa7125cb2db815172d62de93e01052c9c1ca514173578210252f53cda480af1b121a7dcbdc8c62bbf59727ba91a1ec024ee177869a19a15eaf4bc48c7c9bb9c8550266e22273236cb0d802c006ad722673584b007bb137c7e08777cf6b21bc117b25826ca3f07d1d4e118eb99f1e79b9423a369682eeecfad94a761a0155b62d98409bb532af5f17a9a4eaa0bd4ef0dd066b8cc8bd793c344a743d67261c17f7645623f7ee9668da0afd718b518cfad1cf108433de259f032d2b5fcb2f042418315dc50a5142f72f4d0ad4087eb0562e74dbb16fefd6ca7da196b03c29e4eb7e5a640b3993b1be22e4aaa0e2a24f509bbb385620baf67241ae4192acf8a4258fbbaf5bb2f1e8d487b65e09aa2841e942e26dcf51ea4d8ed38943f582b683f5c51ecdf9782b2a6fdbc1ffc6d30753145626061d84f04dd4a650b07628741e53dadca4e8d08e21e90e8f206d0e0525536b891e455c65a996ee09dce4d8ed2cc26efe841148995d3545bede62bb1e105b478c6a273d1404aa9ac8d739e1a7b29c063e6d980d78f2ca9fee38cfbc8296e462c13cf4e1b5de2b0801fab4315962318b7287bf8b555a66cdfb9a24c1a6c4dc861c99a9a8cd74269f39dc85b15643c43e01b4b84f8f42a0a3725545187f94b2e0df4b33bbd6cd8280517747c94c7795c48dc3919aaa7e7afb7772fb06406b89990037a9aab73b82f5356c9322c915503ffae7332ead24adb9a55051b8ec53caeebd1df5ff425594f7d820fd6d414aa88241c46a79485514a655dc60aeefa95969c319431974c23b3cc66dc9b3834b5534978c3b193ce2247f7d854d1d34cde8056a08b30b5cfa2fd42ead018bbbfc8ff73fd8ef3005818c9f2436234195b5eccea7ee0d5e87eacc047858ac958691f164c849c8835fdf42b884ee4554fc4fcfacdb1e11cd6a9c2d5ab16dcf575d21cddefc87e660a498b1042c7c7b940d40a740ff50e2bb37e586823475199d9bb6b1d4c58e552ed8884f87cb831c56f5ba6751352022c28d8c8969aec93174a95c63db833af5895f8ca69e10cf343a78854885e2bb62192289faef53eafcba9d952c0a80b76bba8b741683465346a1ea4db7c91ecae0bd7f9b02572915c068f53f31007ccbf52cae493257643c54c644caa8481a1b20d949282d1e2f3faadef609cdfa3432cf7d27d49244e3dfe87e4cb717b9ae15892b803bb5be3b04df0e7306a47a9c644f97218d2db73673d76fbee4c6a8a85fbf06dc0f31467225e26c36043109765fef2ae62750b893fa433564a33456463d205aae11010e05c3bbb0a9f6e57e1d387a92b52d549bb447c74fd84602035d642e9183779ce070da365b7293504a822cc5191b77c435bc2b528858323ff4fb3ec2529f64b8f7f5dae4cbfa9a77b75e1d83be309c52a6f1e1c5d0c937b34ea0c85a33272fcf6e43d020e24e363395d3e6b167acfce4a5bdeab1f5c6e2d327d02319098091954e7572584287d41d837c8a5757f9946dc1fb1afa37126a3d4b4231e07bc648c6f75b0537df5e5204cbd61d9752fb5db63628122b5ef57f01a75d02ca016c31931a69a183928d555518b7d4c8ccd0318ef9e961905bfa6df156006b60250be138f968aa68949d7088066d5898c3ab27267b47cddfbe4a82af0cd68e09461ec7c49c47cc659f35a74e4ae85d7086563c71967ca4db65eb629c8ad734f3f96f947d6d1fcfd90fa1c4ac89b92c5598992803fc69ddc4e570436c3fecc82d1f8d962684bfd141510dae53580fa20a7180c027eaac108b4c5f1bb633687de74d67c5efb499af6bec30d5bd8bd813d80845a535dfb60a41698a4cf5e2bfd6a09b6e00c2ce6e8e4dcf4341cf60cbb8b980cb7a5c5311f21a839cab0b47c80bf2a41f0e432fac148a8f419ed3c5ebb0c0405016fc08b527a4c42a871660c50936960fb1f022b636f85ee510779a37b320d531a28ac95aeb6cb2ca6b102505b4915cdbe7f5798e319252770cabfdcb581f20ae746f785bc284adc3fe3cf9b8acc756d3a372be82edee4194df9ce9adf5005dbcaae95076bf97717b8f89dca579838a4dd3c647cf7be0ed14d2301ff2c1f28c617ff73ad507f502c937261b7afea5432c763016ef20a3cb11266aef51b3c9d1caaa3ecea43d09269dc80051f7f07d270dee08c7535348e6c747d1afc00f2efa5a03c849eac958baeeba4a06473f36c5a547d828075ef523b62161ae253db0c27b516c76ac36245bdcd059c2a4297d3f75f59dfc8c2e9fc9eaa5c3f1c1e4728581adb660da5c1b8f515a514f7d5ee1b38247562a85b07204f9701fa758afdd0c51ea4cfc0c1ce33495a7eca34bd347cc57e1dd2122a924105c88a0ee42383f2479b57fe2e269bea963615e72f3c9bedfaece12f17a51b01fa37053d7c5fd9d0027b4d73d4d6f2efa8ac17782d336133d062e0c47ad83ac75cedd4010f4491c24b7910fc45a163c6ead527da292fe60e8271cd9ebda4ec0c74253bb717b7feb75769430226d696566eaac78c71634682da90a92b59f09049563377215ed16634cdd029ad13a8fb326796b4328af1b92c3a91bfc5f675f3907114fa976b533aed7023b81d5ca4136eac173fce478608cf7d5bdd33919f89a12ae5ddbe92a9e665ca8c0d4e8e40ae2f6a60c0fe140b451d9591ae8b79ad59891234516a3ee85a2cd0c4025f36769d06c6b9df07ba86d7ecbd141aea29db46c8f3506a7290b80420367f2b75b4825f9aafc37e4f1a8177a07b6028ee961bd7b92bf7746f16e2e04b240b5659646b152487ddc5a7a82d713fcaf53ff0699c1e3374ceea4321102e2f1a3d700112726ee82b704b6d0361988c97e217e3856a62700860c239431651d4990d17ade64a97ca474fd78bcd382b738f80f3a8db04b2840a838bb7cbea530e446bd7c1009ec15195767393392238d257e65e6b37a4f6fc1484ea34aeb37c49e6323e6fd13391eb10aea818a2eebda032003923950356105ea7974317ac236a8678ca92dba576ed36c0e72677e3049a6299eb13c3387016fc1a298551070133e0859e03dfacd97b9fdb94a65ba6fabedf7f67e4a1220879aa7436ead43fea1e1a14b38bac5ff5a0220e2ec618283a3f20f0b0abf0d9ad7fbd468d8214f474275dd122c9c38a3ec98d5312bb2aa96e723ea06ea14b3072c0a61329a1d603eb9c0f10ad532348cd4514bc2db85f76f680a36f1bf66ebe120a91698ef229fca09e09f4225c71ea6e45509d39ce39a99f17a9c36bfdd94af4a87bf376e83df4120809dde51c8a76117c8bdc4ecda95fd84a234650a8561adadf9d6c04c25d876f709abb36e0ccaf2d0fb28d3b7f200c6838d3bf118a4c48740a23fa8d57e7376c4fd734fc3781769a131a7220b32145e36997196c56f2b2fb5d052cabe543412589a2fa060f894df7285366c260b4d4b52d75a6500531188db5b74685546420533114a82f9c9715cf12880c46ab9ca74c9cc7bb55c483aa8f9af1f5c350322b2deb05b2f5531d6e05fc7ee9f4be67bff076d80925f6ef70c3948d9b7383c4e35b550dd9a4cf693ad1f586b3bb777714b579b6c1fc15a6618946dc8f4963f3469cce2aafb7e6681cb18b429f309fe550b4e66d499f6566dab6404c5de5b0fee5d540d630535a932ffe718258636a4796ad5e7f8fbbbeb7a0a87c1534ecbe0d19c2e8c4f2406495cb5c4d7ad1d63557abdf3f611f0a6d3766363e851c0f6ad0c8e796abb0f309c77d5ea5ac989c3ac86b020461b7af33c7331463633bd76311684239e6bc656eb09ef467bf42a05205d7934c916898eb751dded01c9d0a43eb6a82ed0163d1bf1af2a049f0c7ddb85da1b435d27564e9f9bf4f5a5caf8a57f1ed3ad5b97b83af34b7619efcc53646d8df88da7828d5cf71e81a5100220c3b3443e4b6cb210938781be8d34e79cd9a71c4ee4554aacc0319674fce86d1334463126572436960075d1a89ed0f6146e86aa83c20878c5f158f7ec6f6c4c718c8bacf7ed5aae8606a7209d8e83c141c01c96ba3ce539bb1ad2a33e225c3b118f7eb15e49ee3a959070184db2415683dd5bf9d822144e5ce8f771037b9ccf84aeacea97a9c75026cf471fa7f24c376c59aeb3630d7a063eb62de2726354181e780185b9d9814a9711b879c9dba14ce9a36ce6fcf86aff5d0ddae6c5dcef63c5b6b81bcdc29ba21d3fbcb0ef1e4fbbff18c887f81c4b3872eba8776c10b4f8eb271ca3a42b2508d6f285c952242b30ef0471c3a57a544626d1090e228888b262d9b73a7b0416234318b2605c3aff16b8e7343562c1b95ee5616ddb4c7a5c1e1adde430b6824129e0eb2fa8cf939f3181efc517f00dc2299f040d40dcc8d768dad6bac0f1a01ce7daa1eee8161b59a8c69fda5cbc3d2de2861efc424f095adc55b1ad2b8c2684d4cf05e68d219ef84202ba6d946b4f51306a76b6ea8d9723a347f2409ec72a02cda393bee53c66831f008892910ccb680020483f787d28695e8127a59b0d68a00049be7c182261a2221c659d5333e519ac0201fe16781e0e82a8d1a00ce717c11e6c839c7295e82f4b2f760ad534a00e63e30ee0fd0f3d1997ea511d478aa36653fd2a3b64419cdfbaf66971793958ebd073b4a1dce8f503c40b82dab79d1d09b19ca2f4b067140a2815dda0f180a1e1250fdf6343cda30f073b75be2e96c59d79a3fd6e5c712b6d23a4575d6aeace651585bbb7d6b3da61e413e58e141107f1e02a2e48fe7a5f106d5302bb31c495cce4b7783758ee887586ed98e235d2962d734936082e5ac0ef40365bf5db359d7bafcefef9e550706be4f8624d5536f68f247ed886cde1f8332f5329abca3d7121cee5761545757a681acb4f45e9176671054249501c464c99ec3303e8db509a25771c21b0d0f57e2c9c1c06b017a2e429cf300b6459e8212e2dcdd36e3dc8d3549310dcb9d385a730aeb632d9369b910737f345e1560697b2244848c02bff59c7c7e9cc95e58feae4b08db728745d0874cef7e56540cc1620065d07d2df4841846215602ef566c567da5352d432680497350d289a1f19d77509018d053d8823978c873f37604eb79cea6506d62e0404a7e858bf0dd344bd6636e7cd605af05c665627695d11e035a990235ba46a9a00c7e49028f694057cb616a336f86195983f61b7eab194228961ec26d2fec265699005c899ad342fedfd81f9b6746b8c03fe7c858827d4e3e1d44efea711421b43a93e5080532ed8b6e8c71fa89aea6ba96cbe11618bdcfca5b1dac0c77b48704b78113c5b6dd395ce9aa8805365b1106eb8f60e898f6ad39516d47d7cb898a62bcc614ddcd90420ba58935c9d7c34e56ce19fa8fca98ed746609719870624e462f9b123ab2e722e2c12d83d7776ae71cb65af6e27ba1612db79589eaa036eaf3fcedc950b113a60d306b8b40d34921b4ee91f01386b47973cee8298f96a2574d5d0846e2f85190e2b384c6759f97bf1504f5c9874aeb62bbe92acdcd088b33cb0d4dffc872b5b15250d44bbc8e2abb87638127f2cf794977d930406e126384a26e6569e20a44768dba68b2e2ef1ef02e98c19f1f2821223a530a1c0b3e2e9c6f45646080be779558089c4042a960357a4b57106ffc01c3bcbcfcfd9254e1102cf0a77e10e109b50bf5a2bafae9d6afa6161b266226a094ced3c85723cf6a41e9d6aa494998424908792a17bdb4640130cd10330b26ba2658072eb73a7265f2294db070ce7577261c5283109400fb932d88f3c1f3ebd78dc48f518e18f8de71badfebaae026ddefe283643ff3834504363e56b1bbecc90aabdc12d9044980eb8c5e7b5d2ad5bdedac7978c26352d05dbfea82d557773faa4ecb097bc380c68353659fd6fae2d09ba91298ceb691397ced034bd3d72ada0f44147a4ba1724dde14c7a7bbe0560746fbe4b220a1c01662e94ba5ae99b4b5e51535bfc92bcd563f1bfba477e79a9017533064c439a35ece032445832681329b3ffc2c394d351fa47a26a39c0324834164f19a10e8a1b5df61f22b55d9eaf1825a5efd8e6765ef7de6fa2ce648420464534310ffce866bf8cf1942d480faa12683fb4fa74b804146fab7252b74777bfef0afb28f7538efa82ffe4e6ca6cd0a9e5f3434326cb8fbdf15ebaeb2fe136d576c62849758dcd6b3b1f713fb1a801844695b37446391f23d96d58364e0d0e98ab968b20cd37ac5a26e5265ffe14310e2784063df9818c0fd36fbc7c4254fd87385c86b3bf80dd3cb699b0a05faa07ba71c7b4af15b5df833f1bbd412154ef429cfd86f640b0ad0a14864218c32b13c30b313911e59cf32873beabefa22d24d8984cb40f7efd04b1122410d4e9c56d8c4e56a1f5b8591bd2d3ed8255ae8d4e33a6f028cf19e6f03310d02295b32bb815e473c8eead6bc31712d10daea95375dc06cbdd093ed81eae785e93f4ba5fa1e721c081df6b8f97f0f1a9fa99a0a9337283967ffa5eeb41651c6ba62dac0c3559baab2434bb3a3ea53ae3e9f74de70d37652aae055ed5332d7db91c966dcb4d3425745415ec3f1e2c4e9c0d9bfcd45e6af93721a8f86f06e6bc9335e33f8300671ea33b0bca16ea2476350bdfecb50595ee44580b4d47f000efafeea228643d43be31d0da6965ba36f7292ebf83866afc9bf59c002f1147f5f151f426b027a4f707e6ca77b17dea0a687e3778544a7932c519930c6ed883c833710893e0ac95574a7b3ef2559bcd49510fd7f1c0b873309fb15f33b16810ccf261f336153f6d1aa239ac92c29c0b07d1216a807933907fd9a2836dfd7e0c58cc5adfaa5120f046491411a8d609c9e5256446c17db9992c5110eae4bc0de72e3645914e41f136e954c9be4d24ce4c30f29b377dac47f53474c90ac70c33c31b3684097a25b10a35fb9746158b8e7b25ae627562223d7aeb450ccda71aac6c3adecae481ab328be0f55cf90dd238984ce54ae4e71b1b6c2eedcfdc3e48b11e19604a54b84a79b751eb7a2fd0400f0195fc45109dd23d3ee6f32057f3790b8f50f170128065891dbea5eb50897b625c90490e9d3be1bc91b2a9c48c4bfbc9aac42d9b3b05600dfb885d800f148904e6792462f5c80bb2c4386a4b06a77938ba23356bc707b366509dbddce8292dd576e38e6e9213d2bd0048c05c251c409c46da061250e329082ebdba2a9c43da94f9ba8004a112bf977be432224a4772b9893fb94e0d46fe7369cca118a63465e408e911dce33c292014f95adc9e87810e7d2838377d8b6f8956d6e84aa82563a81a112bb9cb14d321cdcfbd0b0711ae0c075cd868c98562d0c427fa7a6b3abf1f37f1af62a542cac3b62812b6f1292b009a6e7361a1f544dd9a595689c1ae2c7eb2bb4ea3ae3c80ff1ba935cd2576a0a373f1523037571828454b5bfa93a99c7dbff166b4d5f7235f61bc147c152508c0e490f9ba339be4e8ccba99fb644949aa7f38af8d63b5d0b6bc27f392e84531934d4b72732b2505e191dad30f941ef0db17d08c8adf86de1142fa039b3425783f02ebc03100f256ea6714b05a5e572ac66f9c94b6b0d9db3057490b3a98f828b49f14ea2474def56e7cb816836f4a9f5b1a1af727b4144595d7c3b60e4e45f2749ce8d14907bd3013e539672ba3ab136c3f240fd732f8de11b57b0f0357b2ce301f3abfcf5514874879c049b1ce1a8e6a9fd5a168973a722f55becb68cb401ba1d0dfb09ea838e580e6e06ab95fb319831ce567052e8d63012f313465428dae84e7c0f6ab62978f7df14cd0417818071279ff70b3d2aec959a3682abe75de63648bdc47b08d20c1df614946db2ee09ac6bf7af90562c69dc43055b9d8b73e36abe576794f8b11be37c5ad361f751136872f3774f1e6179484f19b4f40f0cf5215197e9262449c351816f5686c3e4e2ad9ea008691d245472f3994239b30ac4ec71acf46935aa3b828979165f9e59ef67c24eb5c52c8096c981a5919a4123b11eb339bf0cafe32797d60a0a3c359e590f8da6123c7f73195e9c481d4a58722c09ab647254fb58f42c54a58667498f55237110f7bdf9613de660ce6c453488ac1b3365979c303f2e04e02be8dd445fea92dd815f902775de6be9e53264987e3fbe686ccdab28e6da985eb565c8156a39d2cf87ab3c67bf7d995de47e419609e3f3d19c0a1fea9cf8b28e72f01474afbbc37bf5c7f3696403c6275550bd5d0f505a6a9f09871d777bfb624a352b0c8eeed811257899218b41b37c9cae3878855823f8c6da3fb55ac2109221f084336d96e21e2a23713a7cab10cd14f4e4c0e0079a7c229b0a723a1f2611141a66158cd25956616446d7455f8ced569946165cd53450e7fc4a6ed3150f1180a6d726593052a5b39b9523f7fd33c7a1abc1722205218dcc11e9807db7526cd5aaf14985bc006eb91a051982688321175ca2b9ef46f10bcc2a112d0dba81af5c069cc7804f1391f752f02a6abd802649e9fbddc92121b214f0d19cf88e2c67c666c08710bf296dbf21e404f6866ffc9eaad720440a960347b0ed0d3cb596bc04c98d496b43465593b74ecb77ff757ca25a8e6cad5c66aa0f26fb687b6e3e63b3a82d563d80b110228183ed8bafdfb8fec261e3bc283ab9e396e8e42fa55ec3c9a08fc46286132cfb311b22a5a172151365b33cd0172cacda724542e5d0c7e63375582aafca3251455ff8269d40bce72c6fee16dd0ec9b22521625f13062b37e9b4cd8885ea72019b7b497f3766cf60305f0dff6e2ea41f4636c488031dba48afb406d3932654f1738e9e3bd1a49d29fced19867e86e8fba0f73e62be839dba6d79bec3e573ef6316bb4c9035ffc9afeda43d090f6cfe127b8c9ade9d0bde03ab685d70bc3cd1f0caf87c5a7e076f0b6b227f44ec14f68593fe65c077a4bf78f0631bfdf0e933e6eb504829afb478c2a0c11807988242c0aa1dd27337fc66a3d63c023dd5e35640749a4e3f452160386d0cce17b0172697669b5d1eede14873dee1adb679e28ebc64cdcfc3379c0c4da9e022f762cf6c63d44aae0922ac4559a013e5a36023485c9d519717cf43227eefe9562c0ed8abbf75435cf0ec5608f375d354630028b3d0cd78db344a4c8018a5f071904533452d92c2353c13ec97aaaec051be2ff01ce605eecc35093c4a97b8b9d74d332493285f704e4b89f76af760d64abe1982ccf170f9ccc25a2c860272c549dee7b8666b63473d68354daf4b6688802d86c5d9815a3f6253f4bea291f943293efd03d6d5b6f85aa610a980358e507ac8b922c2b88e23a36696822e7e40043980bb0a0290a998d134eae04ca1e5c44fce106a992b338a9f42ec5717d8682b9a4360fd9681dfd2c08e584cc8976e223c943c6647bc8d4c2d4fb6cf4765895a716f431ac1e184028955a3a87c0103fdcdfeb21283f82126c09f6682298caa6a98dd5facf3029b70a4069fab5e08f2b6f84ecd52a2d77cf101be8f101348157efb7dc20f6b00a8a2ff55bc28508624b3254b7557e5979fdbae2553c6d037022be232b82c280d81be982af11a4701134d5df5f7be2164debd8b77a5c4eaa76d8f92a618f4c84f24c06ffc6e1330931c37bff5c03b553cda26aecb59bfab357402725e832472753bd87c05169500c0f5198660b621d181f1195234215c8ed947c631b5bab4b222797dbdfc8effb985b6ef0c83f1f2f67d4b5aef0b8813208c837e3381f18c5eb7f56648d5e79851ec0bedbca5e4adca980faf19adc1c8d67b8d39d0ae39fc912bd86ad7c961f749f2bd37f78875853da382b6a6bb04687b8f1ac731812dfdc892c3b13f471e04fead242bcf451670570f903369c46d946476be2bfee4c288ba6374dd0e9433ff767f4c0d5c85704863bfa5a90fbb8c16cab1d0f8e6f8af097869ad24bd1dadd805ade9434e255e53d3511860a48b4a57f38f50b59eb436c94fff656dfad69be77b4b116e32d97421f260150486ede88367a6782b9e29e7a3bc0acdbf3705ae97d50dfa25ecfa8d67c179aa029e4b8a8713d87e6ab030d2f52f261d69d808680f4036b09923670192185658c73bddea68984b4974d5ff4e347ae0011f1cb343b9713100be505902da1c94da26b5bf8edd1462c24805e36bb31581d87157d2863928666b596cd7a447fab7fad28655949ac688f0d74c505d18287678b237f49306bfccbf1c0fd914a91afec3fbeea85648fcbee64c5b39311bb1c8fbca15434efe4792545889d8a8f57ab907cdfe25260885a974eb631fb96795809466caa8476d66c45976d3a333ca3b61fa90b5d54ec03a85a784573f9a792517115c050d37279175c88a612e574484e9e54c48e30f7b1f4a91febb098293f8bf8f19e3c92c28a1d9adeb67b74ad5089c772aa634c1075e2b334a51157aed0c1689e9a1ab896e81a769599453beb8461b45eb8a3fea87f1e9d918c56c2483e28f12f306d27b002ab957acc72adde617a338ffa61291d4819103f5d7b86cbfcfcbed822c54af06d8efd4745d621a5e9ec34a10efc83c444e6e2005f992cc15a3e3fde496369932c1bef261b344283cb37d6a947e9f288d933f13d3193d1745023c8905b2ea68d2b9aff17d2f704d52ab44921f74afe0ef38d5dcdf136da9193bbef7acd6eaa32453d74706103e95bd09ae2d83eed5c429a94a67f1162af24f077c809a8b63dc811a7b45218571fb02a5522baea24d28a69cba935b4b6ad5cc13c513f1a9b0bda59da1bc36eebd1a7ede738a66bbed1d1b6ed1893576f813f08a398b6f878f6cdabcd62b508221e95236ac74f3bcb91400c1ac2bcd8cca450577f9c33821f7ac665dc571e352b9baa0fb15342dad7a75a40d6d1d858abcb76774d4076938e88226970cdcbb1e99fab9a37863352b5ad1f9274cb1161cb4f1dc1232790d2a728162a7f556e1b1afd3178e752cf8dd47656e5dc6a136d441043903317287b06a43afafdf9484598ce68410f76c11fe7314b280b957c67b584a8b7030e7cf371549fbeaa402935b5abfb75a7b6cd4995b4a886488eb101c8dc19a21cc6a36c454bf6a257baef866b046f4203e01aeb57e93188c086eca42b2dc35033b08485111c50d3e7f1312c0c0d18d8119c6bb31b074b2cad834a2798b825d88b848ec73a39182aa331e3a9745f111b9f40e0f9ba6021ce2f27df63deec8ea214a200096e54c32ec8e98e8fe470b340ba6e32943d2953bccd1ed29f0cb569d0d3d114563f65a7ae3177031e38a9ccb43184e1acd229fd0f5dec00204b2f47fc52d977e15dc139820731493399846868b402b9f08a59a1b3827189bfffe5c2f2f7f8d71712c61317257f4fb8f6c25b4dfd473176248149a433a93a25ab4df7bf2e18e66f8372e3a71c4d1fc98b76fe3e22bd0cce4caffd30494992833bece0a8b38c83992f7be9bfcd0c98dfbf0571ceee5b17044e8fc977da9587ceb0ed4299b0cae31b93f512f0d87c88cf059e78a04b57586ed51b5734678a9109a4dffff43156b894060be0861c6f063d01310637eec58cc00cdc651b746e4a7ee9be86551c43e21d8c465a1438d012e64b4591f6dd1d494a79d12d62fad2d59b37b5969499c219a292a2204c4e463c3b7299434b8e1c554570c5558ae010ad0d16f75c3d76ef727593a59430c44eb30e81cb845cc75e042831157db4b29ec88ea19b2720f7216ae2dd6c8031379c4776bffb9e29e00675f6ded7e5505ec6885405993d5f27109a3ac4505e5598b3f2d3073f45fa6200c2f13146c4b94c4aa5b455350a1a1a537308041a50c81b623b93bf3049ce91a1746e121e71a7e2b8de28c3999a712e76576a139ef1a03009337eaf270169a1c811ccf0dcc59b5c94ceb7077497d639af44eda193c2fc4bb22587fde4671dc0fd92deb86533dbba8a2ebf4fe97902100b7f68757820989dd330f081f4fad6c893668ef00375dc11984c2c2800143cff381c543df0c3727d623567660d8a7699d6d75255ad96ea679dcca2f69fdfb5f830322cc2aca4c112fa1d67c4350ca8affbbcb935680805f18a8832812016336f473d7b88c4cc198ef39a8dbf210df994065aac10354b5dec653ab1bada36b097931bfcfcf0ceec9f0acbbb6cde3374b4131b53b5488ed7d61ee03cabddf55b99c3e2adea2c856b2e26f70c91af1d429b02df4131252e6a7cd4600ffac320b6a0963722ad9cee5bf53a9fca2bdc7dbd099806df3d4a0f963e538ce4f77313a700a6d6a2ec01b2f0f7bac0fa67de791b93e94a6b47f8efc7badbc67d08949ba7ecb82de4cff9c4ebcbf45ab9618beac7282d053cfd0802080879e279b1020af35b187dcc2e68ff5ba39e1a95af1a0347f0433208682589516117ab29475ec2fe220b702c733b87b965aa21fa1849bebb70820b70f156f2b81409f8ab7a46a6b1e4707f24a69686d37639e5090304fa24ee041da0525da49f5b91c9c6a88331125c543d1e05a2a38d0d78077cc24c3a6019d5db93a521ef1b2f00ba29b48544dd8f87f773d8711be768e73aea7fe16c0ccc69655bfaae3a6e7b19fc97a1035026e0ca562adc18bd51bbef7193ae9f0a1f3efdb36a1d8ae936e51b1be77d89ac2b32ad6e964449f2d76eda8426716f8216844377f2cb3f965f898c1127f5e49a7e0c606263649e0ca423b814fbc23ca9c784e3edd5396eab34cfa3281d5fd0e78744087ccf1182d828a3e9eb6f54d0b119a60d515a4eff57ba7357128cee4dffda76993bde856926395c2613975426316ae99b29c6c7c58f8e2d5ccf43f53f40abd928618f20ffc898047c9a20c540a190f96bc21c53bec9369892e7133b02e733e1d561fa1e2ba1b0274349feca3a4b77eee2fe3cdce4557c6fe55cda403fba7820f41953d279508d85bf8cd55fa72e080ab59518ffe499f1aaf71db3a2fe7eaa6b24bda46dccb4569d6d421bacac37e012ae58de5e695b03a048f02ee47f007250ef2535ddd0d234d451ea03ccb4d65e229cea4a1e1ac2f7e33076654bb308d1acd93046c5bce18530faa2fa8c86a0e4d2bb3116d2b03680e5c41ef71dfecc07f9e08a8513b4f72d400c2a9fa566c64ab2d835815c2601a1efc0023c8186d77ed18490823f8f9b0f40fabe3017389b758208b84cb98eda22e0bf8675306443dcede85841e03a9a0eeed0085f4c7ed41aab998fa7189441a050b969d23294a1979817ab96bda86f84c2da481c37a41030d835def2f9df30c67424bcd664394ecfb5fa4cc6a36a4e595b06f207b00d279c65e68a358172a8c5c3913392b09204b683a289ee5e6a7fe79cda47ee719b8f3b780812cac228c792256d47c298a73fd5e35c01d852a6d0647e828f242569fc79b5cd2d90883145f5a4463af752fda75780cd8580c7ce02cf7da1f09e1fb2fea4df6b0bb52bbf0fd4f0e4272fe4375a230d6cb81eb5107a6b5b2cc334e89e9e93d99ed7e4b2220ecd676083bd97d8afd2bf772b6dee7f04d51091f474b7811b3cefa0379d593781566fe30c00ccba51dc3e9e92c7ab008550a4deef1efe886fa9d616b34a5ce3c98cc62fdc71ba2d6bff2cc906cbef90d10cd64a8c17e1a505f4365d43c40d07978a4cee18c83d60888859f66f68bb067de40cc1d9fe6f0347e0eb267c24dfb1147c1c62c731e0c7811323e3d2761af326baf30bd579cdc0cf45c8113b8e1cdda199fe9a2a89f88863943ee7860562ce64bd21da5a6be2ca69793eb0f5d4a131c2fab4e59a91d7819540771f5636f51461673ed474d5e5a55144e407b67809a9a77f50e580893be4875b4528cd7ccb21307d5325886db78a5f0c0f9454295627826ad2f5cc9957a58b9334c1e16db284055b23fede070ff7f98c5f9c4ec81071dc0a082df74cf3ae0d14fcbedda2aabb55b5083aabcbb80eecc86dbf40485bdd354418cb13edd437d284590919f9a8c7b60fb2cedf5d8f331796d73355ff460476748e7c0fedb569ac9f9f427bdacae531ab983dd02513621a9d7dcdd365c07760715676599533d0285dd81a38e7c73284d98839441c50198c76d43c2e78a38f5f91920e33e9fcd01f68fb6933acc896c6b2acf1e95ecddead78dd29b8dd184c57c994a4b58f8cc851e8ae1cf32b37b977922e6feec29a539ba9ceb2163cbf3801b0414d23b3faaddf01778a41916dd072c16549f4886ac65b832593f73c1ebf0c522a9955ef6d4df544f014b891c51e56aa5c1682f415fa030ee085426d1c3f342b33adb125763b5fa91c6d91a02764936b260652eeb5024085c7886d72284f7e29acf0dccc10172448c2e851f59ffd4128c50823a485231707f63912c3db63bc98374d82345e7ce22dd73ee57f3a3b141a329f8dbba083466c74c261ab340c7343f921c752f989029a44061eb38a9b126db421f394ff9ba0260dc7592c481cc52e0bd9e794766179e47d37f30c3358aee16e0a63fb53607b50acc13d6f3481e8efdec16f4335bc85b835445de84281b546f6e3084320b3f9922fd3d5f17974cf36f00f8b8924509adb1e6875626bfdf75525c7c5904b169a543808cda2dc9c6655b3b6a25ee45120aa2be5383a7f62e1546b62c22fe7bf44d491a44f7e7d352219bdecc3ff963bb78233637825684bf360a800da983a69a836f32d90fa63635150c02da80fb436965eebf29fd6a562d92709c49294895017af24423fd8a32cdcffbb38861599c80739af1877136b0b705e95bbca37091e67e34a779acf0ff6b9717d5c09a29844ebd6d038890f4d81b7bc587c9cf5bb27bd400d08c7ca61e6864d9194eb1cf28780b088f268a127836deb753b8812c95b04ea241c5545b787b5fba14803c20d4f7aee7c622369030030471abbc66c3fecdd515c9f9969771480b0891b0e9788c6ea1498721f8ff96571dce4f39e88be7936e36b37bc897a1a1f96bd7a2164af694b17e991bb7d283785ab8881a8a7f6ed409272cb521758770e34bfd4435d912481cab66f0028f0bd8e3c8ad65415ca4db3649ae86887321a4f50c33279b32859bb9d786809c06aebe68f90e91ec154a1b2e7d9fe840d09d7585a85cb1035f99af500f2297310d5d1a3b9b016926966105ebfb00cb559f978456091b7cd5533d9cd3deb94a84949604e3ed0269f245d6b8d0408123423b161621baaed5094cf192d4b1796b1fc673a5e302825b49458ab4fb97924045349b4ba5df9456de8b74c7cb050913318504f22c56ca53ecb78472a63dbf86b3a68ecc33bd0c93fd09d22af9612a7a39010aca06e8dca8a63076a5b03c7c7d1200005a230afd9c44aedde475cdea910d45f3ad33197cb47a0b255c94244487e7030287ad5d879276e3b0674ce16e8efd7519d63dff6f2917b9bb04ba03c8be3cd2d39567ed8ed320cd7b439522f9a801faf29d56afdeb10db608fd9fbb06f8b71553c9680e32049b87989fdc3f64d6a7c787b3e56fe656b09a50ff1124f081f54f5be09c06f1caf957164682804032d4488f2b83f9a0aec1f3e5ed94da7e25fd5c65ff01b6d57c759de01880192c30cb97e9815954701be387e774c39ebe7dacd5552e21eadf04dcfce7b62de8083150c8f8c35ebb4abcce713a097154f364b249056c107fe9a0df1300c417233af084ea7599e1fa534d7d40be0f4e9911a38a86ce23b0cb5cc02adea4710f28dfead27c1c8d8eceea170718502a7c3dcc5cabdef0f46453839b6666d64b1a9dd744bbeff0e90185a2b19c0bbf4d630e273690d64a84fef9c5bec43412f53bee0beb5efac4291614bbfcee3697009b3790e0951c2b3a58701e427231d7bb7d862306f6fcd060309b48352e73fa673ed9e66ea5104d3f8950486d3476fedaa7e11b19795fc6fe783f45fa023bafecdd78812f659c63ed2b0e9996804513b4778e4f98da66243256c94342cfb648b0321007ab439fc5efa124a57473e8e60047e5fa2c3612cef0f3ea108fff16844cbb13e5b604f4df191606f7ef22866bd79494829286d034ab384bdcf676686f85e7ffdce4529025b539c90cd6aad8d43ec27fc488b29bd8d87e6c2189ae038c8f1caf23e49857bee622128319516466607aa2dde7a3a8e721c7ce77a3fcedc1a2dae3e0bf2ad8b565b08e9605fa478d03626616b718624fc721b8097395264f8aa2e64715b3b76e0e53a4a19990fadce1dbdcc8569f8618e3d3091260d1e63233fede58d2b84743519a3646b37648f3b1e06ed1b4a3bd556b074ac067cc5bbd287fbb341dcb48f5631544477e42c954aaac27ab4c237180bed1cff5f1b91f9d3a5e91d4656d1aeb687e3f832d52c7e43cf0003c1d58509d8ade4b64f3700e2a27681d673ad2b3bac624447f75efd36dc621c82e3dedcc6dd2f009721a501a9ae161143d0f3dac96b324abf26e4612c89e03a2620e703a69dc7a8babf711996a1ee1a87751606a0744f001c44fa3237da74955d8b237cd6d36785c337de199984732c41a7bfb69479174c03007f59e3265d99e022bc2d04d9fe6922d3259d0998206f4f691b9ba015d3a7b4ef00e54aa78c9c536b18adf8905b0b592a7087d379f1f4ae63bc2d0763255186d7d69c4047bd9c96d258c0dee5f15426b3e80b92490580801217f4562532f320d51e12752441fb311f821bdfdf96e5577e171fe51b8e76502378d2e12501e0c0f9eedcf5d7a3955c4409a9ec4feca6f6a3f27dc98e31888a8d8ea4b3531c501c3b07480c84227f3d2b01552a4a26d63d89e70c455d8e0796a652015290605b5f37ce833638398533487abd2805ae7d4176957ca61f185ff6a0b64d48e66503f745f96b482a37edcb6d209bb9b2f8b03137b4a73fd5c387839b792d27985e89ad24a5ffed38617b61f9beeef22da15138e0c852fc456821d4df4b4e35790076680f72d100355fbe700c83d29349071f9f5b24b62e7443c219acae47262b73cfeb1ca6b24b2a20e483c56f3b96cf7ce2953b1e010f056a385bcd21fb02389a95724c8bc953902fcc23f4b2bc1c8db457be97faeb3181199839932ccfb1c90eebf54eb88f8085dc2f16c5e41842e4ebbb1bf3f76d1f3c93e111f145c9e497786c9f1a4db688b5f920c3cbed0a8fdca60e85ebb34c8627fe0681d2e43e9bf44ae1283b7f8d747d13fe3bc1a3994598311b882cdbf33394c30b04d75a1cb036ee148bd6480657f952802ee23649d5c4b839d0559e118d509668ad396500dab8fd519919b047569b70f11fa460fbb4e804475a0c0e51f6161091d80af81f210bef4f64c35e5cb199879b0cd775930aab22bd1c1e0b2cd269d0c6046189bb96c7abf7cfcb22a7899af5af0109fddd45ad53a288b40e642b6fd69113de809398805596122eccee7ecd092d498a9bfb28b90c570e194c5a28c2b175615ec056d872508106a1573179b93546cfe03fc8bb28475151c8a2cfc654727ec320a69e42a37f1a4f1bd9f42e7e28381af08b823add424bddd84ab7ad79bfd1e1d278459ce531049cf6263f11ed64f18430a27e963d3c54abbd0830b7e0959d057a20cd4613bbc3093bc38a5f4662cd3213579a2adc45291716dc5c0772f772e4525148d0ca5dfae5f25d95926edc1800690236693af57ce3350848172233cd8a4c43dd08b159b38432e09abe08b611690e111c849f7cdabb0ac3414a66dbb2fc444438c5230929804d41d972c2c9bd29a0442d8d74e2c65c550722eda9ef54a80ad8460fd0779e2cfa272769bc7b6d4dd8d635668c6069f29d385c774e7302710c13d33373fc68d07906cd1ad44983a51cae0d96b58bf147a29bea1f95c5f23adae61202e0ee9d0cb8798959ffbdb33b098be8b734bfadd5301a3093fd127a5c6ecee1ad8e1af6a27fc1653d295e77c7bd526caba0e8a8a1776c4995b627166b542cc634df407206691548c08bfcaa09f1a3a8213f5926ff651e712c5c73158a3a4a0d3f7c17eb862776005090f483ee9c4b9fe065c13294f02655c9003c9399f76fc1fdf15f3aee808cd986ca51fdd7bb3b207875acf6b28771efbfc0339cd5dc42763081087ba097790f04f876e6e1a4b9e69708892d1d3c0ab5757867e3734a5e65919596fde47809167a558cde05536344c005f59832bb945645245d1b6282c479117c8a92ef37b44a776158728add26b1a52d2832c1c95465bbc44f9db7558bb66cfaa589e7ed97ff38a5ee3c1cf02862bd2cb0e0fc8c0006763b6e1972cfb8992086421665d892fd447d5b599fd9287c732f493a56246ff9edeab1ec424734eca4ddc229d88e6c33ca79b43d5e3f975c4a363edb68803adfc39c9a597a0ef77212c8edc9720b0e5549df422f85fb15aff5e60b0914e60cccb70518fe4939e2a97f55fd0be7883d84a71cf49c2e8c3c0e9481419cd7a869eae975377b8938bb64a99ba7a732043bbbea4016719b35f7ef8754972f5e28df3783bb03c9947b748b232c5325a542dc54edb82b36cab8df308010f4b38efa965885f290ee15e562776030aff09d510e2cee86d0376db71f9d9f102a5bd3f261d02f43e2d65b4dd24ffada1a59d80a3c57a5261d63b711b532c090758f23f77a87f7aeb24140f1f6c2778b6b9abe09eed4e18054e5552a183cca45572cf5f488fd6e68fb12a706cc1b292e4de6f9a520410d36397376e0c88b5087d5eabb644d267daeface6f70809304bb90da67c4930b0f950462af467fa81b08a2bce07fed84b927895bc806a46e620a0f0a6bbca3cad19ec5fa49f50bac6e8f015a1d1c9a31cf17c53f22dff8f196412cc34cda2348df52291e85aa488749354ba45ef7c96881bc5899ac02e155a02ea845077af4a812d90a2cb4cebc5dbe0adcd0c896c4c24c7c83c6c6d47588f3ee6e90cf6a21a090ac27fa80f78d4e1040566da79f6fcbeacba7d566fd3a6121946239e7f07c64e20fe145cb9e0e8728315dcc3655b933cc3f8511a5556deedb6d01c7f53fb73d05a8d387f9410f11132dc66853908acf8e7f1c00fbb7f9a9d2d06a228e95fa718b10f65eb558e35e8e68133e24980892f163db69a2ac521b2681460aeca89fc676d75966e9d56e89fc86099964bd47e6ad3e576f4afcf5034a596dd5f403fd34a1b9b968b48f9e2f63508cdfc7cb332c359e19f91c7a384c11608f51e209ab7f05d4d7cd996473da2e041340f47c0c8c04946dcfec101ce1e906a73c3e176cefb1459b8af62f3b757c9b39c6fd79f8cc0560dae3baef3fbd20ee5dcb2cd54116011a9ec92f4154f8f322396175a433b5c03617bd5edd52057dd11225321c59fbcbd25d77a192aa13f2324785d2f7d97036847ffecb0ea3b08100b6fa3a6919937fb4cc6da080b4b4a320aec78557c70a7a156ba397117a725a17d68f2518220d977d00c451f6e1db087d7e5f2ca74ef54868e83f281d39a2d8f5a52c96aab48c4708f8989e120bf4104ea6c6ecfeca216f4c925a2c265e153c7280c7ae334ec71cc67f66dc220dbb6ee728619101d0358e9e07935b20146c9723384fa0834677159f6c2810d4c7ab53d35d21818f2f6072af8aefbdeee895c461f12b9ecda7bfd7ad6f51bba858ac0402caa3f7b05477e59fa10d782fb0b4b63bc6a37103404c51daaa48084fa9f3c207dde4938509f415d53563081f7148debc7dabdbd38adda5d221ba0e5264d96be1462a68b351d67a0f5534666b855557be0392ff35eb6faf955437b20d40ec46ddf77901023744ddd83f30cd01315c27f3225b025012d7bd6cdd2f90cc9d684b3db10137d2c94964b17267d0e6d827c0a845b576779c1b433deed7acc1a05a3c8481d3fb1258872cd8c53e05572d7712d02834e7270fae2233391d90c8d395acf65518aac94f463851eae6d1540d1433ba18d2b7c09cc4a5af9e9c4a94ee8f817e67440fed23b4769aa487b6385ffb4a338c8bf81068bb58a260bdb46f2d940c2bb6815177abd908f31b0993b2d86df69a84a8584cd1b973f48ab26170e1c2fa703bb920eeda801487de505b93b9d7726d852088417a1fbcdd2976e72c49afed5fc885cf92f9d1fcb66be78b37dd374ec7766d0d6a673cf080189416cc36153bc2d70dedb806f5bd2052b4aff11b5ab6be1c077813e788fb8d19c525e52cc10e0bd7c404e66de9c36124806d8da029073c6b295ec4aadf450df46deb97165943b5624c87f7e114187a8b5465f0b92986fca1150d004caa84e39033fc43210095d72e47448d3ffc49fc14b68a0cc4de9768c5a06ae8ade397df06d0c83c090f46e5139878f7cbe789e064a4bcabeffa07f1a7ad6bdbfa4358b6017e574d39ca0a00b586070a66bb4384681ebfa5968e8e76a8ddd524405792ecb0a5e112420bbf99bd3a4c9dfbc245d2653732c18dc272d801d502b70806213c4193c8fd27de9cda227a1af11e237a61c6b7e82c270f4588caa920633f9e817f8014056b33b8f3bfc3cad8f9b70b07961099090e562d122d2b17e6b5329cb5d560179531120732d14dce5a86692349cfbeaf9525ec727abf86bf4cbf3e60d815fa1e1be95cd78a27f50a23ed15885c80ce24b3ed3ddf0f997c0fe5177875d4172d801f27436c4e4b977ff6afaba53bc625b2782a57192bfbdebddbb48625994a1fedce6a7f5aab9911b745b93174adbd4cd8ec7f8f0f767e49632b2d8ed9704689f95b4010194f9282e0378c09d83f4fb65faaaa6cb7190797175a082b836c974f74ea5811b00b05744f80d0e23c974299c12047a13d191a5940c9d98f0b75be1f4a4ac868f4bd481fa98d45162e81cf815cad48a8cb69f0cc340b48bfc9b7504afd5e546fea9389d6923107388a71e05a42fcabf4fc062aadb135a8912cf1d57648f848e1a5fc050ba9af1a30e30bf422022adda51242390bee1be84d93b2b7d5cf93769cd1a1bd5a5fbfbe399e522b8e7108826654311648c668353f8002aac22a3a93a8e54e2ab980e135b153a208175368aeefe1ca2fc991c6f6c3c2a7eee2c4991e0b33783ca78babaa6fd770fb0dd3f673d6042285965fb8b6c33fc3eadb29f57f668f70f71b182ab7113a95a5940dd3d96b776df8f86550de29b63ea916f9cda36cd4f6c3b6711ccf6a7d8bc7c3ce2db73f24fc952d9fabe4d14e09cabbf82212dc77c7ba25935bb05d8731e73b373c54a3a625429f761b0d9796e2ab02d8b174d7c291af309ee6e854d06bc94472185df8843b1d5d8ec1feb0c2e75089cdd06ffdac94b1e66e933e5126425f1c191663a96bb081b948dd9f961aacc4d443fdbbded36ff7448478f08577e10d6ce8bda5ce9c577e2ed2927751a67788250b83cb33d1abdecae425ecacdcd7ff7f30549bf301cbb58a0bbdc7991c7764c65e3140991d6325b7e37c760c1e4941648fe9151e80c8e34990c278887a7126598eb97579c47a39f3e1bee6195e54ed4ff98f3ed9203372a8075858cd56aa456c62742a48183ba67784ef501e531eb0b9dfb08445c4b79861cdd179c2133c4e032fbd502850307e0ccb2befb54331f3b10315bbfdc81c3ac87394b4237f5dfb1469447140829e22c894f04776383b4572efc40251a307a23304084244d937552c26bbc5919ebb0ef03a3ec7eec258bab970beb12912898f0abf76ae062c0ec7841b995d5a4fb5108bb88a93b0be348ee2f38206336bf389817e76d4548771db7f07073846497c3e1a2acf3b485619f9eb3dacd3712ef7f6be20e8dfe3aaf57499d5d6eaea7e16fae09260b162cd5164b470256fb8e706da96dabd4c521bcb1ad8ec53100aeaeec5b990cfc3f8556684a09620b4c8af183729db711df059079192820cfdb867f2ab9c32478a435a4c4efc0f95157b6c466ab1a94a4eb7069b0df09b5a9225109696ba236d8f8b3df97308db72024e86a197662c7dd45952b794c86242e56662d4998c13ae5fd3bb1fc27a9d2bd52da3e1f42e689058e9e84eeea8f640bc759d7b6bc19baec94ae4a30d0b51777fc77355c9e62fdd18a35333ea017faca37b190b9865a8ba10d7fbcdf9e626eaed8231d6cd6400e3ee51d877578cba46eba17d4d67c859074ff38fc52c3f56a4fcd44633702d37b0d1d13a5bb3195e7e98bce5390defebc45a36eac4658b48742099f2cdc6f26cfb8cc72715c8c7e2f22ff5d7165257a2cedf49e64411e7b11b1644d1a0e6962e468d920915b2cabe01887b038b9e25114e1df323716482c0681a7d92a0c7848537d751bd9262a705463eb2053da1986391616e2c1004822b5b74e6a85e84981c0a7a93b33dea988d8c5e008a1b65b523148a05bb62b50558f6e656","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"5616fc32ad96bc6054a97b08493500e0"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
