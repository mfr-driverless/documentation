<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"9897d1c179e3e7dd75d6d596324f471ffd136f6ff4d7f4ceeac65fb5853056d21b7d31e80b5943d9baa347f729650bd18f30f6455a3bff5603891756254996fd749aa687048bf6b35bfc61608ef56fef9fc015834bdfc2281a41a56aa9f14eea5b1fa1457df14b6f22c51d8a69ff870dff0c798b416dd5e08ae9d6b7f17f078fd9c9ab50f732a0ede282ff47c0e22543dabe5dae6df505b8f600a090dd1c56010527e9467d91614424beb501704b2b710d55eba69b26fde758cf29abb542c46485a782fe30bd7720448e2809c2d564e32516c3eefb8eb844b8bce1664149bdf68c077d812608ba6d943a37983bd7ef2c729788b00a63df1597c10e5bd6fc0ff870921f2d051d223174fe803627548b06e9786f7ed70d14ae80ef1f4594d79e858bea62563b841c77283342ee2084fe157e79128816822d859addd7773e272fdd87bd77338d9a4cf471066a730cc4011c510a29f3596e24f0518a9ce02c5965af21ba82d5a306fbddd92f980b034eb8d3ae147bf0d315ac88fb2b2313d83a2fa4bf2efee43c869bd8a5827be964cb6c6600595640f2c299002bf279abf53b07b04cd2934c188d3a4eb1b594ce6dd74c9cc920284319dc00625df9b7b01a58d2f1e3586dc3e08ab390802b302d33a4b6eff2fd79308b0e6955486bf152cf6f23b7f20dfc814268a5f837fbba01e38b9356a64bc3e5f7bd1fd75cdc292c54171c7e5358ca45e63fa7fb0acab61f0fed76c46fc29ae482ecaa47a14fa7c3241aaf0231fd747ebf5f2ec93df22258a2968d8f9fff4d853ad50a37f2327a76b025331880cfc363de4dde81baf34a9292238fc47558bd397c7eee49bddf09d9d6d3d678123b0b41e418a17010b99ec63c4796884b478b3e01fda25e6d6a74027b16d5ec63f8ea56ef535e5a712da6cfa97995efe67a849b0f9c01af1884d8545494c8efbc857bdffca54e9a675adf846182c0a02da02def02c1bb17787733644ad13770f2cfee4df61e601abcdfa34260f2f67dbabf4f8ff6ba5f122badd5c36baf70e7bb1cc6486b9f2d075b38c0d4eea0f44eab32eb48f9987b0f40bc26d3f4ed78f2ebd1f50176043cc78b378978e45a75f5104854fd79eea40b5985d82e582271f30049c5c947c16272f7dc0e7b301af5723a00fd607ee4ee2de97643492b1d9b70df8a7070dbf67ecd2ec35c052281f9edd9eaf8d03878511a4a72bff543d05b5a081f5e7dc200dd50df15af721697d548c4b6cc7a104a1f885967ab443f039fd532f762aacf6513262f25d8c013dc9eb4ede648efe67d6befc14754841b7ff104978d1a6ff71fb0d66bc2057ace1cec84b3afaace0e73e0e32c82f93c1adeac6c348cb49f9dee98542a6d86a81b28a156bcf3f300e194f8729deefa29e6d45e6a2df5373e44d6569ee203039c1ec4728fb4b36f3fbcf5b08bc5603d2fa884e650993b3e137b04dffb02580db4128a0018f4f46874c8a0af32579bb84c8cbd5d26dfe6ed29408a4fb5f0a378e9049bff4e1530488d3de0e21a3e7f9ccd4a9ac2aed1c5b07ce1874af0965ae3ae88781e433f626d02e0af815319bf2ea141ea0000d809e839b85a0f023c24a24557045c5d8e129062c9e29281b05a8d4f66bfa44121a315ebe8af70d67ffb6e037b7a1a13e4985b9b797e4ffab78c60cda956cae45a7468fb5b9d2c46fd30b6f0d9d42b0812b89a786787a726f18cc3503776496f9b52f53e20560ed34db3cad14ccb062dea6dcb44091b98ec03611581fb865e7cdca10c7d0cc8d793af6e10a68f9733d5f3205146d0328ac757aa39d18da2eaee93d237d157807eb2c56c34245fff7a434452fbcd3a9bd53798d8d7b6de86a5b14a6650f176958cd14363fe3655ece5a039dbf647cb942859545deb7498d637ee69afd570d48f1017b565130928c0007b74591b5cbfcfe8f4c5c5b3f26b4a965f26d4dfb235de9ee3da4a81f01ab0be6b149e2f6ce36d258931523d255b6413b5b5586e9ebc40126aa74bead7f493d4e818697981e30a32d191d5a8178df168f72c74aef69998ce22d32c9ea74d7d8444d8f139b2f2fa85be016393e7feca5c82f259bc8aad7d66aa2b3d24dd2dc5dff579af3e71f2df6b867dba1c2f5f3edcde232d61366967ccc32e812de1409b84f918f609dcd4b359786c7f8cc28b403d9229fd50307f7ce179ece824f4e6ee9b96cea28cf293434b8dbcfe11dbc94a50614654161e5e38eba65536ca38cf400eb5cee437fb6f32d494f80b9fe65ee529d5801a1553a27f86420c0b35f88ebca1fc365c483e9dd9063687e38a9876c16416ea52efe1dfd9a5c8bc62be9a8e9d196061a7dc0143dfaa6bd31b768dfccc2ba7d14e4a70785809f37f779f7c4eb61837b2d2c967171afffe951c4507d9363dd7e6276bc037f4fb2cc866c15d9ab47232b0c52bfd5a01d5ce8674d95e5159b5d54e9a4b8290940dd46c8e8161448f136b2b0afcb1b0f9178380f93f1224ad59a759beac3ffab2f023f9c2b841ebda6fb785c7c7fc3fd1fb94c8419ddfe537959373c95dbf02cca927aebfbc614fe7769a7fcaed634048ed530d18697bb3f06f07ff9002c2b36f029fe4f04f371df7eb400bba619a494c996ee1be99684ddabe761a22c9351d8536f7fb7377fc4698864ac695981a7249197a04d4216b12042e188f9061223baa10a459317f717c89a97a69f4b96debdb476546c236a973d45f182542e3419230a7dee05a7020840f20f872e1c88ded21ff61e4acc0260702d79e18217bf4bb2d20ff23065fcccd19576b428630628aee2c18c1649dc90df9520ba7b10eed5f7c8eb1ba8019dfd820cc4126a2da2edb4e255690f93855629c8bdb704d2daeebddb49d9323bb8e1d1982a1ac9540040263b7f08da7604fa99ee792e37a90c62285638e28edf2752de9b2eeb1f833961405e7bbe10cca68b8d4ab4a05e76a54ff8fa0907adeb5cc47809b18fb1c0005c5f88259f70e2e139e22fae20501543d3cbe1556813628f02dd340b23c798918b7e50c58936cb27641c8060433e57bc8ccb17a23fb11a8f284721df5d76e6835a6f162b8c8da100ac7fa02027eefd198e46eb1cbe7c1337105efcdf4ec9e79cb1e89717cf6320a82b25012ba9f3c59bfd10c35662d451087ceb459b6389b5f053e6801f2707a94cfbee4618bedaa5fe74d500e7d1a3bafb36d110b8d84794e4ad53b1175d804dce7806cd5bd35f19d0d018296ca52ddea646a5f2f7660cbe8b79dba44c14221b36cb3fa6aa10f41ed4d8e84ac69b589a83ede974fad1be80daa546398bb6fec9ba9f9c5323b64816deba105b8f25b5c3199e536a1a14b602f077825618b11a3b3b54f53cdff8703bd5b127daddd35737e69baff49508561391664187f15073844d1b3c1d58dae1d556d30128605517697ba6611bee4670e9d754de7c3a495b210602937b16df6196bc3185bc0b8320b5d39ce2f223f39eb6ab2e0b3006b26169f1faeb9d4035fcd449cfc43383460792b4c655c1d5c756902d06753d9ce67d1dfff80a1c8b1f8b77716ea0ccefaa0d40bdca068629e80c50fe025097f020e966c18eda3d6b3552f00e8416377bd8996626630a96185a69239d9d292514d22512d703a86c38a87135367a6bd1ed1a03b1b3fea9a875f8e298c984c278d82b413c4df2576876fdfce4cb90e21620ce83e057caec7eb184adc60c30b6b0ed32634d4cc0b41fd861d4f30105952be8dffed95b779c3106da31ec715d46f8086b8bead6001a957e18a98991336062e56828fa15bbbd9ac9b6988b419948e71edbcb1cbf0a8f9af563cbe9dd508190ce03f3e2d5f88e8ccf99b5acf468e412a4243099d0aa05c50b5eb9d2d2bccacb4479d7adb05cd03232fd13b7ec879f1d7530b07a86a27bdc5983840fbd04c15fe25123af6db503aacc1f2c709d1bfe0bfb768c5e4dc3ce479c80d2678cc81851ada280b63c39a3ea77b67defc5c00a2461f420d552fab802ddc3d0b3e7577fcdbee011ecdd5e4c5c9f35c445c5eeba75fa2b5dd8b6d41810020dd41d227a272cee1a901f3d1d941b780e16b765f08b35f5257f87f99b6c4b3baa537a6f3ad9a79ebcb12dd28e38a09ff2a11b167af93ca9160c71372f47b26d51ada1243944e56b6c191f05584a5ae29f8536995b64edb85caa3cf87616e8e1aad8b66dd16386ee7d158e22f5e3bde464e6a45739272c7e97c4b272c498a6da6df40478454876ddd36edfa7317e86c2303d5cc0717d78a938a24845b5e4217d491bccfa1aafdd77a306e42496d22eac3c0720453144634abab5728d6ca16ea9e384f8ae383abfc17646938fb238aaa3f660736e08fdbacbd266de87ae66760d19ca631c5716d987b71539ce80a625b7677ffa5dc3a0881c90c755650594720fcb01d55cae1d411d241a6dfbd021e2263ca0572fc1056ae76ad48990683bb60ccb210c55f5a153d5b0798db57eadad21f69ffe8279a8123d0b16b78caddd913c25ca67f9845f44a8ed9f8c262a9ce4e9d21fa9a2247254bd87aba11be236cd7c8db08c0cdf7f2b7536cda2d6d3d1c99193b08540661e77a1699ff18fd7d6d1b9ad5572e699eb0eb0ae36710656e95c660663f14a4ed20c51291551cfa5b08bc6229ce5d7c8a121a39258cd7ab77316eb778c6cf9ab9120e2f536b9e47d908acbb4930d43a9385b3785042b0a978c675ece07a600f15a3d15c4dbbd16b1526f91882348b1b8f6783409e69649ebf4a2059c9ae0630801ad18ce63bdc179bdb16c7deb1cf106260ba8e58e1306d4d98fd8eba874e8dd88c53c6f82e2f545ae31ee7666856a2f68753327c16e5acd7b2f213afb34469359cb029aa5f61a13a49310a892a1f032133c33b3838a2f31fae8b731aa4aec181c75d9977e7a77b65e265d8b11933fe2fffa3b9a0eda5868fe3692d0a72e997cd48b75ca0ae3046225385f41faf7a6b66b4b05bb28fc3740735fa8ad2936ef8f8b87f3a6e1afb6e22470c4df20db90c318be815f658804aeaca04d53cacc776af9d75b283759d25a3a000e5b54e7ab883c597a95228a07ccc61e0abc4b651aebce97a5c20429633bc50b000628072979a9f745e106524ea9c227cbc6865009e1809248543242b2335608331cd521afab5efc8e8a18e9e968461f847fce21b8ca728a4812cb477815482bad609139267c3cf37af073bd6b0725a66f3ba67fa3a8880f3f5530f3b214a033a869512f19899f003dad4d832846730eaee6ca979c18ecb5be69bd4697675989a546f94995da4da8e53e8b04b6ce4a1d0582b4e7db373b9842e23d252b95ef76a12294b87a49fb4bc3999626773fdba361ce6c78d89df59220d7448023cb51e8f9ea09aa9afd25c415b8ce535555042236bf4283b65b31fd2553a22e1275d59086db47992d9db6050b7166675cfed1639b537d0125c1b346cc7b1939e66131dd2fcfe3c6a2e271f6f177c11f1751aaa2f6922d4b525e4d676b372371181362b664d53b8967dba7e552aa981f27e53f3fdbab8d14c0fc8136b770950403b7844f09beb2885ac832ead24dcda0180e46fe20648b5eb7a06fb24de97f96723f85d2b7b836fe57f234ae0fd06e3fb56e415dec7dc646f4d77d2b2f159e1b23d4e680021d73e0bdc689411f056db74d33768d4af6d813b585039f56bcc96259f92c6f5bfbb5132a449c8b4bb6ebdab2a0a1b9c92f002c072dc68d6928bf20d6c620aaa1a57fba956b9d8a5b16dc266d0076cf0bb6f59ababbfbbaaa1fd0c442d8ca82130fe9dd91851cdb0940039f3e9eb1c682af4b04585c21ffa675ca9081530878b742eaba7d09e887703b741d05cdb33d706da8da66c5e79560963b06864700d82e59cc86e71aba2b02d3f5d3d713e0d52a6154e8f80b081c9199ad247ee55395abc7c17d3d6b08ba7c022606a2e0364bfebdbbf5396c557b5e28eb75edfcd3b9992b77eb4130095344d1847d84a3b0cc34fed31fbd71b741495a3afde75aa40c828c5b9a614f39809aa65bd8278e099ae9976cf2f013d60820bc80dbe5e3ee14921577fbfd3080cd423ca04e2db5b77334cd547a50803c2a93f82fdf406cbe9edb78d3615eaf9fc80c949850da1b9bb6253ed4cc520e02b07a157b72dcd55381802a60cb342f66c25189570fdc437cd3402e127545decd14524ebb5942d75e757d3480c7f61e214275ebbb42f9583b3454458082ef8b34b3b574615c03f7595390830a8d7cb8876898b06328aef38f49eac33e74d5f6ae5b3250902d14b856edba70e40c45f0bf4c34982cf15b3137aa1fe275031d07803fd91f0ece9dc06ad67ca5fede6d1fdc32f108798fb82dec6813e2ff7effbc35458173527703cc85eceab73c99ef8d497ab1b9207050ebe61f5118dcc1a09d77586531d03e7d7d488d21ba18d0dbc43e1315d411edd64fc9c48e18eac1c4bf7bea9711688c8d8b21790d99a80e6ea900e00c817e2112baf755b9a0782a93e6ce1262608b76bcc8e894d07bac25ec12c0c7e2ab1515335d8a20529503f21b10845c5178c94bc12ec599cc5af4cd6175b522c9897e16272162d2f8ff015697e8549707e0f97e89eca3deffb2cfb0151decb14cb06da31e67aa7f861f7076cc4374758495fcd3871ae992065acc19b6ee030290f67df80e73172e70361522caf356a794b08733948b976cb900d95472f760f7f55fd849d12c584457f94c51f205749386c5fe885cc1443bea4a18c8e01318a83ed539cbe3fb1a8910ec1ef0419b8628d08818dace72ca9454ef42d5ea6d0312bc051f60c5ed65e1a8eaa13c240753d29cc742d29bbb2351221aefab21b284a804600be7dca9b08f70ce407fa9cf85d4360c0a27bac33fdbc8963ee07f1349ff3d24cea631c19e65bf13be6db4b97282c93ee90266e08d4bc2751f0d60cd46ec31906c5bae1c93c3d0a250a288907c3fa835339ddb8208a6d04795762fd3bca56871b028581c7fadf6cfc87edeed475d1fba0e5f21677490326bfd080117f957aa2442a8fb24f4dcb130030a3f98f1186f72b38e8bc165d933390fc5d4e2a47ada8ff9335736b3397b81e19de0023e2415534a4e9d9045114e899ce513e6c0f3decb8beadbb8e20ac75069770a655cfaba96bdd53a8a88b18dcd79c400904f94f95fc5bec9710f15f22c78167348ffe1987c59e45c79af94b53c9ac183e54b51f5550936a56b6a4d97f4716a8e790333ca80e4efb08c8efb0c3f6e222fefdd9fa656139af1a59cc5ad611b49fb19ca6b1964a1a1f84f413e32caea8b7635f8ad6ffc29691d0a8e5864d848cb9af37e33985b70bc0adcba6faa416730bdcdc3f56cc641e1d6558b6e50b56b55cdbfa9f0f49efc554113f88e7c5b132d4ebc989ccac3d4e7e3146f535736e91a3e84db72243e96e09c8016c24a8ddd2754598ac28a4e05c270931d2692b9c4fc7fd15be7433cbc3b738cde8c405b0527f06f283ec88dc534bf4f268f8e4ebf0d7fa71a4380d1b32730da7a611992907a277bc7a6179648a90c56b94c417f35f540d1d1da1f253956b0759b539a3fc0e0b7427d554b360962c05093025e99a6878049319312fa31b2a7ea738b84658026f2ca1424ecf49b2cbb9279b82143daead36146ec406518a8936700d594c506d343f8765d67c9973a7653655918ebbf9108ede84ec32251a9172750b63d3c709e0af4f4fe761e2ea0993eb87fb1d1b6c13565e2864798ebb9bcfd2b64c96e7977f0b2976e0e79ecbdbb04ac9a20a0c2b7a9ece4ccacfa21845972dd43e0a67060716b6fbc7651ed9c58c2b4fc658838f2968cf82e06281602cba00d5845a76640acf0491906eb494ce2508aa9a806c1bb461ede5342c23f1776ea6c7e69fdf6b99f6f5245f684f781202026c702bff0405c70800c7877d5c258fa33862645fd673d7cb55207b95085e2e70ec258c1c81f3e30d0092e69ec67080d192d1df39fd690f0ee13a6c1276755e3940071857a3c29d3af83e6b4a6e24ac087f36e6670fec28beaed8e84b61d76ca9167ca5b0eb65976dc1e90e44796add1b80bf2d98afa0a73287d7b447427e2f25440ec2f093fb7da16fc5d7002a286c911981d88794a77c6540b220560b21cf00adec1f698966c0b5da22d68f11d9e19a4fdd6bd3bca13f5d68b7cf352fd4e89cc629d5a5516fad9634f68a8e0bfeac1b3cbc0c96f071ea7dbf6c4e91dacc711557fbbed8d1d3a77f292891997b2ec0ccb27e12cf920c27db17a3305c64c09f90375d0faf3e919b712084b7969d0bb811b696dfa509fa47db6eeba664a7ccd17b7e2641159ac9d018ae542a6d44cda3f83f64ee12f04c2e8df186c98ee41e24c84c6af0872fdfad61838ce40f7e9fae09ea316dba67e5fe07a91714d855617ebcacbb486775d22bdeaefde4a99452f7186583614e43b84ef3517f6cc16b7b2e4863d8fe27289f581979589ee0a9694de6973854735e13f1b7a1f595a66c8ad3bc8114a8f0fa286f5b83f45c23875f61f479166e5124e20fb0f559768869b1562b6220dec68ea64bbae0a406ccaeada2eebcca7f6c800f429dc70cfb05c0064b4f14fa6f728b964dae780f1c51640e2487135d84711ec38c56d5a2632b309f92a0f1c722d53b7972ccde11c6b5d7cc555af63bbab1e491a291cb76bd2a5052f9d2112bf8376cc321dd9f016d18454bc48cd919bf07e75cf5537ffcdea4c8df0ecaf20d0fe9b57b790b871d33ab7514f4deab06026ddd8ac031dfecc6ce055be01594444c743f7c3600f6c41fca31c444b8bdbb5c4726a109427ee8427b7b582b7281d692b4a7a9e114a0b26c1ce1f0d7a07ab1eeb1c57f4b8ebf8fe7148aa69a4ea166b8dbdcb1b9503ea0106a8b59c3a5def180787047fbeed646e8c1e0774210beef3cb0050cb94149589c5d5ba1b3f202a906ed26f2e4621be13e780b0113422f3ef247e7f7171933f76b6bc75b56c63ed27e54f489e610a361d48c57d9627a2c77dcb7e6c526fac9173d552ebaca24926ef4a4569b71bf5407f5aebfcffde95ea0241669b4e9903d32bc340557d4a599f3a7c190e058561c687c75a82073e853e947a13db955a75c433c45da8bc7b2a5976928970654175da28ef5e53bcbda8a43e1fa902a8d8bcbb27840e9f5d4d3dcd736de262d950d1920243c79927d9202fcab894ce30366ce1929eb50515fb5fe8114e48e8259c451c1c62ef04190a049d22102946401f8da640137c11a777b205f32939b0dd0fe498d2969e93a8be3e2f64da03893ada71607933c733c28b6991394a6cb68682698bb80a353eeafeae0f3da728d92e9921b2247e4dbd1af4e2d5406a7f9f28ec121e6aa8c0d002ce97c8ee7a2991cec4c564fd96b0e5ec2a13627f07ab94047f4cfc4512e1754098828223bb06150ffa82fddac746892ecce76a6100dd6274f1d5cbaeb9cb154576084ac6cfbb1e2c1d03a400b2d8b44687edc3322325374994c0e418183e0101bcab9f3dcf13605450b8deba6cf51c3d23d20e86cbbd0c46f9445966438e7432f100a82a08a34e02b1a13b2238047217a6a02856965d1811191e4da60156f50c6c4e7137654d9358b427f2dbb4a3f3be2ef2962b3684f45d4b392a0ef6dee971dc29e5fefac2572cdada034e3e2d31c98d16150c8756b06b4cbf45a1e82bd9d075ded5785f05baec565512ae99d802afe6e5368694fe86984b33b075b84e59add8610eda7214482535e9bea8bb71b679309464f8211b5ba63d23ee726ddf65e20212e1d266dcb8eb323178417779b5c346ccf2255b01e2902f68cb3cc37e20924a7fd3198689f184b25f576e8b2e7fcb762db16e14fd50bb3273a5f37f6904241be4ff240beed6f7d3a03c7b21ac507214454372ed74f9172c0cdc4206cd29558f05adf76fc6483a4c9eb8db8bf2ff5d0128e85b049a54f0e70d073bc9fb5cdd986eadd38d6d9db209a44007101b3c7dac2d6a30b4fe5bbc3c8ad430ba12beb0bc20445dbe1628cd19f891277498864b6d718912cec895466e0cd542881ff4f64a21ccf5750463e0cedcfffaff0dbaa31d71dbf5a53138fdf5d64766e04c9b6f74e94a8dfee56c5cc06658249002c5f6f4f60a8755dda092be0c7084643ccb5512ea06002f655ff8c8d48216bc38c84877ccc3d4f008cea267537d6208256d2fc9c8b887591d4ee33ba6097fe6b0497d57cbd434bac0e1d7f57f12b013124d38e64a31b9148bdf5e68cb6a09676ce9aaff2800527e1bfe79e1becd6521b6e8471a8d0f583664922d66b4287fea138de3e0a92838c5fb82fca7739cb3506d5e514663ed25466618cb4e4a4a6d7e8458f7d3c9823e9ddc95efba7f6e6221b57ed6788a240654220810cdc4315a48549b0212ff3e69dfb071a433717de46234f5c7019b6f380bba30b811f67b834def1d24782a01e36b4e3f1f4291ce9f53b07f6ad552e65fd01c1f7b22011fe6ab2128deaf64557aa99cf1986ed5ad22c51f4dd25d756d6b2ef0b76a8f76d780c653be1343b12229b57c93a3c4853fe121909b72714daec45c5c7aa53d2c4e4f3cd9ede9c08939106f3985745a5b713a91e5d3571921d6d88d1c30a71909e3f7b5c157870ba871b7d2bd6770b7b3154c27d45b5808f6a56e18e2d0f86de75de91022a943a7f86f283bb1542a4b9ff638ceefa6e9908e7335b2ce46078edea0924b8727a0eefa74dc17348efe2d073004215f206f7cc58ba1f3b3c70318c6335e90b95e7a6107bca7b42a31cf16e7bfc03e034ad14f1e12940b936860111ebd1fb6698270863b125333f2a6cb380fa04904f523197bcd7455cb1e717afe9dae51b864eadf2eae6ee075f81ecfcbe17f04a24e4ee43568fb3f3a599341709d77a89dedd10760924a65ff37743fa89b3164712a93d3baabaed79744fc6914091dea4e0a519994bf3d43bd203051bbd49b45c56f4cd6a106f1bf98c3f640ee889d40d4be2a6907d7140e5fef2ef5db4dc2f49e6bd6ce9b4b0d1f5e6b04b97540e2e096e4b14fbf2691162bbe01ab76d1f90e32cd64edc514e6f9b4b4f72b14602201841bee3491435f60ad86ec519726b085b325a5e8c505dff86de3dd0d124dbb453bc3c8f0272d8395df9d1d4f712ee82a7c504ee4f2052d078997469bd6618740d506fc5f6ab61beebda92995289b7d483cb9dad1bb617b9572c7e829b49df399d41d0e7803469e963e0ba2361cccd71039cf7471c73b7d12562d23f031693bb350aec1bd169f5e254d30f9e713ca627895c1ab8a3a00e95cfbeac15bd27df5e2f22b24c7e4abcd9762fb2af2a2cd59c12789cbcbfbc6b42d3695feccc9c6fdc5cfe5d15e4eeda456e9e2d9e8f369d793192d3e43a6dba75c99936c12d803cb193146b676d02bdae391cca4d82180cce37e13658d6394eca4e26170f4dee58f12eaec60719b03a77d329dd8d2999cec8b568d172eec621f2f39a49d05f5d7cf06328fa6ea20fab970cf9cd980b8b6601b9e27e042d6ded82c9b424be89fe7a02e04c391c7cb4f9125edfe1736b72a970f43cc172c226bf16298175f72560eb3f2d3816c4861fb2b040b3db77115a55e7a1907e49ff35888972f4ddf17ebf1f333c8d3519d0ad2eafe3323037dbb67a7ed2d7df274357d0b70ed50cbccc41009212e562ff97bbace135d7ba01131ca8f65b7f319328a2e8d44962113b04abb563bece398a5a546cb06a55260d3180e109b9b2dfc867dd5172e87c4d0da327ebff9fa4242056496d359430877e769a9a530af7c2d00cd87bd5ca14dcc81fbbc36f28a4b79e50e97ae08e346278e0f33b7b72081b783f55cb5e5bd276d8966758a8fa3073285f913deef982bb1d7862694ce02bc53e18b0ee186cc0f676a384a1fba613919601a75edc1e550fa438d5e355811a55a9e8aebaa4911743dd32e79b9cb38b55fbac9efe068d45c44d2aa217a4fc85ae37eceabafef06a97a4bbf938be444ca5ad6433969736f5dd345eceee5dd1944af8d090637d38ef829b37d0ccafd88e65f7d4b9df392354977a8f6bb552bb2b943b34d09a79c5b52dbc5e965155885051b819febb97ee1a3807065bd9913e74296b055fe8ffd7862f9595bc172c38ea6b3b3ef4269c841c843c41d4e655506a3f8b5869452df27586c1ce90f0f951d7359674ecf4c7a59132066642bc96d8468249437711c11b29432cf2d64efddf850e0c78be4e753891acb63e5fac670db935eadd32eac59b1c4a60ab4a1b2dc9c5d011fa685e622d67db0d2cad559113da8250bc68b6a1c30cf0aeb887b5be8f50980b893ef7b25606dd0ddeede1c0dd116b4dc87ecf913183305e534938cb834dc0589727cac61df427b3f5a0b74405fbac784763aeab279373f0f7e1012d84f9d8e12e1ffad6c8bb73a171b79cb4b2ffa9f1c7db583be6dd3abc857ad0b72a9259aa6392b90233623d46235f8c2aca795b0804d5e9b6c3a108be8eefa7095d9ac207e9fda06f36cad30bcace9d6f956c934b1fdf26a05dbe2d88d175391a5abceb9a9e82a45ff1fb227239cc55be9f12a16931b3d2ec1a437a01bbabf6d836f95650465c5b34c1770f867d5129cc6eca1e5dc87d89476f055a9cbca306ebb4eff850cd5585705b09c9d9732b791f44f5970945382273cc63b4f7672c71932b38917749d6a085c585cc4eb4ad244864b355a03698c2827865d07988427c5de986bb226c7d4d48341a80108c82966abad9d8e4ae174195cc55cd559f31ae1aa2b65461fe3f529d5e1ff46d4431920bf3882da147dddeb0682b6c57e250401c10f5cef722331454347c3e311ed4ce939dac3c277275003bfcde893cdf72d250f5b79e3bac637982ea3020be77ea25b0f96e6d494fa9d695dc8f05feca75fd0eebc7d8c7b8f1ac61b63301dc653186d17411f8e7c1fb1b7e4fb8136acb332d702492a3f998ee2fc8f2ebb9f2ee6862b9ddd4a84ebb9d2495f91f4a81478c7db06f551fe950e2476ceb843f1448b3b300b67cdf60754f99e67e759f17054cd8d1b489c5bff72381463090ee2b400811956374d824f6a4220a6c5a987b6a572a97f8ae89b8dcfce2e3c4b680422f5b577ec20ebd31a318584d25fb9643343e6aecaae969538e02a7d8cff3d1357f2a6b6f0127931fc138686705d882a3fe5fd6499832e623789438bbbc9318f4b6dde426cc7db4d0e8271b02de0fae8dc53fcc9b62eef8054a7e00d054374ede71b3d2188f9905c9f0b7a66cf0c3bffd5c99be951f3fa212f31b6832b9f5261200bee99053ef9d70630330e106d74b6efff56dd3b751ab5c143f6308f86b9c4efc065fae78148d3c7007ee4e1e4a609656881da068198a6a25157c4aad2d8b5ffa85773b8dcbd67423e86d6ae2f7cd2cb6e3b4193586610d347fa5010cdc5c416316fbce2172c507ca2fda8a7c67ffd948b2110810d15cac6f3db564bcd058f6e9b634d77aae49b8ba53be5e9cb23ae15c71a7db6b77046d711ba450c4f316e0db43fe47c5c7e3eb3d7593457596b289757a9d5d55f6659cf28565916f06a319db0d12566449771694880eba61cfa79f53a4c5575cb5cc1efa1eb494c5f63fd207293c96b0e1cba1d9ecc39dcad8a3fa74a48e13827b938cbee47d0e84443f4835487f60ea25125b701132a4cdfadbe5a0d82896f26a5766e839b41db3860b7432a7263fe62a35609661066740b6b15b7f27f49132b2f8c4e1d4bbe4a3136b182718c9185a535d6c075fd848c6a2636a4d20d6100a48e646c54fa1b3192b424aea7fdab3b21e5fac33b865cf3b7df15cdcfcd2c4d13b9b6c6fa13e769f6f06b41f643ff4cffd54821898e420e9531282335a3540776e1479cc1574a0e2ac87c695383842e8f04d8fdbc075cf729b54333aa2181777e56380b81a2efb8da744bea7bae17e017d8dfbca88fdc9ad2846c4f00dda891c44fd6226efb1cd5602fe83065e5e9565bc0f8f0e9e0528c263dc875928d778e8955f103f115b301a305fe3c81c3b032fdf77d33d72eec77ae8f931c323c03a9c83171b017e2ecdec839b094951b8fcadc6655384f9da2318646a13eace08680b5b9ef808649c6b7e63cf77e7bfd8b72f54710c19cefceda957ad2fd8eb6ad21fbbf22476266c13eccaa202c351a01873a347032274441488deb22cf23997c31c78ab42401b2b852535766b5022e94a933fc4f395da1507cfc74f586735ca921399f9a6a41d9f4397b27706556b145970fe0200a4120477db753474d3185d99d5289be2de42de12251800ebed625bb449fad8e7d82d17483b560d4f068cbd3fc3d7a0dfe5dd7f3bdfb2707ddfea0d1a4bde12c75221f60651a375750fc36a5785e95c8795c49f857cdf98a55c342734aa2c109c757d34028d7f8c354b6e22be579603273335c72a9e974bf24f56e24c1649381117b35a45c9146a81a20598bfefd07da0f9445fa892e0c5b10b000e2ce4d9d78e0f8fd83ff5fc85e6c33bbee8f39c29c816b8a4accbf8339c11980a3c8953d8bb953da3c624ecf2cd8feaa9f3c4f7018e3f7e00f8b411ab230dced47e26b3640f721e46c9cb768e0f684452e200b87065bef13199a786763becff422b476b5c06dc3dcd08fb78b4db4cac0c7bc3c123aaccfedd9ad028c2707d209b9ab90b6ac0ed319f60ce98f17e4052611d03a40a0aee621ccf9311c2d492c47e353ec3d63f0e0c5c811d3edf46c2b5df23eb9e71b12800210dcd80b1068711ecceba99eef783f83ed7d1771963bbd089a2901ab1506c429ee95e853092598f7f5d883294708d62224566c56877d812b73582c3d8e4658da563ad5144856ab434b5dfddf1a70ad00e9567137cd53170c8d8921e4d2cb3d67b310291ccc7e9d0fe048b9413061489ea87a9cf1c64009a1beab5e949d920bbac6de80ae18e439fa7d7eaee68e3b1dcb7de680c775a8c7c2a989a2ccae2bdc4f7713f050f611fe53b0a8f43b4588cb9c4bc52cc468fe508e4075fbee1e14d7da6fbb1c29833fe8ed3d522c32465d47292c131e801df01d33da7d6f9ff98f163249f2315915fca870fa9424c2ec011007dfb6c7e3f405360d29dc450efa6d4ed254d2261e7f3ff179f42e8b20506370975e3d1780108f5b0004b825daaf7b3103584b58578df832862bc50dc8640fa86f33784804ad1e926c03ae36a0674b6fb6bd7a3f0d41e62bd150fe78bbcd8603b9135b94faa91176686e31532b975904ce060f62f01e2bd95e62653c8ade88016118be24359eba1aa68c503b6be0b55f129fa46c8d78786da5272c22a7874fcf171601f629636d82f4ab0c6f3ac3522ef746bf509e70d9782ebf2b9f6b10f76ba4f2092b09bc7db0df11bef5166300dfca87a3ba4218021db6240c037073266740f73470a7b3ac0fd9d63318a116648cd26787fff04fc58c77a24c2a2c6cbed8a477d46288665b0094bef51e0167e186673cf2af9f8b9b27eb5f702031f5299a3a20f3d467583ec933c823f08e9efd5612cadf8ad5c7f7d3b09ce9b2f2c281088c562fcb26414da769fdec2a79697a0eaa46f4aadcc411fd0e1afde83a67fe524532a75d46eaf8336b96333a39ae3e7a172e8ba300cd2eb83a91a4257f91e57f60a5095894f6cdc8b66af5cb81620db1493531de57ea2ad0fc9bc863f614042ec93065240c1510f846649171efb0f17b9fccb7deebd73429f8758f4b56bb4490c06ecbfb41dc02314fb1da0531edb62d68566540076ecc1a71fde43dc2b21e8649a513138e56b8792f77a4610524b18f9347dff90024c7c6f91508c16cb27ae8f8083bdbe40943f8d8ee58ce40246be1a9c041c7bf69166a9d658a564049a87e76b857ec17fa20e5ea33eff1a6a0832da2ba6dace621294f79492d51883d26a733d4b2704227dd965907fbf9f8a3a588b1213c138e8d4b0e9a677998e00bb4d855e918d57c8e11cf42697d44c82eb47cc104ec90b2de464d90125bdb91f687daa5fce2936177310554a054b0332bfff7181b0f5da3a83ffef662572867c10e2677e05a30bc40bf5aae7c881ec27e28ef535a424df9395b120001cffbd3da35c9ce69cc2bc4439f7015897bf2e8c0bc68d66b77cd30d5799e90a48b35070b8e9d53e00b020f185b45235be7789040501952f9635034ddd26b3c568ad4a05c0de30b738143f8f595e4cc826b2ec0f5222a1bd1b47781b248328d49b83651d2c2f08782f0edf1935faf501e885d23d06b4d92f222a77beeb1e63f43bdc870716159e66def36659e2a1b20b1c82344812e41bb9c586de97db21da20fc8e9d4adcf1054c15af69d5466a6b69cd679a89110f2831b4aa203a91acad95a03abdc4fbd92b037d9b9e53c74ee7c9bf093b28237f08a9e4f5f36c3b29d2b686234ec380d57c445b6fb96c0ee6e1faff2c6e220cd39ead097fb56fd36243df70e3fff6d1f9f25614e8b98555bfb286da6ff5f67caa20faaf29a9e3d38d8e2daa3789207af6ae84de57f105a6d9c90875642a6894b1baa2bfa541a9843162add8eb79878f963e2cd62ccd984b6f0b98c5496b206864f3dd1850ed8b54aadcc608de9bd09f70fc827f23b526232d577d01a500d9e495cb06c65218afde3fba56d4e1057ea058aeb740574b7b82695b18e9b07623bb398ec11f7598cce69f6479e457143c58c08fb3103944b69fd5a5513585731974fe471be07da1fd19375f5aed50d208bbe1e565f9762bb8817d12509913e084933f26ca313a50abf4f5611045d5e1977d5888bb480e5d54804daca883e216cdbaa38e7c01f7e3b90a8057e315a6721eed88e9d35014a6c77d91477e9633615daa971d96bc489da832c27e2329e87fa6d454e7672c72c16cbd3fd91108a1e33d519b3e872014c5d3d97c42ae6bb2fa022da2286c6c751e560c6229c641db297d9c89ee21719445dbc225a734c054a0a30bcf28888583559c73901f632fd37a5a81245fc81ce37fcca088d1be1e5597fb499a046404cd70f1c36956c2902756bb50525a58e009412e331e6b9d773be97bf18b712abf9d09a5056b3ee1ebcd563a10874b712f2cb67814718b5c9a3a500d5b1b6a112c03e225129024e4d0fd14ee3b63f96d6b23f6bbe0aa567afc2bb4f97af84962891afa76f7984cc2cc6379f2d9259327dda6cb3c3e19a3462db235e4e30cc2590f6aed02cf39561d2e417e2c504ff2accbdb5d4529639e5c30b91297ef857bb41f0ecc949b80f9869f4836e6766c0adde0ed78f97c9f25729ac8b222dcc4879a2fb2690fe9b9ba560a47b255e3c536938a9d3961b994dc675df27964e515c67c320c4746735aacf80b5494f8b2c33de42d67d313d8c3812d6f4fa0be8287f247a1c52b26a99583367981cdde1c470873e4758c7e8b9ae8adcf27aa9072556feae081cc12622caa8c5b5ae423566d3a51aefe8121fa2f69c01e3177908f04a95b86b303466a64c02903db317fda09082301b52579e0ca76293801a9a3a9b6a57fdecb0a7fa9d5960d62abb25e849b86b6a64028c637479a10eaef589ae130fe7dd4ffce08ae576e5818ab762f1d142a989ce60dda5e2d6169178054de597256576081b688441edf4016e9e10ca677e2f54197b1dfc4444b228479b2352e8e7ea49beffedef21d38bf758ce5ac945552940678d20ee07c246a2fe9246692a7ca418820736ff0b715636b0d124d4dbe27695ba9ef467059c0329f0a1d4ca7562595fc03726a0dfbb1e17e8d5198bf34b7415e8c41a8e68eb74ab75455ef77e68dda9443ac1c532cb9ad055c79dd18589e44d96b99d5db21c91189298e74062adccc143ee43730df3c41df23d289f08d6a2835565f2c0d488dfbc88c9d80dcacb525ff5b1b72ac2db252ff80ab4a9472c795fa6d7b11b92ad2bd5317a9da0ae42b1b4ef0b4f8604b35e14c6b4c7dad819652e0fdb62e5a3564db23000408f8d73bccd4d8aec702fba8058520d47ef96361baf52ef4a7ba296e0116eab115632d5e57a022c34122aa5fd69faf7ab3985abcfe586a800982494b619a3049d8b6f78fa484ed74384491fa4c718b00b6d44bfd6755cb8b9e85d3561bc117de21466a142d3fcbdf08d49968aaf82c79803f9d6b62c946d595263f718435163741301e640bde68d5a489efc00a94e89ebe508ea066b801158f03f8ed70a5323cebb1ca6cc0326202d332631ef4c6f9dd67a8cb06476f22229e01a699530eb474a931404c861fd412a7ac5bccbd02be9b460af8209581469b501c87ba7b1b9a6dcf34f3857a65fa13a3e797729dfbfbb737e71eedfd27987271f3f1ab207aeaa38a15af18f5b8a7b12f482ed05aaab78c69ec4c27f9b15d7e7ccc151755222a966b6cdcb14763f5d64257a639dcb11cef558dd2cf1b2f76d2cc2f7ee1942e43c7b076bb1f6f0b370cf5435fa6e4fc96dd1dd89e7d2f2dfa1bb197028635d35c49ea3d4061d44f8b0ba94b7b005bc1b90ccdb37109b2424256b55e573f99a806a4c607fc73443daf19c42a8960d8d758e4665b20e67ed2c7e414cc922a86ce7f3075b1f7a88c008f5d3d3aa8ea7a48d663ef706dfb2ed0149bc9732611bddedcbf9bda3a7d04b10f50a54ac099fc47b158f1dcc4982bec57b2b5729c8b51778a4b907398a72637df4aa9c7691e7d9c823695f0cf796b2ce768254cbb0a0387bac33869fd56f1c4e297c1d4cafd1d04c52a2b5b95cd1efd51cb3dda52986a8b6a80e506e9cc2f9f96900f43e94264890d0dc4b5c23b6a945fe9bb75778c812fbf17361a804c0ac6a283c9c10ed2f5efccf45288b817dcec89692a5b4bfed5ed33fbcb8f9c7bc4b531851d861989d540464ca3156b92b03a65b5ed25dbdceb19d70c8a11475abc1c8e297e027d9bd17826c65bf00dd0a5f1d4a60d0476bf71e21c4e63df4c7f6157d7ce51ae373c1c20d5dab3abb4a199abfbad7dfb480b4ceb471258d2a14055fba6835d3b7a29382d64b970253a42fb7c4935b075b256b01b5ccb8c8703eaedc0f012b12702b5d7e93dcc48843cc04f15fdbc4c499b1439913d3baed371c707da7d1080e6efeb502c3c6cd274e5b84033b8183fa7dacaba9fa08f453a56ab2438604d80452c3cceeab7e3e8aa175db2ed8cc6c881c86a7fe0c4527ede23daac1b7a67c8dd1e4a0ea8426ba6643501dfe905a57da1f6e69b6cf3cb26198d1d96e4924b9e54bd395d649d57e753d471864dd4c3b70eb34366cb04fd9b4215f7a95c49f4c0dd7b181da8206b4f9dc3b1d366ebe12de4de2d86684c62f18303975f4094bfd6db43b9cafc5b7fe11edb3d773849702db3d982bba8afe2a15986cd447ec14d35c37403f23568b61a1bd2bb789fbd9f5ec9b1aebf24555168d769721346ce103094dc7933cd5fe0ae32ba8e61922d344b15a5e4437cd69fd9b3a25615ebf85cf84d5532041f67b6e93007e2ae75816701547fd2f3448f48b5b4a34ef20ccef14ebb590c116d4ccecbb1ba7f35f79f503c38cd06ce803877201f84819fc399875aef6ae0f964d02f6156129102dc05b29b47329c9d07034dcc16b5e6186d8980ca957b9c32417065c482f59158718945c7288cfa3892d21dbd2a6ca171e5dcaa6a0dd1e42f521cf1836cadede8f54cd4cc4897ae2443f5008dbd2a2bf9e582b9fccdb996f5fa72839bb7b492655981c41a874c8d2203e1ba3de7f364d43afa705ee13bffc34c9d81684ca2f31015c80eabeea5b1ec677603f7830e7de382407ab54f56db0e63cd05646e21f65b69b4ed99921e9147731eb4f71dd33ffdb02efa870b654f288d7408538acf4734abd850982459ba25f58d3b68e1f5bf17401e4a1064ecefd1bfa58c7577a244c23a9b86e3aaf41156799a749df01e5e4415f257a3396f794794b6fe69ef6eb456738c769f5b6406924918347ddf18ac6fcc673b3f4e961ba1a2f4f2e6e8a95957dc1252dd6779238e1665450ae10e651d67b2f0026cb890a4b56f029dc67fde3191a2e13c964e827785470c0c99295902f2b6f4b2a5f73794ef4f1fd10d4a3f4ca4516530a8e7508c34b8a65a8af6def3230f7b9b97b70a86dffa3fbdb88ad26544d5c96a960599edb7d39dc947adbb172ba0849804ea32556d8d8251a21623e3de6963e7ffc8ece74d3f9ffc909f72e532f1353c2be70a734c1fae5581bcd58e11b2c00e4a821ae59ce14f9a33f0c10c6deb65429d433077ff89aca602eb278cf2fb774e2ce135a15ab5ac284f837a8aa29ddedf7c4d2ec47609c946f40913ab31dd54066d8c4d3c01147fd8cef0f851f83c5f1e9b15d07acb6797c188d2b9dda88d23d67154738c5d053fd960bb60c51783b839ddff852fae329bde745b973623a158431adccef6ba1022749a73263f1eb68aa5481292924feaed2cd0caeb333916f5296f938bcd31f8e9b53316c33b46d7e1d20cbcd369cd76693c8da4699b5ceff06ffee96c14ec7fbe8d776f959129a0d48c4f8be77ff8be6b417620a5412fd1644793807fda3e14846bc7023a0f8871d6958133f6b323d077a543019378d431","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"8a01c5d3519b99bb5af51a466587a22b"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
